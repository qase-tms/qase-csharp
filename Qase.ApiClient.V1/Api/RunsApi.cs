// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Qase.ApiClient.V1.Client;
using Qase.ApiClient.V1.Model;

namespace Qase.ApiClient.V1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IRunsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        RunsApiEvents Events { get; }

        /// <summary>
        /// Complete a specific run
        /// </summary>
        /// <remarks>
        /// This method allows to complete a specific run. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICompleteRunApiResponse"/>&gt;</returns>
        Task<ICompleteRunApiResponse> CompleteRunAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Complete a specific run
        /// </summary>
        /// <remarks>
        /// This method allows to complete a specific run. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICompleteRunApiResponse"/>?&gt;</returns>
        Task<ICompleteRunApiResponse?> CompleteRunOrDefaultAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new run
        /// </summary>
        /// <remarks>
        /// This method allows to create a run in selected project. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="runCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateRunApiResponse"/>&gt;</returns>
        Task<ICreateRunApiResponse> CreateRunAsync(string code, RunCreate runCreate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new run
        /// </summary>
        /// <remarks>
        /// This method allows to create a run in selected project. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="runCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateRunApiResponse"/>?&gt;</returns>
        Task<ICreateRunApiResponse?> CreateRunOrDefaultAsync(string code, RunCreate runCreate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete run
        /// </summary>
        /// <remarks>
        /// This method completely deletes a run from repository. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteRunApiResponse"/>&gt;</returns>
        Task<IDeleteRunApiResponse> DeleteRunAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete run
        /// </summary>
        /// <remarks>
        /// This method completely deletes a run from repository. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteRunApiResponse"/>?&gt;</returns>
        Task<IDeleteRunApiResponse?> DeleteRunOrDefaultAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a specific run
        /// </summary>
        /// <remarks>
        /// This method allows to retrieve a specific run. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="include">Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects, external_issue  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRunApiResponse"/>&gt;</returns>
        Task<IGetRunApiResponse> GetRunAsync(string code, int id, Option<string> include = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a specific run
        /// </summary>
        /// <remarks>
        /// This method allows to retrieve a specific run. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="include">Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects, external_issue  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRunApiResponse"/>?&gt;</returns>
        Task<IGetRunApiResponse?> GetRunOrDefaultAsync(string code, int id, Option<string> include = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all runs
        /// </summary>
        /// <remarks>
        /// This method allows to retrieve all runs stored in selected project. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="search"> (optional)</param>
        /// <param name="status">A list of status values separated by comma. Possible values: in_progress, passed, failed, aborted, active (deprecated), complete (deprecated), abort (deprecated).  (optional)</param>
        /// <param name="milestone"> (optional)</param>
        /// <param name="environment"> (optional)</param>
        /// <param name="fromStartTime"> (optional)</param>
        /// <param name="toStartTime"> (optional)</param>
        /// <param name="limit">A number of entities in result set. (optional, default to 10)</param>
        /// <param name="offset">How many entities should be skipped. (optional, default to 0)</param>
        /// <param name="include">Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects, external_issue  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRunsApiResponse"/>&gt;</returns>
        Task<IGetRunsApiResponse> GetRunsAsync(string code, Option<string> search = default, Option<string> status = default, Option<int> milestone = default, Option<int> environment = default, Option<long> fromStartTime = default, Option<long> toStartTime = default, Option<int> limit = default, Option<int> offset = default, Option<string> include = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all runs
        /// </summary>
        /// <remarks>
        /// This method allows to retrieve all runs stored in selected project. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="search"> (optional)</param>
        /// <param name="status">A list of status values separated by comma. Possible values: in_progress, passed, failed, aborted, active (deprecated), complete (deprecated), abort (deprecated).  (optional)</param>
        /// <param name="milestone"> (optional)</param>
        /// <param name="environment"> (optional)</param>
        /// <param name="fromStartTime"> (optional)</param>
        /// <param name="toStartTime"> (optional)</param>
        /// <param name="limit">A number of entities in result set. (optional, default to 10)</param>
        /// <param name="offset">How many entities should be skipped. (optional, default to 0)</param>
        /// <param name="include">Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects, external_issue  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRunsApiResponse"/>?&gt;</returns>
        Task<IGetRunsApiResponse?> GetRunsOrDefaultAsync(string code, Option<string> search = default, Option<string> status = default, Option<int> milestone = default, Option<int> environment = default, Option<long> fromStartTime = default, Option<long> toStartTime = default, Option<int> limit = default, Option<int> offset = default, Option<string> include = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update external issues for runs
        /// </summary>
        /// <remarks>
        /// This method allows you to update links between test runs and external issues (such as Jira tickets).  You can use this endpoint to: - Link test runs to external issues by providing the external issue identifier (e.g., \&quot;PROJ-1234\&quot;) - Update existing links by providing a new external issue identifier - Remove existing links by setting the external_issue field to null  **Important**: Each test run can have only one link with an external issue. If a test run already has an external issue link, providing a new external_issue value will replace the existing link.  The endpoint supports both Jira Cloud and Jira Server integrations. Each request can update multiple test run links in a single operation. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="runexternalIssues"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRunUpdateExternalIssueApiResponse"/>&gt;</returns>
        Task<IRunUpdateExternalIssueApiResponse> RunUpdateExternalIssueAsync(string code, RunexternalIssues runexternalIssues, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update external issues for runs
        /// </summary>
        /// <remarks>
        /// This method allows you to update links between test runs and external issues (such as Jira tickets).  You can use this endpoint to: - Link test runs to external issues by providing the external issue identifier (e.g., \&quot;PROJ-1234\&quot;) - Update existing links by providing a new external issue identifier - Remove existing links by setting the external_issue field to null  **Important**: Each test run can have only one link with an external issue. If a test run already has an external issue link, providing a new external_issue value will replace the existing link.  The endpoint supports both Jira Cloud and Jira Server integrations. Each request can update multiple test run links in a single operation. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="runexternalIssues"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRunUpdateExternalIssueApiResponse"/>?&gt;</returns>
        Task<IRunUpdateExternalIssueApiResponse?> RunUpdateExternalIssueOrDefaultAsync(string code, RunexternalIssues runexternalIssues, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a specific run
        /// </summary>
        /// <remarks>
        /// This method allows to update a specific run. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="runupdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRunApiResponse"/>&gt;</returns>
        Task<IUpdateRunApiResponse> UpdateRunAsync(string code, int id, Runupdate runupdate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a specific run
        /// </summary>
        /// <remarks>
        /// This method allows to update a specific run. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="runupdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRunApiResponse"/>?&gt;</returns>
        Task<IUpdateRunApiResponse?> UpdateRunOrDefaultAsync(string code, int id, Runupdate runupdate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update publicity of a specific run
        /// </summary>
        /// <remarks>
        /// This method allows to update a publicity of specific run. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="runPublic"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRunPublicityApiResponse"/>&gt;</returns>
        Task<IUpdateRunPublicityApiResponse> UpdateRunPublicityAsync(string code, int id, RunPublic runPublic, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update publicity of a specific run
        /// </summary>
        /// <remarks>
        /// This method allows to update a publicity of specific run. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="runPublic"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRunPublicityApiResponse"/>?&gt;</returns>
        Task<IUpdateRunPublicityApiResponse?> UpdateRunPublicityOrDefaultAsync(string code, int id, RunPublic runPublic, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICompleteRunApiResponse"/>
    /// </summary>
    public interface ICompleteRunApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.BaseResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="ICreateRunApiResponse"/>
    /// </summary>
    public interface ICreateRunApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.IdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteRunApiResponse"/>
    /// </summary>
    public interface IDeleteRunApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.IdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IGetRunApiResponse"/>
    /// </summary>
    public interface IGetRunApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.RunResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IGetRunsApiResponse"/>
    /// </summary>
    public interface IGetRunsApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.RunListResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IRunUpdateExternalIssueApiResponse"/>
    /// </summary>
    public interface IRunUpdateExternalIssueApiResponse : Qase.ApiClient.V1.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateRunApiResponse"/>
    /// </summary>
    public interface IUpdateRunApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.BaseResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateRunPublicityApiResponse"/>
    /// </summary>
    public interface IUpdateRunPublicityApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.RunPublicResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class RunsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCompleteRun;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCompleteRun;

        internal void ExecuteOnCompleteRun(RunsApi.CompleteRunApiResponse apiResponse)
        {
            OnCompleteRun?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCompleteRun(Exception exception)
        {
            OnErrorCompleteRun?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateRun;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateRun;

        internal void ExecuteOnCreateRun(RunsApi.CreateRunApiResponse apiResponse)
        {
            OnCreateRun?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateRun(Exception exception)
        {
            OnErrorCreateRun?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteRun;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteRun;

        internal void ExecuteOnDeleteRun(RunsApi.DeleteRunApiResponse apiResponse)
        {
            OnDeleteRun?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteRun(Exception exception)
        {
            OnErrorDeleteRun?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetRun;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetRun;

        internal void ExecuteOnGetRun(RunsApi.GetRunApiResponse apiResponse)
        {
            OnGetRun?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetRun(Exception exception)
        {
            OnErrorGetRun?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetRuns;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetRuns;

        internal void ExecuteOnGetRuns(RunsApi.GetRunsApiResponse apiResponse)
        {
            OnGetRuns?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetRuns(Exception exception)
        {
            OnErrorGetRuns?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRunUpdateExternalIssue;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRunUpdateExternalIssue;

        internal void ExecuteOnRunUpdateExternalIssue(RunsApi.RunUpdateExternalIssueApiResponse apiResponse)
        {
            OnRunUpdateExternalIssue?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRunUpdateExternalIssue(Exception exception)
        {
            OnErrorRunUpdateExternalIssue?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateRun;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateRun;

        internal void ExecuteOnUpdateRun(RunsApi.UpdateRunApiResponse apiResponse)
        {
            OnUpdateRun?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateRun(Exception exception)
        {
            OnErrorUpdateRun?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateRunPublicity;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateRunPublicity;

        internal void ExecuteOnUpdateRunPublicity(RunsApi.UpdateRunPublicityApiResponse apiResponse)
        {
            OnUpdateRunPublicity?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateRunPublicity(Exception exception)
        {
            OnErrorUpdateRunPublicity?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class RunsApi : IRunsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<RunsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public RunsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RunsApi(ILogger<RunsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, RunsApiEvents runsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<RunsApi>();
            HttpClient = httpClient;
            Events = runsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCompleteRun(ref string code, ref int id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <returns></returns>
        private void ValidateCompleteRun(string code)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        private void AfterCompleteRunDefaultImplementation(ICompleteRunApiResponse apiResponseLocalVar, string code, int id)
        {
            bool suppressDefaultLog = false;
            AfterCompleteRun(ref suppressDefaultLog, apiResponseLocalVar, code, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        partial void AfterCompleteRun(ref bool suppressDefaultLog, ICompleteRunApiResponse apiResponseLocalVar, string code, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        private void OnErrorCompleteRunDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCompleteRun(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        partial void OnErrorCompleteRun(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id);

        /// <summary>
        /// Complete a specific run This method allows to complete a specific run. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICompleteRunApiResponse"/>&gt;</returns>
        public async Task<ICompleteRunApiResponse?> CompleteRunOrDefaultAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CompleteRunAsync(code, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Complete a specific run This method allows to complete a specific run. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICompleteRunApiResponse"/>&gt;</returns>
        public async Task<ICompleteRunApiResponse> CompleteRunAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCompleteRun(code);

                FormatCompleteRun(ref code, ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/run/{code}/{id}/complete"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/run/{code}/{id}/complete");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CompleteRunApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CompleteRunApiResponse>();

                        CompleteRunApiResponse apiResponseLocalVar = new CompleteRunApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/run/{code}/{id}/complete", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCompleteRunDefaultImplementation(apiResponseLocalVar, code, id);

                        Events.ExecuteOnCompleteRun(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCompleteRunDefaultImplementation(e, "/run/{code}/{id}/complete", uriBuilderLocalVar.Path, code, id);
                Events.ExecuteOnErrorCompleteRun(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CompleteRunApiResponse"/>
        /// </summary>
        public partial class CompleteRunApiResponse : Qase.ApiClient.V1.Client.ApiResponse, ICompleteRunApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CompleteRunApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CompleteRunApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CompleteRunApiResponse(ILogger<CompleteRunApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.BaseResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.BaseResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.BaseResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateRun(ref string code, RunCreate runCreate);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <param name="runCreate"></param>
        /// <returns></returns>
        private void ValidateCreateRun(string code, RunCreate runCreate)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));

            if (runCreate == null)
                throw new ArgumentNullException(nameof(runCreate));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="runCreate"></param>
        private void AfterCreateRunDefaultImplementation(ICreateRunApiResponse apiResponseLocalVar, string code, RunCreate runCreate)
        {
            bool suppressDefaultLog = false;
            AfterCreateRun(ref suppressDefaultLog, apiResponseLocalVar, code, runCreate);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="runCreate"></param>
        partial void AfterCreateRun(ref bool suppressDefaultLog, ICreateRunApiResponse apiResponseLocalVar, string code, RunCreate runCreate);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="runCreate"></param>
        private void OnErrorCreateRunDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, RunCreate runCreate)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateRun(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, runCreate);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="runCreate"></param>
        partial void OnErrorCreateRun(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, RunCreate runCreate);

        /// <summary>
        /// Create a new run This method allows to create a run in selected project. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="runCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateRunApiResponse"/>&gt;</returns>
        public async Task<ICreateRunApiResponse?> CreateRunOrDefaultAsync(string code, RunCreate runCreate, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateRunAsync(code, runCreate, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a new run This method allows to create a run in selected project. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="runCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateRunApiResponse"/>&gt;</returns>
        public async Task<ICreateRunApiResponse> CreateRunAsync(string code, RunCreate runCreate, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateRun(code, runCreate);

                FormatCreateRun(ref code, runCreate);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/run/{code}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/run/{code}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));

                    httpRequestMessageLocalVar.Content = (runCreate as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(runCreate, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateRunApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateRunApiResponse>();

                        CreateRunApiResponse apiResponseLocalVar = new CreateRunApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/run/{code}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateRunDefaultImplementation(apiResponseLocalVar, code, runCreate);

                        Events.ExecuteOnCreateRun(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateRunDefaultImplementation(e, "/run/{code}", uriBuilderLocalVar.Path, code, runCreate);
                Events.ExecuteOnErrorCreateRun(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateRunApiResponse"/>
        /// </summary>
        public partial class CreateRunApiResponse : Qase.ApiClient.V1.Client.ApiResponse, ICreateRunApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateRunApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateRunApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateRunApiResponse(ILogger<CreateRunApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.IdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.IdResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.IdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteRun(ref string code, ref int id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <returns></returns>
        private void ValidateDeleteRun(string code)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        private void AfterDeleteRunDefaultImplementation(IDeleteRunApiResponse apiResponseLocalVar, string code, int id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteRun(ref suppressDefaultLog, apiResponseLocalVar, code, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        partial void AfterDeleteRun(ref bool suppressDefaultLog, IDeleteRunApiResponse apiResponseLocalVar, string code, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteRunDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteRun(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteRun(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id);

        /// <summary>
        /// Delete run This method completely deletes a run from repository. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteRunApiResponse"/>&gt;</returns>
        public async Task<IDeleteRunApiResponse?> DeleteRunOrDefaultAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteRunAsync(code, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete run This method completely deletes a run from repository. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteRunApiResponse"/>&gt;</returns>
        public async Task<IDeleteRunApiResponse> DeleteRunAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteRun(code);

                FormatDeleteRun(ref code, ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/run/{code}/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/run/{code}/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteRunApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteRunApiResponse>();

                        DeleteRunApiResponse apiResponseLocalVar = new DeleteRunApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/run/{code}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteRunDefaultImplementation(apiResponseLocalVar, code, id);

                        Events.ExecuteOnDeleteRun(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteRunDefaultImplementation(e, "/run/{code}/{id}", uriBuilderLocalVar.Path, code, id);
                Events.ExecuteOnErrorDeleteRun(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteRunApiResponse"/>
        /// </summary>
        public partial class DeleteRunApiResponse : Qase.ApiClient.V1.Client.ApiResponse, IDeleteRunApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteRunApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteRunApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteRunApiResponse(ILogger<DeleteRunApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.IdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.IdResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.IdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetRun(ref string code, ref int id, ref Option<string> include);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <param name="include"></param>
        /// <returns></returns>
        private void ValidateGetRun(string code, Option<string> include)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));

            if (include.IsSet && include.Value == null)
                throw new ArgumentNullException(nameof(include));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="include"></param>
        private void AfterGetRunDefaultImplementation(IGetRunApiResponse apiResponseLocalVar, string code, int id, Option<string> include)
        {
            bool suppressDefaultLog = false;
            AfterGetRun(ref suppressDefaultLog, apiResponseLocalVar, code, id, include);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="include"></param>
        partial void AfterGetRun(ref bool suppressDefaultLog, IGetRunApiResponse apiResponseLocalVar, string code, int id, Option<string> include);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="include"></param>
        private void OnErrorGetRunDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id, Option<string> include)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetRun(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, id, include);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="include"></param>
        partial void OnErrorGetRun(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id, Option<string> include);

        /// <summary>
        /// Get a specific run This method allows to retrieve a specific run. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="include">Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects, external_issue  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRunApiResponse"/>&gt;</returns>
        public async Task<IGetRunApiResponse?> GetRunOrDefaultAsync(string code, int id, Option<string> include = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetRunAsync(code, id, include, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a specific run This method allows to retrieve a specific run. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="include">Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects, external_issue  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRunApiResponse"/>&gt;</returns>
        public async Task<IGetRunApiResponse> GetRunAsync(string code, int id, Option<string> include = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetRun(code, include);

                FormatGetRun(ref code, ref id, ref include);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/run/{code}/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/run/{code}/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (include.IsSet)
                        parseQueryStringLocalVar["include"] = ClientUtils.ParameterToString(include.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetRunApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetRunApiResponse>();

                        GetRunApiResponse apiResponseLocalVar = new GetRunApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/run/{code}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetRunDefaultImplementation(apiResponseLocalVar, code, id, include);

                        Events.ExecuteOnGetRun(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetRunDefaultImplementation(e, "/run/{code}/{id}", uriBuilderLocalVar.Path, code, id, include);
                Events.ExecuteOnErrorGetRun(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetRunApiResponse"/>
        /// </summary>
        public partial class GetRunApiResponse : Qase.ApiClient.V1.Client.ApiResponse, IGetRunApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetRunApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetRunApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetRunApiResponse(ILogger<GetRunApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.RunResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.RunResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.RunResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetRuns(ref string code, ref Option<string> search, ref Option<string> status, ref Option<int> milestone, ref Option<int> environment, ref Option<long> fromStartTime, ref Option<long> toStartTime, ref Option<int> limit, ref Option<int> offset, ref Option<string> include);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <param name="search"></param>
        /// <param name="status"></param>
        /// <param name="include"></param>
        /// <returns></returns>
        private void ValidateGetRuns(string code, Option<string> search, Option<string> status, Option<string> include)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status));

            if (include.IsSet && include.Value == null)
                throw new ArgumentNullException(nameof(include));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="search"></param>
        /// <param name="status"></param>
        /// <param name="milestone"></param>
        /// <param name="environment"></param>
        /// <param name="fromStartTime"></param>
        /// <param name="toStartTime"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="include"></param>
        private void AfterGetRunsDefaultImplementation(IGetRunsApiResponse apiResponseLocalVar, string code, Option<string> search, Option<string> status, Option<int> milestone, Option<int> environment, Option<long> fromStartTime, Option<long> toStartTime, Option<int> limit, Option<int> offset, Option<string> include)
        {
            bool suppressDefaultLog = false;
            AfterGetRuns(ref suppressDefaultLog, apiResponseLocalVar, code, search, status, milestone, environment, fromStartTime, toStartTime, limit, offset, include);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="search"></param>
        /// <param name="status"></param>
        /// <param name="milestone"></param>
        /// <param name="environment"></param>
        /// <param name="fromStartTime"></param>
        /// <param name="toStartTime"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="include"></param>
        partial void AfterGetRuns(ref bool suppressDefaultLog, IGetRunsApiResponse apiResponseLocalVar, string code, Option<string> search, Option<string> status, Option<int> milestone, Option<int> environment, Option<long> fromStartTime, Option<long> toStartTime, Option<int> limit, Option<int> offset, Option<string> include);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="search"></param>
        /// <param name="status"></param>
        /// <param name="milestone"></param>
        /// <param name="environment"></param>
        /// <param name="fromStartTime"></param>
        /// <param name="toStartTime"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="include"></param>
        private void OnErrorGetRunsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, Option<string> search, Option<string> status, Option<int> milestone, Option<int> environment, Option<long> fromStartTime, Option<long> toStartTime, Option<int> limit, Option<int> offset, Option<string> include)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetRuns(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, search, status, milestone, environment, fromStartTime, toStartTime, limit, offset, include);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="search"></param>
        /// <param name="status"></param>
        /// <param name="milestone"></param>
        /// <param name="environment"></param>
        /// <param name="fromStartTime"></param>
        /// <param name="toStartTime"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="include"></param>
        partial void OnErrorGetRuns(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, Option<string> search, Option<string> status, Option<int> milestone, Option<int> environment, Option<long> fromStartTime, Option<long> toStartTime, Option<int> limit, Option<int> offset, Option<string> include);

        /// <summary>
        /// Get all runs This method allows to retrieve all runs stored in selected project. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="search"> (optional)</param>
        /// <param name="status">A list of status values separated by comma. Possible values: in_progress, passed, failed, aborted, active (deprecated), complete (deprecated), abort (deprecated).  (optional)</param>
        /// <param name="milestone"> (optional)</param>
        /// <param name="environment"> (optional)</param>
        /// <param name="fromStartTime"> (optional)</param>
        /// <param name="toStartTime"> (optional)</param>
        /// <param name="limit">A number of entities in result set. (optional, default to 10)</param>
        /// <param name="offset">How many entities should be skipped. (optional, default to 0)</param>
        /// <param name="include">Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects, external_issue  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRunsApiResponse"/>&gt;</returns>
        public async Task<IGetRunsApiResponse?> GetRunsOrDefaultAsync(string code, Option<string> search = default, Option<string> status = default, Option<int> milestone = default, Option<int> environment = default, Option<long> fromStartTime = default, Option<long> toStartTime = default, Option<int> limit = default, Option<int> offset = default, Option<string> include = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetRunsAsync(code, search, status, milestone, environment, fromStartTime, toStartTime, limit, offset, include, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all runs This method allows to retrieve all runs stored in selected project. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="search"> (optional)</param>
        /// <param name="status">A list of status values separated by comma. Possible values: in_progress, passed, failed, aborted, active (deprecated), complete (deprecated), abort (deprecated).  (optional)</param>
        /// <param name="milestone"> (optional)</param>
        /// <param name="environment"> (optional)</param>
        /// <param name="fromStartTime"> (optional)</param>
        /// <param name="toStartTime"> (optional)</param>
        /// <param name="limit">A number of entities in result set. (optional, default to 10)</param>
        /// <param name="offset">How many entities should be skipped. (optional, default to 0)</param>
        /// <param name="include">Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects, external_issue  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRunsApiResponse"/>&gt;</returns>
        public async Task<IGetRunsApiResponse> GetRunsAsync(string code, Option<string> search = default, Option<string> status = default, Option<int> milestone = default, Option<int> environment = default, Option<long> fromStartTime = default, Option<long> toStartTime = default, Option<int> limit = default, Option<int> offset = default, Option<string> include = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetRuns(code, search, status, include);

                FormatGetRuns(ref code, ref search, ref status, ref milestone, ref environment, ref fromStartTime, ref toStartTime, ref limit, ref offset, ref include);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/run/{code}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/run/{code}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    if (status.IsSet)
                        parseQueryStringLocalVar["status"] = ClientUtils.ParameterToString(status.Value);

                    if (milestone.IsSet)
                        parseQueryStringLocalVar["milestone"] = ClientUtils.ParameterToString(milestone.Value);

                    if (environment.IsSet)
                        parseQueryStringLocalVar["environment"] = ClientUtils.ParameterToString(environment.Value);

                    if (fromStartTime.IsSet)
                        parseQueryStringLocalVar["from_start_time"] = ClientUtils.ParameterToString(fromStartTime.Value);

                    if (toStartTime.IsSet)
                        parseQueryStringLocalVar["to_start_time"] = ClientUtils.ParameterToString(toStartTime.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (include.IsSet)
                        parseQueryStringLocalVar["include"] = ClientUtils.ParameterToString(include.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetRunsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetRunsApiResponse>();

                        GetRunsApiResponse apiResponseLocalVar = new GetRunsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/run/{code}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetRunsDefaultImplementation(apiResponseLocalVar, code, search, status, milestone, environment, fromStartTime, toStartTime, limit, offset, include);

                        Events.ExecuteOnGetRuns(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetRunsDefaultImplementation(e, "/run/{code}", uriBuilderLocalVar.Path, code, search, status, milestone, environment, fromStartTime, toStartTime, limit, offset, include);
                Events.ExecuteOnErrorGetRuns(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetRunsApiResponse"/>
        /// </summary>
        public partial class GetRunsApiResponse : Qase.ApiClient.V1.Client.ApiResponse, IGetRunsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetRunsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetRunsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetRunsApiResponse(ILogger<GetRunsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.RunListResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.RunListResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.RunListResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRunUpdateExternalIssue(ref string code, RunexternalIssues runexternalIssues);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <param name="runexternalIssues"></param>
        /// <returns></returns>
        private void ValidateRunUpdateExternalIssue(string code, RunexternalIssues runexternalIssues)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));

            if (runexternalIssues == null)
                throw new ArgumentNullException(nameof(runexternalIssues));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="runexternalIssues"></param>
        private void AfterRunUpdateExternalIssueDefaultImplementation(IRunUpdateExternalIssueApiResponse apiResponseLocalVar, string code, RunexternalIssues runexternalIssues)
        {
            bool suppressDefaultLog = false;
            AfterRunUpdateExternalIssue(ref suppressDefaultLog, apiResponseLocalVar, code, runexternalIssues);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="runexternalIssues"></param>
        partial void AfterRunUpdateExternalIssue(ref bool suppressDefaultLog, IRunUpdateExternalIssueApiResponse apiResponseLocalVar, string code, RunexternalIssues runexternalIssues);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="runexternalIssues"></param>
        private void OnErrorRunUpdateExternalIssueDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, RunexternalIssues runexternalIssues)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRunUpdateExternalIssue(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, runexternalIssues);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="runexternalIssues"></param>
        partial void OnErrorRunUpdateExternalIssue(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, RunexternalIssues runexternalIssues);

        /// <summary>
        /// Update external issues for runs This method allows you to update links between test runs and external issues (such as Jira tickets).  You can use this endpoint to: - Link test runs to external issues by providing the external issue identifier (e.g., \&quot;PROJ-1234\&quot;) - Update existing links by providing a new external issue identifier - Remove existing links by setting the external_issue field to null  **Important**: Each test run can have only one link with an external issue. If a test run already has an external issue link, providing a new external_issue value will replace the existing link.  The endpoint supports both Jira Cloud and Jira Server integrations. Each request can update multiple test run links in a single operation. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="runexternalIssues"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRunUpdateExternalIssueApiResponse"/>&gt;</returns>
        public async Task<IRunUpdateExternalIssueApiResponse?> RunUpdateExternalIssueOrDefaultAsync(string code, RunexternalIssues runexternalIssues, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RunUpdateExternalIssueAsync(code, runexternalIssues, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update external issues for runs This method allows you to update links between test runs and external issues (such as Jira tickets).  You can use this endpoint to: - Link test runs to external issues by providing the external issue identifier (e.g., \&quot;PROJ-1234\&quot;) - Update existing links by providing a new external issue identifier - Remove existing links by setting the external_issue field to null  **Important**: Each test run can have only one link with an external issue. If a test run already has an external issue link, providing a new external_issue value will replace the existing link.  The endpoint supports both Jira Cloud and Jira Server integrations. Each request can update multiple test run links in a single operation. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="runexternalIssues"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRunUpdateExternalIssueApiResponse"/>&gt;</returns>
        public async Task<IRunUpdateExternalIssueApiResponse> RunUpdateExternalIssueAsync(string code, RunexternalIssues runexternalIssues, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRunUpdateExternalIssue(code, runexternalIssues);

                FormatRunUpdateExternalIssue(ref code, runexternalIssues);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/run/{code}/external-issue"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/run/{code}/external-issue");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));

                    httpRequestMessageLocalVar.Content = (runexternalIssues as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(runexternalIssues, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<RunUpdateExternalIssueApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RunUpdateExternalIssueApiResponse>();

                        RunUpdateExternalIssueApiResponse apiResponseLocalVar = new RunUpdateExternalIssueApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/run/{code}/external-issue", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRunUpdateExternalIssueDefaultImplementation(apiResponseLocalVar, code, runexternalIssues);

                        Events.ExecuteOnRunUpdateExternalIssue(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRunUpdateExternalIssueDefaultImplementation(e, "/run/{code}/external-issue", uriBuilderLocalVar.Path, code, runexternalIssues);
                Events.ExecuteOnErrorRunUpdateExternalIssue(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RunUpdateExternalIssueApiResponse"/>
        /// </summary>
        public partial class RunUpdateExternalIssueApiResponse : Qase.ApiClient.V1.Client.ApiResponse, IRunUpdateExternalIssueApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RunUpdateExternalIssueApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RunUpdateExternalIssueApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RunUpdateExternalIssueApiResponse(ILogger<RunUpdateExternalIssueApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateRun(ref string code, ref int id, Runupdate runupdate);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <param name="runupdate"></param>
        /// <returns></returns>
        private void ValidateUpdateRun(string code, Runupdate runupdate)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));

            if (runupdate == null)
                throw new ArgumentNullException(nameof(runupdate));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="runupdate"></param>
        private void AfterUpdateRunDefaultImplementation(IUpdateRunApiResponse apiResponseLocalVar, string code, int id, Runupdate runupdate)
        {
            bool suppressDefaultLog = false;
            AfterUpdateRun(ref suppressDefaultLog, apiResponseLocalVar, code, id, runupdate);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="runupdate"></param>
        partial void AfterUpdateRun(ref bool suppressDefaultLog, IUpdateRunApiResponse apiResponseLocalVar, string code, int id, Runupdate runupdate);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="runupdate"></param>
        private void OnErrorUpdateRunDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id, Runupdate runupdate)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateRun(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, id, runupdate);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="runupdate"></param>
        partial void OnErrorUpdateRun(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id, Runupdate runupdate);

        /// <summary>
        /// Update a specific run This method allows to update a specific run. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="runupdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRunApiResponse"/>&gt;</returns>
        public async Task<IUpdateRunApiResponse?> UpdateRunOrDefaultAsync(string code, int id, Runupdate runupdate, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateRunAsync(code, id, runupdate, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update a specific run This method allows to update a specific run. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="runupdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRunApiResponse"/>&gt;</returns>
        public async Task<IUpdateRunApiResponse> UpdateRunAsync(string code, int id, Runupdate runupdate, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateRun(code, runupdate);

                FormatUpdateRun(ref code, ref id, runupdate);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/run/{code}/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/run/{code}/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (runupdate as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(runupdate, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PATCH");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UpdateRunApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateRunApiResponse>();

                        UpdateRunApiResponse apiResponseLocalVar = new UpdateRunApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/run/{code}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateRunDefaultImplementation(apiResponseLocalVar, code, id, runupdate);

                        Events.ExecuteOnUpdateRun(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateRunDefaultImplementation(e, "/run/{code}/{id}", uriBuilderLocalVar.Path, code, id, runupdate);
                Events.ExecuteOnErrorUpdateRun(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateRunApiResponse"/>
        /// </summary>
        public partial class UpdateRunApiResponse : Qase.ApiClient.V1.Client.ApiResponse, IUpdateRunApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateRunApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateRunApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateRunApiResponse(ILogger<UpdateRunApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.BaseResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.BaseResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.BaseResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateRunPublicity(ref string code, ref int id, RunPublic runPublic);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <param name="runPublic"></param>
        /// <returns></returns>
        private void ValidateUpdateRunPublicity(string code, RunPublic runPublic)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));

            if (runPublic == null)
                throw new ArgumentNullException(nameof(runPublic));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="runPublic"></param>
        private void AfterUpdateRunPublicityDefaultImplementation(IUpdateRunPublicityApiResponse apiResponseLocalVar, string code, int id, RunPublic runPublic)
        {
            bool suppressDefaultLog = false;
            AfterUpdateRunPublicity(ref suppressDefaultLog, apiResponseLocalVar, code, id, runPublic);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="runPublic"></param>
        partial void AfterUpdateRunPublicity(ref bool suppressDefaultLog, IUpdateRunPublicityApiResponse apiResponseLocalVar, string code, int id, RunPublic runPublic);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="runPublic"></param>
        private void OnErrorUpdateRunPublicityDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id, RunPublic runPublic)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateRunPublicity(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, id, runPublic);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="runPublic"></param>
        partial void OnErrorUpdateRunPublicity(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id, RunPublic runPublic);

        /// <summary>
        /// Update publicity of a specific run This method allows to update a publicity of specific run. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="runPublic"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRunPublicityApiResponse"/>&gt;</returns>
        public async Task<IUpdateRunPublicityApiResponse?> UpdateRunPublicityOrDefaultAsync(string code, int id, RunPublic runPublic, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateRunPublicityAsync(code, id, runPublic, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update publicity of a specific run This method allows to update a publicity of specific run. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="runPublic"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRunPublicityApiResponse"/>&gt;</returns>
        public async Task<IUpdateRunPublicityApiResponse> UpdateRunPublicityAsync(string code, int id, RunPublic runPublic, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateRunPublicity(code, runPublic);

                FormatUpdateRunPublicity(ref code, ref id, runPublic);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/run/{code}/{id}/public"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/run/{code}/{id}/public");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (runPublic as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(runPublic, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PATCH");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UpdateRunPublicityApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateRunPublicityApiResponse>();

                        UpdateRunPublicityApiResponse apiResponseLocalVar = new UpdateRunPublicityApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/run/{code}/{id}/public", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateRunPublicityDefaultImplementation(apiResponseLocalVar, code, id, runPublic);

                        Events.ExecuteOnUpdateRunPublicity(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateRunPublicityDefaultImplementation(e, "/run/{code}/{id}/public", uriBuilderLocalVar.Path, code, id, runPublic);
                Events.ExecuteOnErrorUpdateRunPublicity(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateRunPublicityApiResponse"/>
        /// </summary>
        public partial class UpdateRunPublicityApiResponse : Qase.ApiClient.V1.Client.ApiResponse, IUpdateRunPublicityApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateRunPublicityApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateRunPublicityApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateRunPublicityApiResponse(ILogger<UpdateRunPublicityApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.RunPublicResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.RunPublicResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.RunPublicResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
