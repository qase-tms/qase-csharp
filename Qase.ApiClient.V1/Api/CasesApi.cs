// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Qase.ApiClient.V1.Client;
using Qase.ApiClient.V1.Model;

namespace Qase.ApiClient.V1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICasesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        CasesApiEvents Events { get; }

        /// <summary>
        /// Create test cases in bulk
        /// </summary>
        /// <remarks>
        /// This method allows to bulk create new test cases in a project. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="testCasebulk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBulkApiResponse"/>&gt;</returns>
        Task<IBulkApiResponse> BulkAsync(string code, TestCasebulk testCasebulk, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create test cases in bulk
        /// </summary>
        /// <remarks>
        /// This method allows to bulk create new test cases in a project. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="testCasebulk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBulkApiResponse"/>?&gt;</returns>
        Task<IBulkApiResponse?> BulkOrDefaultAsync(string code, TestCasebulk testCasebulk, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Attach the external issues to the test cases
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="testCaseexternalIssues"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICaseAttachExternalIssueApiResponse"/>&gt;</returns>
        Task<ICaseAttachExternalIssueApiResponse> CaseAttachExternalIssueAsync(string code, TestCaseExternalIssues testCaseexternalIssues, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Attach the external issues to the test cases
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="testCaseexternalIssues"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICaseAttachExternalIssueApiResponse"/>?&gt;</returns>
        Task<ICaseAttachExternalIssueApiResponse?> CaseAttachExternalIssueOrDefaultAsync(string code, TestCaseExternalIssues testCaseexternalIssues, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Detach the external issues from the test cases
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="testCaseexternalIssues"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICaseDetachExternalIssueApiResponse"/>&gt;</returns>
        Task<ICaseDetachExternalIssueApiResponse> CaseDetachExternalIssueAsync(string code, TestCaseExternalIssues testCaseexternalIssues, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Detach the external issues from the test cases
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="testCaseexternalIssues"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICaseDetachExternalIssueApiResponse"/>?&gt;</returns>
        Task<ICaseDetachExternalIssueApiResponse?> CaseDetachExternalIssueOrDefaultAsync(string code, TestCaseExternalIssues testCaseexternalIssues, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new test case
        /// </summary>
        /// <remarks>
        /// This method allows to create a new test case in selected project. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="testCaseCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateCaseApiResponse"/>&gt;</returns>
        Task<ICreateCaseApiResponse> CreateCaseAsync(string code, TestCaseCreate testCaseCreate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new test case
        /// </summary>
        /// <remarks>
        /// This method allows to create a new test case in selected project. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="testCaseCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateCaseApiResponse"/>?&gt;</returns>
        Task<ICreateCaseApiResponse?> CreateCaseOrDefaultAsync(string code, TestCaseCreate testCaseCreate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete test case
        /// </summary>
        /// <remarks>
        /// This method completely deletes a test case from repository. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCaseApiResponse"/>&gt;</returns>
        Task<IDeleteCaseApiResponse> DeleteCaseAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete test case
        /// </summary>
        /// <remarks>
        /// This method completely deletes a test case from repository. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCaseApiResponse"/>?&gt;</returns>
        Task<IDeleteCaseApiResponse?> DeleteCaseOrDefaultAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a specific test case
        /// </summary>
        /// <remarks>
        /// This method allows to retrieve a specific test case. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="include">A list of entities to include in response separated by comma. Possible values: external_issues.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCaseApiResponse"/>&gt;</returns>
        Task<IGetCaseApiResponse> GetCaseAsync(string code, int id, Option<string> include = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a specific test case
        /// </summary>
        /// <remarks>
        /// This method allows to retrieve a specific test case. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="include">A list of entities to include in response separated by comma. Possible values: external_issues.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCaseApiResponse"/>?&gt;</returns>
        Task<IGetCaseApiResponse?> GetCaseOrDefaultAsync(string code, int id, Option<string> include = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all test cases
        /// </summary>
        /// <remarks>
        /// This method allows to retrieve all test cases stored in selected project. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="search">Provide a string that will be used to search by name. (optional)</param>
        /// <param name="milestoneId">ID of milestone. (optional)</param>
        /// <param name="suiteId">ID of test suite. (optional)</param>
        /// <param name="severity">A list of severity values separated by comma. Possible values: undefined, blocker, critical, major, normal, minor, trivial  (optional)</param>
        /// <param name="priority">A list of priority values separated by comma. Possible values: undefined, high, medium, low  (optional)</param>
        /// <param name="type">A list of type values separated by comma. Possible values: other, functional smoke, regression, security, usability, performance, acceptance  (optional)</param>
        /// <param name="behavior">A list of behavior values separated by comma. Possible values: undefined, positive negative, destructive  (optional)</param>
        /// <param name="automation">A list of values separated by comma. Possible values: is-not-automated, automated to-be-automated  (optional)</param>
        /// <param name="status">A list of values separated by comma. Possible values: actual, draft deprecated  (optional)</param>
        /// <param name="externalIssuesType">An integration type.  (optional)</param>
        /// <param name="externalIssuesIds">A list of issue IDs. (optional)</param>
        /// <param name="include">A list of entities to include in response separated by comma. Possible values: external_issues.  (optional)</param>
        /// <param name="limit">A number of entities in result set. (optional, default to 10)</param>
        /// <param name="offset">How many entities should be skipped. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCasesApiResponse"/>&gt;</returns>
        Task<IGetCasesApiResponse> GetCasesAsync(string code, Option<string> search = default, Option<int> milestoneId = default, Option<int> suiteId = default, Option<string> severity = default, Option<string> priority = default, Option<string> type = default, Option<string> behavior = default, Option<string> automation = default, Option<string> status = default, Option<string> externalIssuesType = default, Option<List<string>> externalIssuesIds = default, Option<string> include = default, Option<int> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all test cases
        /// </summary>
        /// <remarks>
        /// This method allows to retrieve all test cases stored in selected project. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="search">Provide a string that will be used to search by name. (optional)</param>
        /// <param name="milestoneId">ID of milestone. (optional)</param>
        /// <param name="suiteId">ID of test suite. (optional)</param>
        /// <param name="severity">A list of severity values separated by comma. Possible values: undefined, blocker, critical, major, normal, minor, trivial  (optional)</param>
        /// <param name="priority">A list of priority values separated by comma. Possible values: undefined, high, medium, low  (optional)</param>
        /// <param name="type">A list of type values separated by comma. Possible values: other, functional smoke, regression, security, usability, performance, acceptance  (optional)</param>
        /// <param name="behavior">A list of behavior values separated by comma. Possible values: undefined, positive negative, destructive  (optional)</param>
        /// <param name="automation">A list of values separated by comma. Possible values: is-not-automated, automated to-be-automated  (optional)</param>
        /// <param name="status">A list of values separated by comma. Possible values: actual, draft deprecated  (optional)</param>
        /// <param name="externalIssuesType">An integration type.  (optional)</param>
        /// <param name="externalIssuesIds">A list of issue IDs. (optional)</param>
        /// <param name="include">A list of entities to include in response separated by comma. Possible values: external_issues.  (optional)</param>
        /// <param name="limit">A number of entities in result set. (optional, default to 10)</param>
        /// <param name="offset">How many entities should be skipped. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCasesApiResponse"/>?&gt;</returns>
        Task<IGetCasesApiResponse?> GetCasesOrDefaultAsync(string code, Option<string> search = default, Option<int> milestoneId = default, Option<int> suiteId = default, Option<string> severity = default, Option<string> priority = default, Option<string> type = default, Option<string> behavior = default, Option<string> automation = default, Option<string> status = default, Option<string> externalIssuesType = default, Option<List<string>> externalIssuesIds = default, Option<string> include = default, Option<int> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update test case
        /// </summary>
        /// <remarks>
        /// This method updates a test case. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="testCaseUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateCaseApiResponse"/>&gt;</returns>
        Task<IUpdateCaseApiResponse> UpdateCaseAsync(string code, int id, TestCaseUpdate testCaseUpdate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update test case
        /// </summary>
        /// <remarks>
        /// This method updates a test case. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="testCaseUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateCaseApiResponse"/>?&gt;</returns>
        Task<IUpdateCaseApiResponse?> UpdateCaseOrDefaultAsync(string code, int id, TestCaseUpdate testCaseUpdate, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IBulkApiResponse"/>
    /// </summary>
    public interface IBulkApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.Bulk200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="ICaseAttachExternalIssueApiResponse"/>
    /// </summary>
    public interface ICaseAttachExternalIssueApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.BaseResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 402 PaymentRequired
        /// </summary>
        /// <returns></returns>
        bool IsPaymentRequired { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="ICaseDetachExternalIssueApiResponse"/>
    /// </summary>
    public interface ICaseDetachExternalIssueApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.BaseResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 402 PaymentRequired
        /// </summary>
        /// <returns></returns>
        bool IsPaymentRequired { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="ICreateCaseApiResponse"/>
    /// </summary>
    public interface ICreateCaseApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.IdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteCaseApiResponse"/>
    /// </summary>
    public interface IDeleteCaseApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.IdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IGetCaseApiResponse"/>
    /// </summary>
    public interface IGetCaseApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.TestCaseResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IGetCasesApiResponse"/>
    /// </summary>
    public interface IGetCasesApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.TestCaseListResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 402 PaymentRequired
        /// </summary>
        /// <returns></returns>
        bool IsPaymentRequired { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateCaseApiResponse"/>
    /// </summary>
    public interface IUpdateCaseApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.IdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CasesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnBulk;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorBulk;

        internal void ExecuteOnBulk(CasesApi.BulkApiResponse apiResponse)
        {
            OnBulk?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorBulk(Exception exception)
        {
            OnErrorBulk?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCaseAttachExternalIssue;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCaseAttachExternalIssue;

        internal void ExecuteOnCaseAttachExternalIssue(CasesApi.CaseAttachExternalIssueApiResponse apiResponse)
        {
            OnCaseAttachExternalIssue?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCaseAttachExternalIssue(Exception exception)
        {
            OnErrorCaseAttachExternalIssue?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCaseDetachExternalIssue;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCaseDetachExternalIssue;

        internal void ExecuteOnCaseDetachExternalIssue(CasesApi.CaseDetachExternalIssueApiResponse apiResponse)
        {
            OnCaseDetachExternalIssue?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCaseDetachExternalIssue(Exception exception)
        {
            OnErrorCaseDetachExternalIssue?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateCase;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateCase;

        internal void ExecuteOnCreateCase(CasesApi.CreateCaseApiResponse apiResponse)
        {
            OnCreateCase?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateCase(Exception exception)
        {
            OnErrorCreateCase?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteCase;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteCase;

        internal void ExecuteOnDeleteCase(CasesApi.DeleteCaseApiResponse apiResponse)
        {
            OnDeleteCase?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteCase(Exception exception)
        {
            OnErrorDeleteCase?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetCase;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetCase;

        internal void ExecuteOnGetCase(CasesApi.GetCaseApiResponse apiResponse)
        {
            OnGetCase?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCase(Exception exception)
        {
            OnErrorGetCase?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetCases;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetCases;

        internal void ExecuteOnGetCases(CasesApi.GetCasesApiResponse apiResponse)
        {
            OnGetCases?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCases(Exception exception)
        {
            OnErrorGetCases?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateCase;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateCase;

        internal void ExecuteOnUpdateCase(CasesApi.UpdateCaseApiResponse apiResponse)
        {
            OnUpdateCase?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateCase(Exception exception)
        {
            OnErrorUpdateCase?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class CasesApi : ICasesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CasesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public CasesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CasesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CasesApi(ILogger<CasesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, CasesApiEvents casesApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<CasesApi>();
            HttpClient = httpClient;
            Events = casesApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatBulk(ref string code, TestCasebulk testCasebulk);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <param name="testCasebulk"></param>
        /// <returns></returns>
        private void ValidateBulk(string code, TestCasebulk testCasebulk)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));

            if (testCasebulk == null)
                throw new ArgumentNullException(nameof(testCasebulk));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="testCasebulk"></param>
        private void AfterBulkDefaultImplementation(IBulkApiResponse apiResponseLocalVar, string code, TestCasebulk testCasebulk)
        {
            bool suppressDefaultLog = false;
            AfterBulk(ref suppressDefaultLog, apiResponseLocalVar, code, testCasebulk);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="testCasebulk"></param>
        partial void AfterBulk(ref bool suppressDefaultLog, IBulkApiResponse apiResponseLocalVar, string code, TestCasebulk testCasebulk);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="testCasebulk"></param>
        private void OnErrorBulkDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, TestCasebulk testCasebulk)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorBulk(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, testCasebulk);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="testCasebulk"></param>
        partial void OnErrorBulk(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, TestCasebulk testCasebulk);

        /// <summary>
        /// Create test cases in bulk This method allows to bulk create new test cases in a project. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="testCasebulk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBulkApiResponse"/>&gt;</returns>
        public async Task<IBulkApiResponse?> BulkOrDefaultAsync(string code, TestCasebulk testCasebulk, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await BulkAsync(code, testCasebulk, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create test cases in bulk This method allows to bulk create new test cases in a project. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="testCasebulk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBulkApiResponse"/>&gt;</returns>
        public async Task<IBulkApiResponse> BulkAsync(string code, TestCasebulk testCasebulk, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateBulk(code, testCasebulk);

                FormatBulk(ref code, testCasebulk);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/case/{code}/bulk"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/case/{code}/bulk");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));

                    httpRequestMessageLocalVar.Content = (testCasebulk as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(testCasebulk, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<BulkApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<BulkApiResponse>();

                        BulkApiResponse apiResponseLocalVar = new BulkApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/case/{code}/bulk", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterBulkDefaultImplementation(apiResponseLocalVar, code, testCasebulk);

                        Events.ExecuteOnBulk(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorBulkDefaultImplementation(e, "/case/{code}/bulk", uriBuilderLocalVar.Path, code, testCasebulk);
                Events.ExecuteOnErrorBulk(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="BulkApiResponse"/>
        /// </summary>
        public partial class BulkApiResponse : Qase.ApiClient.V1.Client.ApiResponse, IBulkApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<BulkApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="BulkApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public BulkApiResponse(ILogger<BulkApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.Bulk200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.Bulk200Response>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.Bulk200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCaseAttachExternalIssue(ref string code, TestCaseExternalIssues testCaseexternalIssues);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <param name="testCaseexternalIssues"></param>
        /// <returns></returns>
        private void ValidateCaseAttachExternalIssue(string code, TestCaseExternalIssues testCaseexternalIssues)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));

            if (testCaseexternalIssues == null)
                throw new ArgumentNullException(nameof(testCaseexternalIssues));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="testCaseexternalIssues"></param>
        private void AfterCaseAttachExternalIssueDefaultImplementation(ICaseAttachExternalIssueApiResponse apiResponseLocalVar, string code, TestCaseExternalIssues testCaseexternalIssues)
        {
            bool suppressDefaultLog = false;
            AfterCaseAttachExternalIssue(ref suppressDefaultLog, apiResponseLocalVar, code, testCaseexternalIssues);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="testCaseexternalIssues"></param>
        partial void AfterCaseAttachExternalIssue(ref bool suppressDefaultLog, ICaseAttachExternalIssueApiResponse apiResponseLocalVar, string code, TestCaseExternalIssues testCaseexternalIssues);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="testCaseexternalIssues"></param>
        private void OnErrorCaseAttachExternalIssueDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, TestCaseExternalIssues testCaseexternalIssues)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCaseAttachExternalIssue(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, testCaseexternalIssues);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="testCaseexternalIssues"></param>
        partial void OnErrorCaseAttachExternalIssue(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, TestCaseExternalIssues testCaseexternalIssues);

        /// <summary>
        /// Attach the external issues to the test cases 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="testCaseexternalIssues"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICaseAttachExternalIssueApiResponse"/>&gt;</returns>
        public async Task<ICaseAttachExternalIssueApiResponse?> CaseAttachExternalIssueOrDefaultAsync(string code, TestCaseExternalIssues testCaseexternalIssues, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CaseAttachExternalIssueAsync(code, testCaseexternalIssues, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Attach the external issues to the test cases 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="testCaseexternalIssues"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICaseAttachExternalIssueApiResponse"/>&gt;</returns>
        public async Task<ICaseAttachExternalIssueApiResponse> CaseAttachExternalIssueAsync(string code, TestCaseExternalIssues testCaseexternalIssues, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCaseAttachExternalIssue(code, testCaseexternalIssues);

                FormatCaseAttachExternalIssue(ref code, testCaseexternalIssues);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/case/{code}/external-issue/attach"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/case/{code}/external-issue/attach");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));

                    httpRequestMessageLocalVar.Content = (testCaseexternalIssues as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(testCaseexternalIssues, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CaseAttachExternalIssueApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CaseAttachExternalIssueApiResponse>();

                        CaseAttachExternalIssueApiResponse apiResponseLocalVar = new CaseAttachExternalIssueApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/case/{code}/external-issue/attach", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCaseAttachExternalIssueDefaultImplementation(apiResponseLocalVar, code, testCaseexternalIssues);

                        Events.ExecuteOnCaseAttachExternalIssue(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCaseAttachExternalIssueDefaultImplementation(e, "/case/{code}/external-issue/attach", uriBuilderLocalVar.Path, code, testCaseexternalIssues);
                Events.ExecuteOnErrorCaseAttachExternalIssue(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CaseAttachExternalIssueApiResponse"/>
        /// </summary>
        public partial class CaseAttachExternalIssueApiResponse : Qase.ApiClient.V1.Client.ApiResponse, ICaseAttachExternalIssueApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CaseAttachExternalIssueApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CaseAttachExternalIssueApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CaseAttachExternalIssueApiResponse(ILogger<CaseAttachExternalIssueApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.BaseResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.BaseResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.BaseResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 402 PaymentRequired
            /// </summary>
            /// <returns></returns>
            public bool IsPaymentRequired => 402 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCaseDetachExternalIssue(ref string code, TestCaseExternalIssues testCaseexternalIssues);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <param name="testCaseexternalIssues"></param>
        /// <returns></returns>
        private void ValidateCaseDetachExternalIssue(string code, TestCaseExternalIssues testCaseexternalIssues)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));

            if (testCaseexternalIssues == null)
                throw new ArgumentNullException(nameof(testCaseexternalIssues));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="testCaseexternalIssues"></param>
        private void AfterCaseDetachExternalIssueDefaultImplementation(ICaseDetachExternalIssueApiResponse apiResponseLocalVar, string code, TestCaseExternalIssues testCaseexternalIssues)
        {
            bool suppressDefaultLog = false;
            AfterCaseDetachExternalIssue(ref suppressDefaultLog, apiResponseLocalVar, code, testCaseexternalIssues);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="testCaseexternalIssues"></param>
        partial void AfterCaseDetachExternalIssue(ref bool suppressDefaultLog, ICaseDetachExternalIssueApiResponse apiResponseLocalVar, string code, TestCaseExternalIssues testCaseexternalIssues);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="testCaseexternalIssues"></param>
        private void OnErrorCaseDetachExternalIssueDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, TestCaseExternalIssues testCaseexternalIssues)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCaseDetachExternalIssue(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, testCaseexternalIssues);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="testCaseexternalIssues"></param>
        partial void OnErrorCaseDetachExternalIssue(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, TestCaseExternalIssues testCaseexternalIssues);

        /// <summary>
        /// Detach the external issues from the test cases 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="testCaseexternalIssues"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICaseDetachExternalIssueApiResponse"/>&gt;</returns>
        public async Task<ICaseDetachExternalIssueApiResponse?> CaseDetachExternalIssueOrDefaultAsync(string code, TestCaseExternalIssues testCaseexternalIssues, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CaseDetachExternalIssueAsync(code, testCaseexternalIssues, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Detach the external issues from the test cases 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="testCaseexternalIssues"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICaseDetachExternalIssueApiResponse"/>&gt;</returns>
        public async Task<ICaseDetachExternalIssueApiResponse> CaseDetachExternalIssueAsync(string code, TestCaseExternalIssues testCaseexternalIssues, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCaseDetachExternalIssue(code, testCaseexternalIssues);

                FormatCaseDetachExternalIssue(ref code, testCaseexternalIssues);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/case/{code}/external-issue/detach"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/case/{code}/external-issue/detach");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));

                    httpRequestMessageLocalVar.Content = (testCaseexternalIssues as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(testCaseexternalIssues, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CaseDetachExternalIssueApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CaseDetachExternalIssueApiResponse>();

                        CaseDetachExternalIssueApiResponse apiResponseLocalVar = new CaseDetachExternalIssueApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/case/{code}/external-issue/detach", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCaseDetachExternalIssueDefaultImplementation(apiResponseLocalVar, code, testCaseexternalIssues);

                        Events.ExecuteOnCaseDetachExternalIssue(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCaseDetachExternalIssueDefaultImplementation(e, "/case/{code}/external-issue/detach", uriBuilderLocalVar.Path, code, testCaseexternalIssues);
                Events.ExecuteOnErrorCaseDetachExternalIssue(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CaseDetachExternalIssueApiResponse"/>
        /// </summary>
        public partial class CaseDetachExternalIssueApiResponse : Qase.ApiClient.V1.Client.ApiResponse, ICaseDetachExternalIssueApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CaseDetachExternalIssueApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CaseDetachExternalIssueApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CaseDetachExternalIssueApiResponse(ILogger<CaseDetachExternalIssueApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.BaseResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.BaseResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.BaseResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 402 PaymentRequired
            /// </summary>
            /// <returns></returns>
            public bool IsPaymentRequired => 402 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateCase(ref string code, TestCaseCreate testCaseCreate);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <param name="testCaseCreate"></param>
        /// <returns></returns>
        private void ValidateCreateCase(string code, TestCaseCreate testCaseCreate)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));

            if (testCaseCreate == null)
                throw new ArgumentNullException(nameof(testCaseCreate));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="testCaseCreate"></param>
        private void AfterCreateCaseDefaultImplementation(ICreateCaseApiResponse apiResponseLocalVar, string code, TestCaseCreate testCaseCreate)
        {
            bool suppressDefaultLog = false;
            AfterCreateCase(ref suppressDefaultLog, apiResponseLocalVar, code, testCaseCreate);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="testCaseCreate"></param>
        partial void AfterCreateCase(ref bool suppressDefaultLog, ICreateCaseApiResponse apiResponseLocalVar, string code, TestCaseCreate testCaseCreate);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="testCaseCreate"></param>
        private void OnErrorCreateCaseDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, TestCaseCreate testCaseCreate)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateCase(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, testCaseCreate);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="testCaseCreate"></param>
        partial void OnErrorCreateCase(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, TestCaseCreate testCaseCreate);

        /// <summary>
        /// Create a new test case This method allows to create a new test case in selected project. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="testCaseCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateCaseApiResponse"/>&gt;</returns>
        public async Task<ICreateCaseApiResponse?> CreateCaseOrDefaultAsync(string code, TestCaseCreate testCaseCreate, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateCaseAsync(code, testCaseCreate, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a new test case This method allows to create a new test case in selected project. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="testCaseCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateCaseApiResponse"/>&gt;</returns>
        public async Task<ICreateCaseApiResponse> CreateCaseAsync(string code, TestCaseCreate testCaseCreate, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateCase(code, testCaseCreate);

                FormatCreateCase(ref code, testCaseCreate);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/case/{code}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/case/{code}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));

                    httpRequestMessageLocalVar.Content = (testCaseCreate as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(testCaseCreate, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateCaseApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateCaseApiResponse>();

                        CreateCaseApiResponse apiResponseLocalVar = new CreateCaseApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/case/{code}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateCaseDefaultImplementation(apiResponseLocalVar, code, testCaseCreate);

                        Events.ExecuteOnCreateCase(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateCaseDefaultImplementation(e, "/case/{code}", uriBuilderLocalVar.Path, code, testCaseCreate);
                Events.ExecuteOnErrorCreateCase(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateCaseApiResponse"/>
        /// </summary>
        public partial class CreateCaseApiResponse : Qase.ApiClient.V1.Client.ApiResponse, ICreateCaseApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateCaseApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateCaseApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateCaseApiResponse(ILogger<CreateCaseApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.IdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.IdResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.IdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteCase(ref string code, ref int id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <returns></returns>
        private void ValidateDeleteCase(string code)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        private void AfterDeleteCaseDefaultImplementation(IDeleteCaseApiResponse apiResponseLocalVar, string code, int id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteCase(ref suppressDefaultLog, apiResponseLocalVar, code, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        partial void AfterDeleteCase(ref bool suppressDefaultLog, IDeleteCaseApiResponse apiResponseLocalVar, string code, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteCaseDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteCase(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteCase(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id);

        /// <summary>
        /// Delete test case This method completely deletes a test case from repository. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCaseApiResponse"/>&gt;</returns>
        public async Task<IDeleteCaseApiResponse?> DeleteCaseOrDefaultAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteCaseAsync(code, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete test case This method completely deletes a test case from repository. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCaseApiResponse"/>&gt;</returns>
        public async Task<IDeleteCaseApiResponse> DeleteCaseAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteCase(code);

                FormatDeleteCase(ref code, ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/case/{code}/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/case/{code}/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteCaseApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteCaseApiResponse>();

                        DeleteCaseApiResponse apiResponseLocalVar = new DeleteCaseApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/case/{code}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteCaseDefaultImplementation(apiResponseLocalVar, code, id);

                        Events.ExecuteOnDeleteCase(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteCaseDefaultImplementation(e, "/case/{code}/{id}", uriBuilderLocalVar.Path, code, id);
                Events.ExecuteOnErrorDeleteCase(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteCaseApiResponse"/>
        /// </summary>
        public partial class DeleteCaseApiResponse : Qase.ApiClient.V1.Client.ApiResponse, IDeleteCaseApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteCaseApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteCaseApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteCaseApiResponse(ILogger<DeleteCaseApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.IdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.IdResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.IdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetCase(ref string code, ref int id, ref Option<string> include);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <param name="include"></param>
        /// <returns></returns>
        private void ValidateGetCase(string code, Option<string> include)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));

            if (include.IsSet && include.Value == null)
                throw new ArgumentNullException(nameof(include));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="include"></param>
        private void AfterGetCaseDefaultImplementation(IGetCaseApiResponse apiResponseLocalVar, string code, int id, Option<string> include)
        {
            bool suppressDefaultLog = false;
            AfterGetCase(ref suppressDefaultLog, apiResponseLocalVar, code, id, include);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="include"></param>
        partial void AfterGetCase(ref bool suppressDefaultLog, IGetCaseApiResponse apiResponseLocalVar, string code, int id, Option<string> include);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="include"></param>
        private void OnErrorGetCaseDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id, Option<string> include)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetCase(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, id, include);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="include"></param>
        partial void OnErrorGetCase(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id, Option<string> include);

        /// <summary>
        /// Get a specific test case This method allows to retrieve a specific test case. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="include">A list of entities to include in response separated by comma. Possible values: external_issues.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCaseApiResponse"/>&gt;</returns>
        public async Task<IGetCaseApiResponse?> GetCaseOrDefaultAsync(string code, int id, Option<string> include = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCaseAsync(code, id, include, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a specific test case This method allows to retrieve a specific test case. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="include">A list of entities to include in response separated by comma. Possible values: external_issues.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCaseApiResponse"/>&gt;</returns>
        public async Task<IGetCaseApiResponse> GetCaseAsync(string code, int id, Option<string> include = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetCase(code, include);

                FormatGetCase(ref code, ref id, ref include);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/case/{code}/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/case/{code}/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (include.IsSet)
                        parseQueryStringLocalVar["include"] = ClientUtils.ParameterToString(include.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetCaseApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCaseApiResponse>();

                        GetCaseApiResponse apiResponseLocalVar = new GetCaseApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/case/{code}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetCaseDefaultImplementation(apiResponseLocalVar, code, id, include);

                        Events.ExecuteOnGetCase(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCaseDefaultImplementation(e, "/case/{code}/{id}", uriBuilderLocalVar.Path, code, id, include);
                Events.ExecuteOnErrorGetCase(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCaseApiResponse"/>
        /// </summary>
        public partial class GetCaseApiResponse : Qase.ApiClient.V1.Client.ApiResponse, IGetCaseApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCaseApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCaseApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCaseApiResponse(ILogger<GetCaseApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.TestCaseResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.TestCaseResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.TestCaseResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetCases(ref string code, ref Option<string> search, ref Option<int> milestoneId, ref Option<int> suiteId, ref Option<string> severity, ref Option<string> priority, ref Option<string> type, ref Option<string> behavior, ref Option<string> automation, ref Option<string> status, ref Option<string> externalIssuesType, Option<List<string>> externalIssuesIds, ref Option<string> include, ref Option<int> limit, ref Option<int> offset);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <param name="search"></param>
        /// <param name="severity"></param>
        /// <param name="priority"></param>
        /// <param name="type"></param>
        /// <param name="behavior"></param>
        /// <param name="automation"></param>
        /// <param name="status"></param>
        /// <param name="externalIssuesType"></param>
        /// <param name="externalIssuesIds"></param>
        /// <param name="include"></param>
        /// <returns></returns>
        private void ValidateGetCases(string code, Option<string> search, Option<string> severity, Option<string> priority, Option<string> type, Option<string> behavior, Option<string> automation, Option<string> status, Option<string> externalIssuesType, Option<List<string>> externalIssuesIds, Option<string> include)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));

            if (severity.IsSet && severity.Value == null)
                throw new ArgumentNullException(nameof(severity));

            if (priority.IsSet && priority.Value == null)
                throw new ArgumentNullException(nameof(priority));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type));

            if (behavior.IsSet && behavior.Value == null)
                throw new ArgumentNullException(nameof(behavior));

            if (automation.IsSet && automation.Value == null)
                throw new ArgumentNullException(nameof(automation));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status));

            if (externalIssuesType.IsSet && externalIssuesType.Value == null)
                throw new ArgumentNullException(nameof(externalIssuesType));

            if (externalIssuesIds.IsSet && externalIssuesIds.Value == null)
                throw new ArgumentNullException(nameof(externalIssuesIds));

            if (include.IsSet && include.Value == null)
                throw new ArgumentNullException(nameof(include));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="search"></param>
        /// <param name="milestoneId"></param>
        /// <param name="suiteId"></param>
        /// <param name="severity"></param>
        /// <param name="priority"></param>
        /// <param name="type"></param>
        /// <param name="behavior"></param>
        /// <param name="automation"></param>
        /// <param name="status"></param>
        /// <param name="externalIssuesType"></param>
        /// <param name="externalIssuesIds"></param>
        /// <param name="include"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void AfterGetCasesDefaultImplementation(IGetCasesApiResponse apiResponseLocalVar, string code, Option<string> search, Option<int> milestoneId, Option<int> suiteId, Option<string> severity, Option<string> priority, Option<string> type, Option<string> behavior, Option<string> automation, Option<string> status, Option<string> externalIssuesType, Option<List<string>> externalIssuesIds, Option<string> include, Option<int> limit, Option<int> offset)
        {
            bool suppressDefaultLog = false;
            AfterGetCases(ref suppressDefaultLog, apiResponseLocalVar, code, search, milestoneId, suiteId, severity, priority, type, behavior, automation, status, externalIssuesType, externalIssuesIds, include, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="search"></param>
        /// <param name="milestoneId"></param>
        /// <param name="suiteId"></param>
        /// <param name="severity"></param>
        /// <param name="priority"></param>
        /// <param name="type"></param>
        /// <param name="behavior"></param>
        /// <param name="automation"></param>
        /// <param name="status"></param>
        /// <param name="externalIssuesType"></param>
        /// <param name="externalIssuesIds"></param>
        /// <param name="include"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void AfterGetCases(ref bool suppressDefaultLog, IGetCasesApiResponse apiResponseLocalVar, string code, Option<string> search, Option<int> milestoneId, Option<int> suiteId, Option<string> severity, Option<string> priority, Option<string> type, Option<string> behavior, Option<string> automation, Option<string> status, Option<string> externalIssuesType, Option<List<string>> externalIssuesIds, Option<string> include, Option<int> limit, Option<int> offset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="search"></param>
        /// <param name="milestoneId"></param>
        /// <param name="suiteId"></param>
        /// <param name="severity"></param>
        /// <param name="priority"></param>
        /// <param name="type"></param>
        /// <param name="behavior"></param>
        /// <param name="automation"></param>
        /// <param name="status"></param>
        /// <param name="externalIssuesType"></param>
        /// <param name="externalIssuesIds"></param>
        /// <param name="include"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void OnErrorGetCasesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, Option<string> search, Option<int> milestoneId, Option<int> suiteId, Option<string> severity, Option<string> priority, Option<string> type, Option<string> behavior, Option<string> automation, Option<string> status, Option<string> externalIssuesType, Option<List<string>> externalIssuesIds, Option<string> include, Option<int> limit, Option<int> offset)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetCases(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, search, milestoneId, suiteId, severity, priority, type, behavior, automation, status, externalIssuesType, externalIssuesIds, include, limit, offset);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="search"></param>
        /// <param name="milestoneId"></param>
        /// <param name="suiteId"></param>
        /// <param name="severity"></param>
        /// <param name="priority"></param>
        /// <param name="type"></param>
        /// <param name="behavior"></param>
        /// <param name="automation"></param>
        /// <param name="status"></param>
        /// <param name="externalIssuesType"></param>
        /// <param name="externalIssuesIds"></param>
        /// <param name="include"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void OnErrorGetCases(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, Option<string> search, Option<int> milestoneId, Option<int> suiteId, Option<string> severity, Option<string> priority, Option<string> type, Option<string> behavior, Option<string> automation, Option<string> status, Option<string> externalIssuesType, Option<List<string>> externalIssuesIds, Option<string> include, Option<int> limit, Option<int> offset);

        /// <summary>
        /// Get all test cases This method allows to retrieve all test cases stored in selected project. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="search">Provide a string that will be used to search by name. (optional)</param>
        /// <param name="milestoneId">ID of milestone. (optional)</param>
        /// <param name="suiteId">ID of test suite. (optional)</param>
        /// <param name="severity">A list of severity values separated by comma. Possible values: undefined, blocker, critical, major, normal, minor, trivial  (optional)</param>
        /// <param name="priority">A list of priority values separated by comma. Possible values: undefined, high, medium, low  (optional)</param>
        /// <param name="type">A list of type values separated by comma. Possible values: other, functional smoke, regression, security, usability, performance, acceptance  (optional)</param>
        /// <param name="behavior">A list of behavior values separated by comma. Possible values: undefined, positive negative, destructive  (optional)</param>
        /// <param name="automation">A list of values separated by comma. Possible values: is-not-automated, automated to-be-automated  (optional)</param>
        /// <param name="status">A list of values separated by comma. Possible values: actual, draft deprecated  (optional)</param>
        /// <param name="externalIssuesType">An integration type.  (optional)</param>
        /// <param name="externalIssuesIds">A list of issue IDs. (optional)</param>
        /// <param name="include">A list of entities to include in response separated by comma. Possible values: external_issues.  (optional)</param>
        /// <param name="limit">A number of entities in result set. (optional, default to 10)</param>
        /// <param name="offset">How many entities should be skipped. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCasesApiResponse"/>&gt;</returns>
        public async Task<IGetCasesApiResponse?> GetCasesOrDefaultAsync(string code, Option<string> search = default, Option<int> milestoneId = default, Option<int> suiteId = default, Option<string> severity = default, Option<string> priority = default, Option<string> type = default, Option<string> behavior = default, Option<string> automation = default, Option<string> status = default, Option<string> externalIssuesType = default, Option<List<string>> externalIssuesIds = default, Option<string> include = default, Option<int> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCasesAsync(code, search, milestoneId, suiteId, severity, priority, type, behavior, automation, status, externalIssuesType, externalIssuesIds, include, limit, offset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all test cases This method allows to retrieve all test cases stored in selected project. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="search">Provide a string that will be used to search by name. (optional)</param>
        /// <param name="milestoneId">ID of milestone. (optional)</param>
        /// <param name="suiteId">ID of test suite. (optional)</param>
        /// <param name="severity">A list of severity values separated by comma. Possible values: undefined, blocker, critical, major, normal, minor, trivial  (optional)</param>
        /// <param name="priority">A list of priority values separated by comma. Possible values: undefined, high, medium, low  (optional)</param>
        /// <param name="type">A list of type values separated by comma. Possible values: other, functional smoke, regression, security, usability, performance, acceptance  (optional)</param>
        /// <param name="behavior">A list of behavior values separated by comma. Possible values: undefined, positive negative, destructive  (optional)</param>
        /// <param name="automation">A list of values separated by comma. Possible values: is-not-automated, automated to-be-automated  (optional)</param>
        /// <param name="status">A list of values separated by comma. Possible values: actual, draft deprecated  (optional)</param>
        /// <param name="externalIssuesType">An integration type.  (optional)</param>
        /// <param name="externalIssuesIds">A list of issue IDs. (optional)</param>
        /// <param name="include">A list of entities to include in response separated by comma. Possible values: external_issues.  (optional)</param>
        /// <param name="limit">A number of entities in result set. (optional, default to 10)</param>
        /// <param name="offset">How many entities should be skipped. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCasesApiResponse"/>&gt;</returns>
        public async Task<IGetCasesApiResponse> GetCasesAsync(string code, Option<string> search = default, Option<int> milestoneId = default, Option<int> suiteId = default, Option<string> severity = default, Option<string> priority = default, Option<string> type = default, Option<string> behavior = default, Option<string> automation = default, Option<string> status = default, Option<string> externalIssuesType = default, Option<List<string>> externalIssuesIds = default, Option<string> include = default, Option<int> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetCases(code, search, severity, priority, type, behavior, automation, status, externalIssuesType, externalIssuesIds, include);

                FormatGetCases(ref code, ref search, ref milestoneId, ref suiteId, ref severity, ref priority, ref type, ref behavior, ref automation, ref status, ref externalIssuesType, externalIssuesIds, ref include, ref limit, ref offset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/case/{code}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/case/{code}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    if (milestoneId.IsSet)
                        parseQueryStringLocalVar["milestone_id"] = ClientUtils.ParameterToString(milestoneId.Value);

                    if (suiteId.IsSet)
                        parseQueryStringLocalVar["suite_id"] = ClientUtils.ParameterToString(suiteId.Value);

                    if (severity.IsSet)
                        parseQueryStringLocalVar["severity"] = ClientUtils.ParameterToString(severity.Value);

                    if (priority.IsSet)
                        parseQueryStringLocalVar["priority"] = ClientUtils.ParameterToString(priority.Value);

                    if (type.IsSet)
                        parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type.Value);

                    if (behavior.IsSet)
                        parseQueryStringLocalVar["behavior"] = ClientUtils.ParameterToString(behavior.Value);

                    if (automation.IsSet)
                        parseQueryStringLocalVar["automation"] = ClientUtils.ParameterToString(automation.Value);

                    if (status.IsSet)
                        parseQueryStringLocalVar["status"] = ClientUtils.ParameterToString(status.Value);

                    if (externalIssuesType.IsSet)
                        parseQueryStringLocalVar["external_issues[type]"] = ClientUtils.ParameterToString(externalIssuesType.Value);

                    if (externalIssuesIds.IsSet)
                        parseQueryStringLocalVar["external_issues[ids][]"] = ClientUtils.ParameterToString(externalIssuesIds.Value);

                    if (include.IsSet)
                        parseQueryStringLocalVar["include"] = ClientUtils.ParameterToString(include.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetCasesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCasesApiResponse>();

                        GetCasesApiResponse apiResponseLocalVar = new GetCasesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/case/{code}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetCasesDefaultImplementation(apiResponseLocalVar, code, search, milestoneId, suiteId, severity, priority, type, behavior, automation, status, externalIssuesType, externalIssuesIds, include, limit, offset);

                        Events.ExecuteOnGetCases(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCasesDefaultImplementation(e, "/case/{code}", uriBuilderLocalVar.Path, code, search, milestoneId, suiteId, severity, priority, type, behavior, automation, status, externalIssuesType, externalIssuesIds, include, limit, offset);
                Events.ExecuteOnErrorGetCases(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCasesApiResponse"/>
        /// </summary>
        public partial class GetCasesApiResponse : Qase.ApiClient.V1.Client.ApiResponse, IGetCasesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCasesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCasesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCasesApiResponse(ILogger<GetCasesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.TestCaseListResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.TestCaseListResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.TestCaseListResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 402 PaymentRequired
            /// </summary>
            /// <returns></returns>
            public bool IsPaymentRequired => 402 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateCase(ref string code, ref int id, TestCaseUpdate testCaseUpdate);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <param name="testCaseUpdate"></param>
        /// <returns></returns>
        private void ValidateUpdateCase(string code, TestCaseUpdate testCaseUpdate)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));

            if (testCaseUpdate == null)
                throw new ArgumentNullException(nameof(testCaseUpdate));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="testCaseUpdate"></param>
        private void AfterUpdateCaseDefaultImplementation(IUpdateCaseApiResponse apiResponseLocalVar, string code, int id, TestCaseUpdate testCaseUpdate)
        {
            bool suppressDefaultLog = false;
            AfterUpdateCase(ref suppressDefaultLog, apiResponseLocalVar, code, id, testCaseUpdate);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="testCaseUpdate"></param>
        partial void AfterUpdateCase(ref bool suppressDefaultLog, IUpdateCaseApiResponse apiResponseLocalVar, string code, int id, TestCaseUpdate testCaseUpdate);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="testCaseUpdate"></param>
        private void OnErrorUpdateCaseDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id, TestCaseUpdate testCaseUpdate)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateCase(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, id, testCaseUpdate);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="testCaseUpdate"></param>
        partial void OnErrorUpdateCase(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id, TestCaseUpdate testCaseUpdate);

        /// <summary>
        /// Update test case This method updates a test case. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="testCaseUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateCaseApiResponse"/>&gt;</returns>
        public async Task<IUpdateCaseApiResponse?> UpdateCaseOrDefaultAsync(string code, int id, TestCaseUpdate testCaseUpdate, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateCaseAsync(code, id, testCaseUpdate, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update test case This method updates a test case. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="testCaseUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateCaseApiResponse"/>&gt;</returns>
        public async Task<IUpdateCaseApiResponse> UpdateCaseAsync(string code, int id, TestCaseUpdate testCaseUpdate, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateCase(code, testCaseUpdate);

                FormatUpdateCase(ref code, ref id, testCaseUpdate);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/case/{code}/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/case/{code}/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (testCaseUpdate as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(testCaseUpdate, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PATCH");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UpdateCaseApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateCaseApiResponse>();

                        UpdateCaseApiResponse apiResponseLocalVar = new UpdateCaseApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/case/{code}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateCaseDefaultImplementation(apiResponseLocalVar, code, id, testCaseUpdate);

                        Events.ExecuteOnUpdateCase(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateCaseDefaultImplementation(e, "/case/{code}/{id}", uriBuilderLocalVar.Path, code, id, testCaseUpdate);
                Events.ExecuteOnErrorUpdateCase(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateCaseApiResponse"/>
        /// </summary>
        public partial class UpdateCaseApiResponse : Qase.ApiClient.V1.Client.ApiResponse, IUpdateCaseApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateCaseApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateCaseApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateCaseApiResponse(ILogger<UpdateCaseApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.IdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.IdResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.IdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
