// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Qase.ApiClient.V1.Client;
using Qase.ApiClient.V1.Model;

namespace Qase.ApiClient.V1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IDefectsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        DefectsApiEvents Events { get; }

        /// <summary>
        /// Create a new defect
        /// </summary>
        /// <remarks>
        /// This method allows to create a defect in selected project. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="defectCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateDefectApiResponse"/>&gt;</returns>
        Task<ICreateDefectApiResponse> CreateDefectAsync(string code, DefectCreate defectCreate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new defect
        /// </summary>
        /// <remarks>
        /// This method allows to create a defect in selected project. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="defectCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateDefectApiResponse"/>?&gt;</returns>
        Task<ICreateDefectApiResponse?> CreateDefectOrDefaultAsync(string code, DefectCreate defectCreate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete defect
        /// </summary>
        /// <remarks>
        /// This method completely deletes a defect from repository. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteDefectApiResponse"/>&gt;</returns>
        Task<IDeleteDefectApiResponse> DeleteDefectAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete defect
        /// </summary>
        /// <remarks>
        /// This method completely deletes a defect from repository. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteDefectApiResponse"/>?&gt;</returns>
        Task<IDeleteDefectApiResponse?> DeleteDefectOrDefaultAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a specific defect
        /// </summary>
        /// <remarks>
        /// This method allows to retrieve a specific defect. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDefectApiResponse"/>&gt;</returns>
        Task<IGetDefectApiResponse> GetDefectAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a specific defect
        /// </summary>
        /// <remarks>
        /// This method allows to retrieve a specific defect. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDefectApiResponse"/>?&gt;</returns>
        Task<IGetDefectApiResponse?> GetDefectOrDefaultAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all defects
        /// </summary>
        /// <remarks>
        /// This method allows to retrieve all defects stored in selected project. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="status"> (optional)</param>
        /// <param name="limit">A number of entities in result set. (optional, default to 10)</param>
        /// <param name="offset">How many entities should be skipped. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDefectsApiResponse"/>&gt;</returns>
        Task<IGetDefectsApiResponse> GetDefectsAsync(string code, Option<string> status = default, Option<int> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all defects
        /// </summary>
        /// <remarks>
        /// This method allows to retrieve all defects stored in selected project. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="status"> (optional)</param>
        /// <param name="limit">A number of entities in result set. (optional, default to 10)</param>
        /// <param name="offset">How many entities should be skipped. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDefectsApiResponse"/>?&gt;</returns>
        Task<IGetDefectsApiResponse?> GetDefectsOrDefaultAsync(string code, Option<string> status = default, Option<int> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Resolve a specific defect
        /// </summary>
        /// <remarks>
        /// This method allows to resolve a specific defect. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResolveDefectApiResponse"/>&gt;</returns>
        Task<IResolveDefectApiResponse> ResolveDefectAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Resolve a specific defect
        /// </summary>
        /// <remarks>
        /// This method allows to resolve a specific defect. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResolveDefectApiResponse"/>?&gt;</returns>
        Task<IResolveDefectApiResponse?> ResolveDefectOrDefaultAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update defect
        /// </summary>
        /// <remarks>
        /// This method updates a defect. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="defectUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateDefectApiResponse"/>&gt;</returns>
        Task<IUpdateDefectApiResponse> UpdateDefectAsync(string code, int id, DefectUpdate defectUpdate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update defect
        /// </summary>
        /// <remarks>
        /// This method updates a defect. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="defectUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateDefectApiResponse"/>?&gt;</returns>
        Task<IUpdateDefectApiResponse?> UpdateDefectOrDefaultAsync(string code, int id, DefectUpdate defectUpdate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a specific defect status
        /// </summary>
        /// <remarks>
        /// This method allows to update a specific defect status. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="defectStatus"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateDefectStatusApiResponse"/>&gt;</returns>
        Task<IUpdateDefectStatusApiResponse> UpdateDefectStatusAsync(string code, int id, DefectStatus defectStatus, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a specific defect status
        /// </summary>
        /// <remarks>
        /// This method allows to update a specific defect status. 
        /// </remarks>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="defectStatus"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateDefectStatusApiResponse"/>?&gt;</returns>
        Task<IUpdateDefectStatusApiResponse?> UpdateDefectStatusOrDefaultAsync(string code, int id, DefectStatus defectStatus, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateDefectApiResponse"/>
    /// </summary>
    public interface ICreateDefectApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.IdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteDefectApiResponse"/>
    /// </summary>
    public interface IDeleteDefectApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.IdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IGetDefectApiResponse"/>
    /// </summary>
    public interface IGetDefectApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.DefectResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IGetDefectsApiResponse"/>
    /// </summary>
    public interface IGetDefectsApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.DefectListResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IResolveDefectApiResponse"/>
    /// </summary>
    public interface IResolveDefectApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.IdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateDefectApiResponse"/>
    /// </summary>
    public interface IUpdateDefectApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.IdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateDefectStatusApiResponse"/>
    /// </summary>
    public interface IUpdateDefectStatusApiResponse : Qase.ApiClient.V1.Client.IApiResponse, IOk<Qase.ApiClient.V1.Model.BaseResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class DefectsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateDefect;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateDefect;

        internal void ExecuteOnCreateDefect(DefectsApi.CreateDefectApiResponse apiResponse)
        {
            OnCreateDefect?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateDefect(Exception exception)
        {
            OnErrorCreateDefect?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteDefect;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteDefect;

        internal void ExecuteOnDeleteDefect(DefectsApi.DeleteDefectApiResponse apiResponse)
        {
            OnDeleteDefect?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteDefect(Exception exception)
        {
            OnErrorDeleteDefect?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetDefect;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetDefect;

        internal void ExecuteOnGetDefect(DefectsApi.GetDefectApiResponse apiResponse)
        {
            OnGetDefect?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetDefect(Exception exception)
        {
            OnErrorGetDefect?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetDefects;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetDefects;

        internal void ExecuteOnGetDefects(DefectsApi.GetDefectsApiResponse apiResponse)
        {
            OnGetDefects?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetDefects(Exception exception)
        {
            OnErrorGetDefects?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnResolveDefect;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorResolveDefect;

        internal void ExecuteOnResolveDefect(DefectsApi.ResolveDefectApiResponse apiResponse)
        {
            OnResolveDefect?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorResolveDefect(Exception exception)
        {
            OnErrorResolveDefect?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateDefect;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateDefect;

        internal void ExecuteOnUpdateDefect(DefectsApi.UpdateDefectApiResponse apiResponse)
        {
            OnUpdateDefect?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateDefect(Exception exception)
        {
            OnErrorUpdateDefect?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateDefectStatus;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateDefectStatus;

        internal void ExecuteOnUpdateDefectStatus(DefectsApi.UpdateDefectStatusApiResponse apiResponse)
        {
            OnUpdateDefectStatus?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateDefectStatus(Exception exception)
        {
            OnErrorUpdateDefectStatus?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class DefectsApi : IDefectsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<DefectsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public DefectsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefectsApi(ILogger<DefectsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, DefectsApiEvents defectsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<DefectsApi>();
            HttpClient = httpClient;
            Events = defectsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateDefect(ref string code, DefectCreate defectCreate);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <param name="defectCreate"></param>
        /// <returns></returns>
        private void ValidateCreateDefect(string code, DefectCreate defectCreate)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));

            if (defectCreate == null)
                throw new ArgumentNullException(nameof(defectCreate));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="defectCreate"></param>
        private void AfterCreateDefectDefaultImplementation(ICreateDefectApiResponse apiResponseLocalVar, string code, DefectCreate defectCreate)
        {
            bool suppressDefaultLog = false;
            AfterCreateDefect(ref suppressDefaultLog, apiResponseLocalVar, code, defectCreate);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="defectCreate"></param>
        partial void AfterCreateDefect(ref bool suppressDefaultLog, ICreateDefectApiResponse apiResponseLocalVar, string code, DefectCreate defectCreate);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="defectCreate"></param>
        private void OnErrorCreateDefectDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, DefectCreate defectCreate)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateDefect(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, defectCreate);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="defectCreate"></param>
        partial void OnErrorCreateDefect(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, DefectCreate defectCreate);

        /// <summary>
        /// Create a new defect This method allows to create a defect in selected project. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="defectCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateDefectApiResponse"/>&gt;</returns>
        public async Task<ICreateDefectApiResponse?> CreateDefectOrDefaultAsync(string code, DefectCreate defectCreate, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateDefectAsync(code, defectCreate, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a new defect This method allows to create a defect in selected project. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="defectCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateDefectApiResponse"/>&gt;</returns>
        public async Task<ICreateDefectApiResponse> CreateDefectAsync(string code, DefectCreate defectCreate, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateDefect(code, defectCreate);

                FormatCreateDefect(ref code, defectCreate);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/defect/{code}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/defect/{code}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));

                    httpRequestMessageLocalVar.Content = (defectCreate as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(defectCreate, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateDefectApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateDefectApiResponse>();

                        CreateDefectApiResponse apiResponseLocalVar = new CreateDefectApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/defect/{code}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateDefectDefaultImplementation(apiResponseLocalVar, code, defectCreate);

                        Events.ExecuteOnCreateDefect(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateDefectDefaultImplementation(e, "/defect/{code}", uriBuilderLocalVar.Path, code, defectCreate);
                Events.ExecuteOnErrorCreateDefect(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateDefectApiResponse"/>
        /// </summary>
        public partial class CreateDefectApiResponse : Qase.ApiClient.V1.Client.ApiResponse, ICreateDefectApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateDefectApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateDefectApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateDefectApiResponse(ILogger<CreateDefectApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.IdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.IdResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.IdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteDefect(ref string code, ref int id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <returns></returns>
        private void ValidateDeleteDefect(string code)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        private void AfterDeleteDefectDefaultImplementation(IDeleteDefectApiResponse apiResponseLocalVar, string code, int id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteDefect(ref suppressDefaultLog, apiResponseLocalVar, code, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        partial void AfterDeleteDefect(ref bool suppressDefaultLog, IDeleteDefectApiResponse apiResponseLocalVar, string code, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteDefectDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteDefect(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteDefect(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id);

        /// <summary>
        /// Delete defect This method completely deletes a defect from repository. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteDefectApiResponse"/>&gt;</returns>
        public async Task<IDeleteDefectApiResponse?> DeleteDefectOrDefaultAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteDefectAsync(code, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete defect This method completely deletes a defect from repository. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteDefectApiResponse"/>&gt;</returns>
        public async Task<IDeleteDefectApiResponse> DeleteDefectAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteDefect(code);

                FormatDeleteDefect(ref code, ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/defect/{code}/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/defect/{code}/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteDefectApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteDefectApiResponse>();

                        DeleteDefectApiResponse apiResponseLocalVar = new DeleteDefectApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/defect/{code}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteDefectDefaultImplementation(apiResponseLocalVar, code, id);

                        Events.ExecuteOnDeleteDefect(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteDefectDefaultImplementation(e, "/defect/{code}/{id}", uriBuilderLocalVar.Path, code, id);
                Events.ExecuteOnErrorDeleteDefect(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteDefectApiResponse"/>
        /// </summary>
        public partial class DeleteDefectApiResponse : Qase.ApiClient.V1.Client.ApiResponse, IDeleteDefectApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteDefectApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteDefectApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteDefectApiResponse(ILogger<DeleteDefectApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.IdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.IdResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.IdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetDefect(ref string code, ref int id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <returns></returns>
        private void ValidateGetDefect(string code)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        private void AfterGetDefectDefaultImplementation(IGetDefectApiResponse apiResponseLocalVar, string code, int id)
        {
            bool suppressDefaultLog = false;
            AfterGetDefect(ref suppressDefaultLog, apiResponseLocalVar, code, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        partial void AfterGetDefect(ref bool suppressDefaultLog, IGetDefectApiResponse apiResponseLocalVar, string code, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        private void OnErrorGetDefectDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetDefect(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        partial void OnErrorGetDefect(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id);

        /// <summary>
        /// Get a specific defect This method allows to retrieve a specific defect. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDefectApiResponse"/>&gt;</returns>
        public async Task<IGetDefectApiResponse?> GetDefectOrDefaultAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDefectAsync(code, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a specific defect This method allows to retrieve a specific defect. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDefectApiResponse"/>&gt;</returns>
        public async Task<IGetDefectApiResponse> GetDefectAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetDefect(code);

                FormatGetDefect(ref code, ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/defect/{code}/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/defect/{code}/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetDefectApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetDefectApiResponse>();

                        GetDefectApiResponse apiResponseLocalVar = new GetDefectApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/defect/{code}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDefectDefaultImplementation(apiResponseLocalVar, code, id);

                        Events.ExecuteOnGetDefect(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDefectDefaultImplementation(e, "/defect/{code}/{id}", uriBuilderLocalVar.Path, code, id);
                Events.ExecuteOnErrorGetDefect(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetDefectApiResponse"/>
        /// </summary>
        public partial class GetDefectApiResponse : Qase.ApiClient.V1.Client.ApiResponse, IGetDefectApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetDefectApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetDefectApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetDefectApiResponse(ILogger<GetDefectApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.DefectResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.DefectResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.DefectResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetDefects(ref string code, ref Option<string> status, ref Option<int> limit, ref Option<int> offset);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <param name="status"></param>
        /// <returns></returns>
        private void ValidateGetDefects(string code, Option<string> status)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="status"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void AfterGetDefectsDefaultImplementation(IGetDefectsApiResponse apiResponseLocalVar, string code, Option<string> status, Option<int> limit, Option<int> offset)
        {
            bool suppressDefaultLog = false;
            AfterGetDefects(ref suppressDefaultLog, apiResponseLocalVar, code, status, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="status"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void AfterGetDefects(ref bool suppressDefaultLog, IGetDefectsApiResponse apiResponseLocalVar, string code, Option<string> status, Option<int> limit, Option<int> offset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="status"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void OnErrorGetDefectsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, Option<string> status, Option<int> limit, Option<int> offset)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetDefects(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, status, limit, offset);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="status"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void OnErrorGetDefects(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, Option<string> status, Option<int> limit, Option<int> offset);

        /// <summary>
        /// Get all defects This method allows to retrieve all defects stored in selected project. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="status"> (optional)</param>
        /// <param name="limit">A number of entities in result set. (optional, default to 10)</param>
        /// <param name="offset">How many entities should be skipped. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDefectsApiResponse"/>&gt;</returns>
        public async Task<IGetDefectsApiResponse?> GetDefectsOrDefaultAsync(string code, Option<string> status = default, Option<int> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDefectsAsync(code, status, limit, offset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all defects This method allows to retrieve all defects stored in selected project. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="status"> (optional)</param>
        /// <param name="limit">A number of entities in result set. (optional, default to 10)</param>
        /// <param name="offset">How many entities should be skipped. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDefectsApiResponse"/>&gt;</returns>
        public async Task<IGetDefectsApiResponse> GetDefectsAsync(string code, Option<string> status = default, Option<int> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetDefects(code, status);

                FormatGetDefects(ref code, ref status, ref limit, ref offset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/defect/{code}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/defect/{code}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (status.IsSet)
                        parseQueryStringLocalVar["status"] = ClientUtils.ParameterToString(status.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetDefectsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetDefectsApiResponse>();

                        GetDefectsApiResponse apiResponseLocalVar = new GetDefectsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/defect/{code}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDefectsDefaultImplementation(apiResponseLocalVar, code, status, limit, offset);

                        Events.ExecuteOnGetDefects(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDefectsDefaultImplementation(e, "/defect/{code}", uriBuilderLocalVar.Path, code, status, limit, offset);
                Events.ExecuteOnErrorGetDefects(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetDefectsApiResponse"/>
        /// </summary>
        public partial class GetDefectsApiResponse : Qase.ApiClient.V1.Client.ApiResponse, IGetDefectsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetDefectsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetDefectsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetDefectsApiResponse(ILogger<GetDefectsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.DefectListResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.DefectListResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.DefectListResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatResolveDefect(ref string code, ref int id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <returns></returns>
        private void ValidateResolveDefect(string code)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        private void AfterResolveDefectDefaultImplementation(IResolveDefectApiResponse apiResponseLocalVar, string code, int id)
        {
            bool suppressDefaultLog = false;
            AfterResolveDefect(ref suppressDefaultLog, apiResponseLocalVar, code, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        partial void AfterResolveDefect(ref bool suppressDefaultLog, IResolveDefectApiResponse apiResponseLocalVar, string code, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        private void OnErrorResolveDefectDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorResolveDefect(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        partial void OnErrorResolveDefect(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id);

        /// <summary>
        /// Resolve a specific defect This method allows to resolve a specific defect. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResolveDefectApiResponse"/>&gt;</returns>
        public async Task<IResolveDefectApiResponse?> ResolveDefectOrDefaultAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ResolveDefectAsync(code, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Resolve a specific defect This method allows to resolve a specific defect. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResolveDefectApiResponse"/>&gt;</returns>
        public async Task<IResolveDefectApiResponse> ResolveDefectAsync(string code, int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateResolveDefect(code);

                FormatResolveDefect(ref code, ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/defect/{code}/resolve/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/defect/{code}/resolve/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PATCH");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<ResolveDefectApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ResolveDefectApiResponse>();

                        ResolveDefectApiResponse apiResponseLocalVar = new ResolveDefectApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/defect/{code}/resolve/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterResolveDefectDefaultImplementation(apiResponseLocalVar, code, id);

                        Events.ExecuteOnResolveDefect(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorResolveDefectDefaultImplementation(e, "/defect/{code}/resolve/{id}", uriBuilderLocalVar.Path, code, id);
                Events.ExecuteOnErrorResolveDefect(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ResolveDefectApiResponse"/>
        /// </summary>
        public partial class ResolveDefectApiResponse : Qase.ApiClient.V1.Client.ApiResponse, IResolveDefectApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ResolveDefectApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ResolveDefectApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ResolveDefectApiResponse(ILogger<ResolveDefectApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.IdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.IdResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.IdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateDefect(ref string code, ref int id, DefectUpdate defectUpdate);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <param name="defectUpdate"></param>
        /// <returns></returns>
        private void ValidateUpdateDefect(string code, DefectUpdate defectUpdate)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));

            if (defectUpdate == null)
                throw new ArgumentNullException(nameof(defectUpdate));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="defectUpdate"></param>
        private void AfterUpdateDefectDefaultImplementation(IUpdateDefectApiResponse apiResponseLocalVar, string code, int id, DefectUpdate defectUpdate)
        {
            bool suppressDefaultLog = false;
            AfterUpdateDefect(ref suppressDefaultLog, apiResponseLocalVar, code, id, defectUpdate);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="defectUpdate"></param>
        partial void AfterUpdateDefect(ref bool suppressDefaultLog, IUpdateDefectApiResponse apiResponseLocalVar, string code, int id, DefectUpdate defectUpdate);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="defectUpdate"></param>
        private void OnErrorUpdateDefectDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id, DefectUpdate defectUpdate)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateDefect(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, id, defectUpdate);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="defectUpdate"></param>
        partial void OnErrorUpdateDefect(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id, DefectUpdate defectUpdate);

        /// <summary>
        /// Update defect This method updates a defect. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="defectUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateDefectApiResponse"/>&gt;</returns>
        public async Task<IUpdateDefectApiResponse?> UpdateDefectOrDefaultAsync(string code, int id, DefectUpdate defectUpdate, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateDefectAsync(code, id, defectUpdate, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update defect This method updates a defect. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="defectUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateDefectApiResponse"/>&gt;</returns>
        public async Task<IUpdateDefectApiResponse> UpdateDefectAsync(string code, int id, DefectUpdate defectUpdate, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateDefect(code, defectUpdate);

                FormatUpdateDefect(ref code, ref id, defectUpdate);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/defect/{code}/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/defect/{code}/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (defectUpdate as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(defectUpdate, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PATCH");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UpdateDefectApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateDefectApiResponse>();

                        UpdateDefectApiResponse apiResponseLocalVar = new UpdateDefectApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/defect/{code}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateDefectDefaultImplementation(apiResponseLocalVar, code, id, defectUpdate);

                        Events.ExecuteOnUpdateDefect(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateDefectDefaultImplementation(e, "/defect/{code}/{id}", uriBuilderLocalVar.Path, code, id, defectUpdate);
                Events.ExecuteOnErrorUpdateDefect(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateDefectApiResponse"/>
        /// </summary>
        public partial class UpdateDefectApiResponse : Qase.ApiClient.V1.Client.ApiResponse, IUpdateDefectApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateDefectApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateDefectApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateDefectApiResponse(ILogger<UpdateDefectApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.IdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.IdResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.IdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateDefectStatus(ref string code, ref int id, DefectStatus defectStatus);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <param name="defectStatus"></param>
        /// <returns></returns>
        private void ValidateUpdateDefectStatus(string code, DefectStatus defectStatus)
        {
            if (code == null)
                throw new ArgumentNullException(nameof(code));

            if (defectStatus == null)
                throw new ArgumentNullException(nameof(defectStatus));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="defectStatus"></param>
        private void AfterUpdateDefectStatusDefaultImplementation(IUpdateDefectStatusApiResponse apiResponseLocalVar, string code, int id, DefectStatus defectStatus)
        {
            bool suppressDefaultLog = false;
            AfterUpdateDefectStatus(ref suppressDefaultLog, apiResponseLocalVar, code, id, defectStatus);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="defectStatus"></param>
        partial void AfterUpdateDefectStatus(ref bool suppressDefaultLog, IUpdateDefectStatusApiResponse apiResponseLocalVar, string code, int id, DefectStatus defectStatus);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="defectStatus"></param>
        private void OnErrorUpdateDefectStatusDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id, DefectStatus defectStatus)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateDefectStatus(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, id, defectStatus);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="id"></param>
        /// <param name="defectStatus"></param>
        partial void OnErrorUpdateDefectStatus(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string code, int id, DefectStatus defectStatus);

        /// <summary>
        /// Update a specific defect status This method allows to update a specific defect status. 
        /// </summary>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="defectStatus"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateDefectStatusApiResponse"/>&gt;</returns>
        public async Task<IUpdateDefectStatusApiResponse?> UpdateDefectStatusOrDefaultAsync(string code, int id, DefectStatus defectStatus, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateDefectStatusAsync(code, id, defectStatus, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update a specific defect status This method allows to update a specific defect status. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of project, where to search entities.</param>
        /// <param name="id">Identifier.</param>
        /// <param name="defectStatus"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateDefectStatusApiResponse"/>&gt;</returns>
        public async Task<IUpdateDefectStatusApiResponse> UpdateDefectStatusAsync(string code, int id, DefectStatus defectStatus, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateDefectStatus(code, defectStatus);

                FormatUpdateDefectStatus(ref code, ref id, defectStatus);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/defect/{code}/status/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/defect/{code}/status/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcode%7D", Uri.EscapeDataString(code.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (defectStatus as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(defectStatus, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PATCH");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UpdateDefectStatusApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateDefectStatusApiResponse>();

                        UpdateDefectStatusApiResponse apiResponseLocalVar = new UpdateDefectStatusApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/defect/{code}/status/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateDefectStatusDefaultImplementation(apiResponseLocalVar, code, id, defectStatus);

                        Events.ExecuteOnUpdateDefectStatus(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateDefectStatusDefaultImplementation(e, "/defect/{code}/status/{id}", uriBuilderLocalVar.Path, code, id, defectStatus);
                Events.ExecuteOnErrorUpdateDefectStatus(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateDefectStatusApiResponse"/>
        /// </summary>
        public partial class UpdateDefectStatusApiResponse : Qase.ApiClient.V1.Client.ApiResponse, IUpdateDefectStatusApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateDefectStatusApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateDefectStatusApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateDefectStatusApiResponse(ILogger<UpdateDefectStatusApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Qase.ApiClient.V1.Model.BaseResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Qase.ApiClient.V1.Model.BaseResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Qase.ApiClient.V1.Model.BaseResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
