// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// CustomField
    /// </summary>
    public partial class CustomField : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomField" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="title">title</param>
        /// <param name="entity">entity</param>
        /// <param name="type">type</param>
        /// <param name="placeholder">placeholder</param>
        /// <param name="defaultValue">defaultValue</param>
        /// <param name="value">value</param>
        /// <param name="isRequired">isRequired</param>
        /// <param name="isVisible">isVisible</param>
        /// <param name="isFilterable">isFilterable</param>
        /// <param name="isEnabledForAllProjects">isEnabledForAllProjects</param>
        /// <param name="created">Deprecated, use the &#x60;created_at&#x60; property instead.</param>
        /// <param name="updated">Deprecated, use the &#x60;updated_at&#x60; property instead.</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="projectsCodes">projectsCodes</param>
        [JsonConstructor]
        public CustomField(Option<long?> id = default, Option<string?> title = default, Option<string?> entity = default, Option<string?> type = default, Option<string?> placeholder = default, Option<string?> defaultValue = default, Option<string?> value = default, Option<bool?> isRequired = default, Option<bool?> isVisible = default, Option<bool?> isFilterable = default, Option<bool?> isEnabledForAllProjects = default, Option<string?> created = default, Option<string?> updated = default, Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default, Option<List<string>?> projectsCodes = default)
        {
            IdOption = id;
            TitleOption = title;
            EntityOption = entity;
            TypeOption = type;
            PlaceholderOption = placeholder;
            DefaultValueOption = defaultValue;
            ValueOption = value;
            IsRequiredOption = isRequired;
            IsVisibleOption = isVisible;
            IsFilterableOption = isFilterable;
            IsEnabledForAllProjectsOption = isEnabledForAllProjects;
            CreatedOption = created;
            UpdatedOption = updated;
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            ProjectsCodesOption = projectsCodes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public long? Id { get { return this.IdOption; } set { this.IdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Entity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EntityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [JsonPropertyName("entity")]
        public string? Entity { get { return this.EntityOption; } set { this.EntityOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Placeholder
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PlaceholderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Placeholder
        /// </summary>
        [JsonPropertyName("placeholder")]
        public string? Placeholder { get { return this.PlaceholderOption; } set { this.PlaceholderOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of DefaultValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DefaultValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [JsonPropertyName("default_value")]
        public string? DefaultValue { get { return this.DefaultValueOption; } set { this.DefaultValueOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public string? Value { get { return this.ValueOption; } set { this.ValueOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of IsRequired
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsRequiredOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsRequired
        /// </summary>
        [JsonPropertyName("is_required")]
        public bool? IsRequired { get { return this.IsRequiredOption; } set { this.IsRequiredOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IsVisible
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsVisibleOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsVisible
        /// </summary>
        [JsonPropertyName("is_visible")]
        public bool? IsVisible { get { return this.IsVisibleOption; } set { this.IsVisibleOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IsFilterable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsFilterableOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsFilterable
        /// </summary>
        [JsonPropertyName("is_filterable")]
        public bool? IsFilterable { get { return this.IsFilterableOption; } set { this.IsFilterableOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IsEnabledForAllProjects
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsEnabledForAllProjectsOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsEnabledForAllProjects
        /// </summary>
        [JsonPropertyName("is_enabled_for_all_projects")]
        public bool? IsEnabledForAllProjects { get { return this.IsEnabledForAllProjectsOption; } set { this.IsEnabledForAllProjectsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Created
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedOption { get; private set; }

        /// <summary>
        /// Deprecated, use the &#x60;created_at&#x60; property instead.
        /// </summary>
        /// <value>Deprecated, use the &#x60;created_at&#x60; property instead.</value>
        /* <example>2021-12-30 19:23:59</example> */
        [JsonPropertyName("created")]
        [Obsolete]
        public string? Created { get { return this.CreatedOption; } set { this.CreatedOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Updated
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedOption { get; private set; }

        /// <summary>
        /// Deprecated, use the &#x60;updated_at&#x60; property instead.
        /// </summary>
        /// <value>Deprecated, use the &#x60;updated_at&#x60; property instead.</value>
        /* <example>2021-12-30 19:23:59</example> */
        [JsonPropertyName("updated")]
        [Obsolete]
        public string? Updated { get { return this.UpdatedOption; } set { this.UpdatedOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2021-12-30T19:23:59Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2021-12-30T19:23:59Z</example> */
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of ProjectsCodes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ProjectsCodesOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProjectsCodes
        /// </summary>
        [JsonPropertyName("projects_codes")]
        public List<string>? ProjectsCodes { get { return this.ProjectsCodesOption; } set { this.ProjectsCodesOption = new Option<List<string>?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomField {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Placeholder: ").Append(Placeholder).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IsVisible: ").Append(IsVisible).Append("\n");
            sb.Append("  IsFilterable: ").Append(IsFilterable).Append("\n");
            sb.Append("  IsEnabledForAllProjects: ").Append(IsEnabledForAllProjects).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ProjectsCodes: ").Append(ProjectsCodes).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CustomField" />
    /// </summary>
    public class CustomFieldJsonConverter : JsonConverter<CustomField>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CustomField" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CustomField Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<string?> title = default;
            Option<string?> entity = default;
            Option<string?> type = default;
            Option<string?> placeholder = default;
            Option<string?> defaultValue = default;
            Option<string?> value = default;
            Option<bool?> isRequired = default;
            Option<bool?> isVisible = default;
            Option<bool?> isFilterable = default;
            Option<bool?> isEnabledForAllProjects = default;
            Option<string?> created = default;
            Option<string?> updated = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<List<string>?> projectsCodes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "entity":
                            entity = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "placeholder":
                            placeholder = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "default_value":
                            defaultValue = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_required":
                            isRequired = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_visible":
                            isVisible = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_filterable":
                            isFilterable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_enabled_for_all_projects":
                            isEnabledForAllProjects = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "created":
                            created = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated":
                            updated = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "projects_codes":
                            projectsCodes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class CustomField.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class CustomField.");

            if (entity.IsSet && entity.Value == null)
                throw new ArgumentNullException(nameof(entity), "Property is not nullable for class CustomField.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class CustomField.");

            if (isRequired.IsSet && isRequired.Value == null)
                throw new ArgumentNullException(nameof(isRequired), "Property is not nullable for class CustomField.");

            if (isVisible.IsSet && isVisible.Value == null)
                throw new ArgumentNullException(nameof(isVisible), "Property is not nullable for class CustomField.");

            if (isFilterable.IsSet && isFilterable.Value == null)
                throw new ArgumentNullException(nameof(isFilterable), "Property is not nullable for class CustomField.");

            if (isEnabledForAllProjects.IsSet && isEnabledForAllProjects.Value == null)
                throw new ArgumentNullException(nameof(isEnabledForAllProjects), "Property is not nullable for class CustomField.");

            if (created.IsSet && created.Value == null)
                throw new ArgumentNullException(nameof(created), "Property is not nullable for class CustomField.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class CustomField.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class CustomField.");

            if (projectsCodes.IsSet && projectsCodes.Value == null)
                throw new ArgumentNullException(nameof(projectsCodes), "Property is not nullable for class CustomField.");

            return new CustomField(id, title, entity, type, placeholder, defaultValue, value, isRequired, isVisible, isFilterable, isEnabledForAllProjects, created, updated, createdAt, updatedAt, projectsCodes);
        }

        /// <summary>
        /// Serializes a <see cref="CustomField" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customField"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CustomField customField, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, customField, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CustomField" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customField"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CustomField customField, JsonSerializerOptions jsonSerializerOptions)
        {
            if (customField.TitleOption.IsSet && customField.Title == null)
                throw new ArgumentNullException(nameof(customField.Title), "Property is required for class CustomField.");

            if (customField.EntityOption.IsSet && customField.Entity == null)
                throw new ArgumentNullException(nameof(customField.Entity), "Property is required for class CustomField.");

            if (customField.TypeOption.IsSet && customField.Type == null)
                throw new ArgumentNullException(nameof(customField.Type), "Property is required for class CustomField.");

            if (customField.CreatedOption.IsSet && customField.Created == null)
                throw new ArgumentNullException(nameof(customField.Created), "Property is required for class CustomField.");

            if (customField.ProjectsCodesOption.IsSet && customField.ProjectsCodes == null)
                throw new ArgumentNullException(nameof(customField.ProjectsCodes), "Property is required for class CustomField.");

            if (customField.IdOption.IsSet)
                writer.WriteNumber("id", customField.IdOption.Value!.Value);

            if (customField.TitleOption.IsSet)
                writer.WriteString("title", customField.Title);

            if (customField.EntityOption.IsSet)
                writer.WriteString("entity", customField.Entity);

            if (customField.TypeOption.IsSet)
                writer.WriteString("type", customField.Type);

            if (customField.PlaceholderOption.IsSet)
                if (customField.PlaceholderOption.Value != null)
                    writer.WriteString("placeholder", customField.Placeholder);
                else
                    writer.WriteNull("placeholder");

            if (customField.DefaultValueOption.IsSet)
                if (customField.DefaultValueOption.Value != null)
                    writer.WriteString("default_value", customField.DefaultValue);
                else
                    writer.WriteNull("default_value");

            if (customField.ValueOption.IsSet)
                if (customField.ValueOption.Value != null)
                    writer.WriteString("value", customField.Value);
                else
                    writer.WriteNull("value");

            if (customField.IsRequiredOption.IsSet)
                writer.WriteBoolean("is_required", customField.IsRequiredOption.Value!.Value);

            if (customField.IsVisibleOption.IsSet)
                writer.WriteBoolean("is_visible", customField.IsVisibleOption.Value!.Value);

            if (customField.IsFilterableOption.IsSet)
                writer.WriteBoolean("is_filterable", customField.IsFilterableOption.Value!.Value);

            if (customField.IsEnabledForAllProjectsOption.IsSet)
                writer.WriteBoolean("is_enabled_for_all_projects", customField.IsEnabledForAllProjectsOption.Value!.Value);

            if (customField.CreatedOption.IsSet)
                writer.WriteString("created", customField.Created);

            if (customField.UpdatedOption.IsSet)
                if (customField.UpdatedOption.Value != null)
                    writer.WriteString("updated", customField.Updated);
                else
                    writer.WriteNull("updated");

            if (customField.CreatedAtOption.IsSet)
                writer.WriteString("created_at", customField.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (customField.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", customField.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));

            if (customField.ProjectsCodesOption.IsSet)
            {
                writer.WritePropertyName("projects_codes");
                JsonSerializer.Serialize(writer, customField.ProjectsCodes, jsonSerializerOptions);
            }
        }
    }
}
