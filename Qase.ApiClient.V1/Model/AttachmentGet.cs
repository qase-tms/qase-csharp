// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// AttachmentGet
    /// </summary>
    public partial class AttachmentGet : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentGet" /> class.
        /// </summary>
        /// <param name="hash">hash</param>
        /// <param name="file">file</param>
        /// <param name="mime">mime</param>
        /// <param name="size">size</param>
        /// <param name="extension">extension</param>
        /// <param name="fullPath">fullPath</param>
        /// <param name="url">url</param>
        [JsonConstructor]
        public AttachmentGet(Option<string?> hash = default, Option<string?> file = default, Option<string?> mime = default, Option<int?> size = default, Option<string?> extension = default, Option<string?> fullPath = default, Option<string?> url = default)
        {
            HashOption = hash;
            FileOption = file;
            MimeOption = mime;
            SizeOption = size;
            ExtensionOption = extension;
            FullPathOption = fullPath;
            UrlOption = url;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Hash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HashOption { get; private set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [JsonPropertyName("hash")]
        public string? Hash { get { return this.HashOption; } set { this.HashOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of File
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FileOption { get; private set; }

        /// <summary>
        /// Gets or Sets File
        /// </summary>
        [JsonPropertyName("file")]
        public string? File { get { return this.FileOption; } set { this.FileOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Mime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Mime
        /// </summary>
        [JsonPropertyName("mime")]
        public string? Mime { get { return this.MimeOption; } set { this.MimeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int? Size { get { return this.SizeOption; } set { this.SizeOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Extension
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExtensionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Extension
        /// </summary>
        [JsonPropertyName("extension")]
        public string? Extension { get { return this.ExtensionOption; } set { this.ExtensionOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FullPath
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FullPathOption { get; private set; }

        /// <summary>
        /// Gets or Sets FullPath
        /// </summary>
        [JsonPropertyName("full_path")]
        public string? FullPath { get { return this.FullPathOption; } set { this.FullPathOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new Option<string?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttachmentGet {\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  Mime: ").Append(Mime).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  FullPath: ").Append(FullPath).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AttachmentGet" />
    /// </summary>
    public class AttachmentGetJsonConverter : JsonConverter<AttachmentGet>
    {
        /// <summary>
        /// Deserializes json to <see cref="AttachmentGet" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AttachmentGet Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> hash = default;
            Option<string?> file = default;
            Option<string?> mime = default;
            Option<int?> size = default;
            Option<string?> extension = default;
            Option<string?> fullPath = default;
            Option<string?> url = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "hash":
                            hash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "file":
                            file = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mime":
                            mime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "extension":
                            extension = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "full_path":
                            fullPath = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (hash.IsSet && hash.Value == null)
                throw new ArgumentNullException(nameof(hash), "Property is not nullable for class AttachmentGet.");

            if (file.IsSet && file.Value == null)
                throw new ArgumentNullException(nameof(file), "Property is not nullable for class AttachmentGet.");

            if (mime.IsSet && mime.Value == null)
                throw new ArgumentNullException(nameof(mime), "Property is not nullable for class AttachmentGet.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class AttachmentGet.");

            if (extension.IsSet && extension.Value == null)
                throw new ArgumentNullException(nameof(extension), "Property is not nullable for class AttachmentGet.");

            if (fullPath.IsSet && fullPath.Value == null)
                throw new ArgumentNullException(nameof(fullPath), "Property is not nullable for class AttachmentGet.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class AttachmentGet.");

            return new AttachmentGet(hash, file, mime, size, extension, fullPath, url);
        }

        /// <summary>
        /// Serializes a <see cref="AttachmentGet" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="attachmentGet"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AttachmentGet attachmentGet, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, attachmentGet, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AttachmentGet" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="attachmentGet"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AttachmentGet attachmentGet, JsonSerializerOptions jsonSerializerOptions)
        {
            if (attachmentGet.HashOption.IsSet && attachmentGet.Hash == null)
                throw new ArgumentNullException(nameof(attachmentGet.Hash), "Property is required for class AttachmentGet.");

            if (attachmentGet.FileOption.IsSet && attachmentGet.File == null)
                throw new ArgumentNullException(nameof(attachmentGet.File), "Property is required for class AttachmentGet.");

            if (attachmentGet.MimeOption.IsSet && attachmentGet.Mime == null)
                throw new ArgumentNullException(nameof(attachmentGet.Mime), "Property is required for class AttachmentGet.");

            if (attachmentGet.ExtensionOption.IsSet && attachmentGet.Extension == null)
                throw new ArgumentNullException(nameof(attachmentGet.Extension), "Property is required for class AttachmentGet.");

            if (attachmentGet.FullPathOption.IsSet && attachmentGet.FullPath == null)
                throw new ArgumentNullException(nameof(attachmentGet.FullPath), "Property is required for class AttachmentGet.");

            if (attachmentGet.UrlOption.IsSet && attachmentGet.Url == null)
                throw new ArgumentNullException(nameof(attachmentGet.Url), "Property is required for class AttachmentGet.");

            if (attachmentGet.HashOption.IsSet)
                writer.WriteString("hash", attachmentGet.Hash);

            if (attachmentGet.FileOption.IsSet)
                writer.WriteString("file", attachmentGet.File);

            if (attachmentGet.MimeOption.IsSet)
                writer.WriteString("mime", attachmentGet.Mime);

            if (attachmentGet.SizeOption.IsSet)
                writer.WriteNumber("size", attachmentGet.SizeOption.Value!.Value);

            if (attachmentGet.ExtensionOption.IsSet)
                writer.WriteString("extension", attachmentGet.Extension);

            if (attachmentGet.FullPathOption.IsSet)
                writer.WriteString("full_path", attachmentGet.FullPath);

            if (attachmentGet.UrlOption.IsSet)
                writer.WriteString("url", attachmentGet.Url);
        }
    }
}
