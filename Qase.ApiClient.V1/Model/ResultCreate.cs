// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// ResultCreate
    /// </summary>
    public partial class ResultCreate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultCreate" /> class.
        /// </summary>
        /// <param name="status">Can have the following values &#x60;passed&#x60;, &#x60;failed&#x60;, &#x60;blocked&#x60;, &#x60;skipped&#x60;, &#x60;invalid&#x60; + custom statuses</param>
        /// <param name="caseId">caseId</param>
        /// <param name="case">case</param>
        /// <param name="startTime">startTime</param>
        /// <param name="time">time</param>
        /// <param name="timeMs">timeMs</param>
        /// <param name="defect">defect</param>
        /// <param name="attachments">attachments</param>
        /// <param name="stacktrace">stacktrace</param>
        /// <param name="comment">comment</param>
        /// <param name="param">A map of parameters (name &#x3D;&gt; value)</param>
        /// <param name="paramGroups">List parameter groups by name only. Add their values in the &#39;param&#39; field</param>
        /// <param name="steps">steps</param>
        /// <param name="authorId">authorId</param>
        [JsonConstructor]
        public ResultCreate(string status, Option<long?> caseId = default, Option<ResultCreateCase?> @case = default, Option<int?> startTime = default, Option<long?> time = default, Option<long?> timeMs = default, Option<bool?> defect = default, Option<List<string>?> attachments = default, Option<string?> stacktrace = default, Option<string?> comment = default, Option<Dictionary<string, string>?> param = default, Option<List<List<string>>?> paramGroups = default, Option<List<TestStepResultCreate>?> steps = default, Option<long?> authorId = default)
        {
            Status = status;
            CaseIdOption = caseId;
            CaseOption = @case;
            StartTimeOption = startTime;
            TimeOption = time;
            TimeMsOption = timeMs;
            DefectOption = defect;
            AttachmentsOption = attachments;
            StacktraceOption = stacktrace;
            CommentOption = comment;
            ParamOption = param;
            ParamGroupsOption = paramGroups;
            StepsOption = steps;
            AuthorIdOption = authorId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Can have the following values &#x60;passed&#x60;, &#x60;failed&#x60;, &#x60;blocked&#x60;, &#x60;skipped&#x60;, &#x60;invalid&#x60; + custom statuses
        /// </summary>
        /// <value>Can have the following values &#x60;passed&#x60;, &#x60;failed&#x60;, &#x60;blocked&#x60;, &#x60;skipped&#x60;, &#x60;invalid&#x60; + custom statuses</value>
        [JsonPropertyName("status")]
        public string Status { get; set; }

        /// <summary>
        /// Used to track the state of CaseId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CaseIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets CaseId
        /// </summary>
        [JsonPropertyName("case_id")]
        public long? CaseId { get { return this.CaseIdOption; } set { this.CaseIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Case
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ResultCreateCase?> CaseOption { get; private set; }

        /// <summary>
        /// Gets or Sets Case
        /// </summary>
        [JsonPropertyName("case")]
        public ResultCreateCase? Case { get { return this.CaseOption; } set { this.CaseOption = new Option<ResultCreateCase?>(value); } }

        /// <summary>
        /// Used to track the state of StartTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StartTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [JsonPropertyName("start_time")]
        public int? StartTime { get { return this.StartTimeOption; } set { this.StartTimeOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Time
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [JsonPropertyName("time")]
        public long? Time { get { return this.TimeOption; } set { this.TimeOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of TimeMs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TimeMsOption { get; private set; }

        /// <summary>
        /// Gets or Sets TimeMs
        /// </summary>
        [JsonPropertyName("time_ms")]
        public long? TimeMs { get { return this.TimeMsOption; } set { this.TimeMsOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Defect
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DefectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Defect
        /// </summary>
        [JsonPropertyName("defect")]
        public bool? Defect { get { return this.DefectOption; } set { this.DefectOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Attachments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> AttachmentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [JsonPropertyName("attachments")]
        public List<string>? Attachments { get { return this.AttachmentsOption; } set { this.AttachmentsOption = new Option<List<string>?>(value); } }

        /// <summary>
        /// Used to track the state of Stacktrace
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StacktraceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Stacktrace
        /// </summary>
        [JsonPropertyName("stacktrace")]
        public string? Stacktrace { get { return this.StacktraceOption; } set { this.StacktraceOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Param
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> ParamOption { get; private set; }

        /// <summary>
        /// A map of parameters (name &#x3D;&gt; value)
        /// </summary>
        /// <value>A map of parameters (name &#x3D;&gt; value)</value>
        [JsonPropertyName("param")]
        public Dictionary<string, string>? Param { get { return this.ParamOption; } set { this.ParamOption = new Option<Dictionary<string, string>?>(value); } }

        /// <summary>
        /// Used to track the state of ParamGroups
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<List<string>>?> ParamGroupsOption { get; private set; }

        /// <summary>
        /// List parameter groups by name only. Add their values in the &#39;param&#39; field
        /// </summary>
        /// <value>List parameter groups by name only. Add their values in the &#39;param&#39; field</value>
        [JsonPropertyName("param_groups")]
        public List<List<string>>? ParamGroups { get { return this.ParamGroupsOption; } set { this.ParamGroupsOption = new Option<List<List<string>>?>(value); } }

        /// <summary>
        /// Used to track the state of Steps
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<TestStepResultCreate>?> StepsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [JsonPropertyName("steps")]
        public List<TestStepResultCreate>? Steps { get { return this.StepsOption; } set { this.StepsOption = new Option<List<TestStepResultCreate>?>(value); } }

        /// <summary>
        /// Used to track the state of AuthorId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AuthorIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets AuthorId
        /// </summary>
        [JsonPropertyName("author_id")]
        public long? AuthorId { get { return this.AuthorIdOption; } set { this.AuthorIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResultCreate {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CaseId: ").Append(CaseId).Append("\n");
            sb.Append("  Case: ").Append(Case).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  TimeMs: ").Append(TimeMs).Append("\n");
            sb.Append("  Defect: ").Append(Defect).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Stacktrace: ").Append(Stacktrace).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Param: ").Append(Param).Append("\n");
            sb.Append("  ParamGroups: ").Append(ParamGroups).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  AuthorId: ").Append(AuthorId).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StartTime (int) minimum
            if (this.StartTimeOption.IsSet && this.StartTimeOption.Value < (int)0)
            {
                yield return new ValidationResult("Invalid value for StartTime, must be a value greater than or equal to 0.", new [] { "StartTime" });
            }

            // Time (long) maximum
            if (this.TimeOption.IsSet && this.TimeOption.Value > (long)31536000)
            {
                yield return new ValidationResult("Invalid value for Time, must be a value less than or equal to 31536000.", new [] { "Time" });
            }

            // Time (long) minimum
            if (this.TimeOption.IsSet && this.TimeOption.Value < (long)0)
            {
                yield return new ValidationResult("Invalid value for Time, must be a value greater than or equal to 0.", new [] { "Time" });
            }

            // TimeMs (long) maximum
            if (this.TimeMsOption.IsSet && this.TimeMsOption.Value > (long)31536000000)
            {
                yield return new ValidationResult("Invalid value for TimeMs, must be a value less than or equal to 31536000000.", new [] { "TimeMs" });
            }

            // TimeMs (long) minimum
            if (this.TimeMsOption.IsSet && this.TimeMsOption.Value < (long)0)
            {
                yield return new ValidationResult("Invalid value for TimeMs, must be a value greater than or equal to 0.", new [] { "TimeMs" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResultCreate" />
    /// </summary>
    public class ResultCreateJsonConverter : JsonConverter<ResultCreate>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResultCreate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResultCreate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> status = default;
            Option<long?> caseId = default;
            Option<ResultCreateCase?> varCase = default;
            Option<int?> startTime = default;
            Option<long?> time = default;
            Option<long?> timeMs = default;
            Option<bool?> defect = default;
            Option<List<string>?> attachments = default;
            Option<string?> stacktrace = default;
            Option<string?> comment = default;
            Option<Dictionary<string, string>?> param = default;
            Option<List<List<string>>?> paramGroups = default;
            Option<List<TestStepResultCreate>?> steps = default;
            Option<long?> authorId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "case_id":
                            caseId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "case":
                            varCase = new Option<ResultCreateCase?>(JsonSerializer.Deserialize<ResultCreateCase>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "start_time":
                            startTime = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "time":
                            time = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "time_ms":
                            timeMs = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "defect":
                            defect = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "attachments":
                            attachments = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "stacktrace":
                            stacktrace = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "param":
                            param = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "param_groups":
                            paramGroups = new Option<List<List<string>>?>(JsonSerializer.Deserialize<List<List<string>>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "steps":
                            steps = new Option<List<TestStepResultCreate>?>(JsonSerializer.Deserialize<List<TestStepResultCreate>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "author_id":
                            authorId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class ResultCreate.", nameof(status));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ResultCreate.");

            if (caseId.IsSet && caseId.Value == null)
                throw new ArgumentNullException(nameof(caseId), "Property is not nullable for class ResultCreate.");

            if (varCase.IsSet && varCase.Value == null)
                throw new ArgumentNullException(nameof(varCase), "Property is not nullable for class ResultCreate.");

            return new ResultCreate(status.Value!, caseId, varCase, startTime, time, timeMs, defect, attachments, stacktrace, comment, param, paramGroups, steps, authorId);
        }

        /// <summary>
        /// Serializes a <see cref="ResultCreate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultCreate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResultCreate resultCreate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, resultCreate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResultCreate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultCreate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResultCreate resultCreate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (resultCreate.Status == null)
                throw new ArgumentNullException(nameof(resultCreate.Status), "Property is required for class ResultCreate.");

            if (resultCreate.CaseOption.IsSet && resultCreate.Case == null)
                throw new ArgumentNullException(nameof(resultCreate.Case), "Property is required for class ResultCreate.");

            writer.WriteString("status", resultCreate.Status);

            if (resultCreate.CaseIdOption.IsSet)
                writer.WriteNumber("case_id", resultCreate.CaseIdOption.Value!.Value);

            if (resultCreate.CaseOption.IsSet)
            {
                writer.WritePropertyName("case");
                JsonSerializer.Serialize(writer, resultCreate.Case, jsonSerializerOptions);
            }
            if (resultCreate.StartTimeOption.IsSet)
                if (resultCreate.StartTimeOption.Value != null)
                    writer.WriteNumber("start_time", resultCreate.StartTimeOption.Value!.Value);
                else
                    writer.WriteNull("start_time");

            if (resultCreate.TimeOption.IsSet)
                if (resultCreate.TimeOption.Value != null)
                    writer.WriteNumber("time", resultCreate.TimeOption.Value!.Value);
                else
                    writer.WriteNull("time");

            if (resultCreate.TimeMsOption.IsSet)
                if (resultCreate.TimeMsOption.Value != null)
                    writer.WriteNumber("time_ms", resultCreate.TimeMsOption.Value!.Value);
                else
                    writer.WriteNull("time_ms");

            if (resultCreate.DefectOption.IsSet)
                if (resultCreate.DefectOption.Value != null)
                    writer.WriteBoolean("defect", resultCreate.DefectOption.Value!.Value);
                else
                    writer.WriteNull("defect");

            if (resultCreate.AttachmentsOption.IsSet)
                if (resultCreate.AttachmentsOption.Value != null)
                {
                    writer.WritePropertyName("attachments");
                    JsonSerializer.Serialize(writer, resultCreate.Attachments, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("attachments");
            if (resultCreate.StacktraceOption.IsSet)
                if (resultCreate.StacktraceOption.Value != null)
                    writer.WriteString("stacktrace", resultCreate.Stacktrace);
                else
                    writer.WriteNull("stacktrace");

            if (resultCreate.CommentOption.IsSet)
                if (resultCreate.CommentOption.Value != null)
                    writer.WriteString("comment", resultCreate.Comment);
                else
                    writer.WriteNull("comment");

            if (resultCreate.ParamOption.IsSet)
                if (resultCreate.ParamOption.Value != null)
                {
                    writer.WritePropertyName("param");
                    JsonSerializer.Serialize(writer, resultCreate.Param, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("param");
            if (resultCreate.ParamGroupsOption.IsSet)
                if (resultCreate.ParamGroupsOption.Value != null)
                {
                    writer.WritePropertyName("param_groups");
                    JsonSerializer.Serialize(writer, resultCreate.ParamGroups, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("param_groups");
            if (resultCreate.StepsOption.IsSet)
                if (resultCreate.StepsOption.Value != null)
                {
                    writer.WritePropertyName("steps");
                    JsonSerializer.Serialize(writer, resultCreate.Steps, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("steps");
            if (resultCreate.AuthorIdOption.IsSet)
                if (resultCreate.AuthorIdOption.Value != null)
                    writer.WriteNumber("author_id", resultCreate.AuthorIdOption.Value!.Value);
                else
                    writer.WriteNull("author_id");
        }
    }
}
