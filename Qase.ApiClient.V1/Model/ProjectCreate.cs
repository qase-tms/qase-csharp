// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// ProjectCreate
    /// </summary>
    public partial class ProjectCreate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectCreate" /> class.
        /// </summary>
        /// <param name="title">Project title.</param>
        /// <param name="code">Project code. Unique for team. Digits and special characters are not allowed.</param>
        /// <param name="description">Project description.</param>
        /// <param name="access">access</param>
        /// <param name="group">Team group hash. Required if access param is set to group.</param>
        /// <param name="settings">Additional project settings.</param>
        [JsonConstructor]
        public ProjectCreate(string title, string code, Option<string?> description = default, Option<AccessEnum?> access = default, Option<string?> group = default, Option<Dictionary<string, Object>?> settings = default)
        {
            Title = title;
            Code = code;
            DescriptionOption = description;
            AccessOption = access;
            GroupOption = group;
            SettingsOption = settings;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Access
        /// </summary>
        public enum AccessEnum
        {
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            All = 1,

            /// <summary>
            /// Enum Group for value: group
            /// </summary>
            Group = 2,

            /// <summary>
            /// Enum None for value: none
            /// </summary>
            None = 3
        }

        /// <summary>
        /// Returns a <see cref="AccessEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AccessEnum AccessEnumFromString(string value)
        {
            if (value.Equals("all"))
                return AccessEnum.All;

            if (value.Equals("group"))
                return AccessEnum.Group;

            if (value.Equals("none"))
                return AccessEnum.None;

            throw new NotImplementedException($"Could not convert value to type AccessEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AccessEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AccessEnum? AccessEnumFromStringOrDefault(string value)
        {
            if (value.Equals("all"))
                return AccessEnum.All;

            if (value.Equals("group"))
                return AccessEnum.Group;

            if (value.Equals("none"))
                return AccessEnum.None;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AccessEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AccessEnumToJsonValue(AccessEnum? value)
        {
            if (value == AccessEnum.All)
                return "all";

            if (value == AccessEnum.Group)
                return "group";

            if (value == AccessEnum.None)
                return "none";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Access
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AccessEnum?> AccessOption { get; private set; }

        /// <summary>
        /// Gets or Sets Access
        /// </summary>
        [JsonPropertyName("access")]
        public AccessEnum? Access { get { return this.AccessOption; } set { this.AccessOption = new Option<AccessEnum?>(value); } }

        /// <summary>
        /// Project title.
        /// </summary>
        /// <value>Project title.</value>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Project code. Unique for team. Digits and special characters are not allowed.
        /// </summary>
        /// <value>Project code. Unique for team. Digits and special characters are not allowed.</value>
        [JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Project description.
        /// </summary>
        /// <value>Project description.</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Group
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GroupOption { get; private set; }

        /// <summary>
        /// Team group hash. Required if access param is set to group.
        /// </summary>
        /// <value>Team group hash. Required if access param is set to group.</value>
        [JsonPropertyName("group")]
        public string? Group { get { return this.GroupOption; } set { this.GroupOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Settings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> SettingsOption { get; private set; }

        /// <summary>
        /// Additional project settings.
        /// </summary>
        /// <value>Additional project settings.</value>
        [JsonPropertyName("settings")]
        public Dictionary<string, Object>? Settings { get { return this.SettingsOption; } set { this.SettingsOption = new Option<Dictionary<string, Object>?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProjectCreate {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Code != null) {
                // Code (string) pattern
                Regex regexCode = new Regex(@"^[a-zA-Z]{2,10}$", RegexOptions.CultureInvariant);

                if (!regexCode.Match(this.Code).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, must match a pattern of " + regexCode, new [] { "Code" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProjectCreate" />
    /// </summary>
    public class ProjectCreateJsonConverter : JsonConverter<ProjectCreate>
    {
        /// <summary>
        /// Deserializes json to <see cref="ProjectCreate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ProjectCreate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<string?> code = default;
            Option<string?> description = default;
            Option<ProjectCreate.AccessEnum?> access = default;
            Option<string?> group = default;
            Option<Dictionary<string, Object>?> settings = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "access":
                            string? accessRawValue = utf8JsonReader.GetString();
                            if (accessRawValue != null)
                                access = new Option<ProjectCreate.AccessEnum?>(ProjectCreate.AccessEnumFromStringOrDefault(accessRawValue));
                            break;
                        case "group":
                            group = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "settings":
                            settings = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class ProjectCreate.", nameof(title));

            if (!code.IsSet)
                throw new ArgumentException("Property is required for class ProjectCreate.", nameof(code));

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class ProjectCreate.");

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class ProjectCreate.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class ProjectCreate.");

            if (access.IsSet && access.Value == null)
                throw new ArgumentNullException(nameof(access), "Property is not nullable for class ProjectCreate.");

            if (group.IsSet && group.Value == null)
                throw new ArgumentNullException(nameof(group), "Property is not nullable for class ProjectCreate.");

            if (settings.IsSet && settings.Value == null)
                throw new ArgumentNullException(nameof(settings), "Property is not nullable for class ProjectCreate.");

            return new ProjectCreate(title.Value!, code.Value!, description, access, group, settings);
        }

        /// <summary>
        /// Serializes a <see cref="ProjectCreate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="projectCreate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ProjectCreate projectCreate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, projectCreate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ProjectCreate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="projectCreate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ProjectCreate projectCreate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (projectCreate.Title == null)
                throw new ArgumentNullException(nameof(projectCreate.Title), "Property is required for class ProjectCreate.");

            if (projectCreate.Code == null)
                throw new ArgumentNullException(nameof(projectCreate.Code), "Property is required for class ProjectCreate.");

            if (projectCreate.DescriptionOption.IsSet && projectCreate.Description == null)
                throw new ArgumentNullException(nameof(projectCreate.Description), "Property is required for class ProjectCreate.");

            if (projectCreate.GroupOption.IsSet && projectCreate.Group == null)
                throw new ArgumentNullException(nameof(projectCreate.Group), "Property is required for class ProjectCreate.");

            if (projectCreate.SettingsOption.IsSet && projectCreate.Settings == null)
                throw new ArgumentNullException(nameof(projectCreate.Settings), "Property is required for class ProjectCreate.");

            writer.WriteString("title", projectCreate.Title);

            writer.WriteString("code", projectCreate.Code);

            if (projectCreate.DescriptionOption.IsSet)
                writer.WriteString("description", projectCreate.Description);

            var accessRawValue = ProjectCreate.AccessEnumToJsonValue(projectCreate.AccessOption.Value!.Value);
            writer.WriteString("access", accessRawValue);
            if (projectCreate.GroupOption.IsSet)
                writer.WriteString("group", projectCreate.Group);

            if (projectCreate.SettingsOption.IsSet)
            {
                writer.WritePropertyName("settings");
                JsonSerializer.Serialize(writer, projectCreate.Settings, jsonSerializerOptions);
            }
        }
    }
}
