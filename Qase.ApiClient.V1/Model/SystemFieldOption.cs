// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// SystemFieldOption
    /// </summary>
    public partial class SystemFieldOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemFieldOption" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="title">title</param>
        /// <param name="slug">slug</param>
        /// <param name="color">color</param>
        /// <param name="icon">icon</param>
        /// <param name="isDefault">isDefault</param>
        /// <param name="readOnly">readOnly</param>
        [JsonConstructor]
        public SystemFieldOption(Option<long?> id = default, Option<string?> title = default, Option<string?> slug = default, Option<string?> color = default, Option<string?> icon = default, Option<bool?> isDefault = default, Option<bool?> readOnly = default)
        {
            IdOption = id;
            TitleOption = title;
            SlugOption = slug;
            ColorOption = color;
            IconOption = icon;
            IsDefaultOption = isDefault;
            ReadOnlyOption = readOnly;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public long? Id { get { return this.IdOption; } set { this.IdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Slug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SlugOption { get; private set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [JsonPropertyName("slug")]
        public string? Slug { get { return this.SlugOption; } set { this.SlugOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Color
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ColorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [JsonPropertyName("color")]
        public string? Color { get { return this.ColorOption; } set { this.ColorOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Icon
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IconOption { get; private set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [JsonPropertyName("icon")]
        public string? Icon { get { return this.IconOption; } set { this.IconOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of IsDefault
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDefaultOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsDefault
        /// </summary>
        [JsonPropertyName("is_default")]
        public bool? IsDefault { get { return this.IsDefaultOption; } set { this.IsDefaultOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ReadOnly
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ReadOnlyOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReadOnly
        /// </summary>
        [JsonPropertyName("read_only")]
        public bool? ReadOnly { get { return this.ReadOnlyOption; } set { this.ReadOnlyOption = new Option<bool?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemFieldOption {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SystemFieldOption" />
    /// </summary>
    public class SystemFieldOptionJsonConverter : JsonConverter<SystemFieldOption>
    {
        /// <summary>
        /// Deserializes json to <see cref="SystemFieldOption" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SystemFieldOption Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<string?> title = default;
            Option<string?> slug = default;
            Option<string?> color = default;
            Option<string?> icon = default;
            Option<bool?> isDefault = default;
            Option<bool?> readOnly = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "slug":
                            slug = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "color":
                            color = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "icon":
                            icon = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_default":
                            isDefault = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "read_only":
                            readOnly = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SystemFieldOption.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class SystemFieldOption.");

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug), "Property is not nullable for class SystemFieldOption.");

            if (isDefault.IsSet && isDefault.Value == null)
                throw new ArgumentNullException(nameof(isDefault), "Property is not nullable for class SystemFieldOption.");

            if (readOnly.IsSet && readOnly.Value == null)
                throw new ArgumentNullException(nameof(readOnly), "Property is not nullable for class SystemFieldOption.");

            return new SystemFieldOption(id, title, slug, color, icon, isDefault, readOnly);
        }

        /// <summary>
        /// Serializes a <see cref="SystemFieldOption" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemFieldOption"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SystemFieldOption systemFieldOption, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, systemFieldOption, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SystemFieldOption" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemFieldOption"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SystemFieldOption systemFieldOption, JsonSerializerOptions jsonSerializerOptions)
        {
            if (systemFieldOption.TitleOption.IsSet && systemFieldOption.Title == null)
                throw new ArgumentNullException(nameof(systemFieldOption.Title), "Property is required for class SystemFieldOption.");

            if (systemFieldOption.SlugOption.IsSet && systemFieldOption.Slug == null)
                throw new ArgumentNullException(nameof(systemFieldOption.Slug), "Property is required for class SystemFieldOption.");

            if (systemFieldOption.IdOption.IsSet)
                writer.WriteNumber("id", systemFieldOption.IdOption.Value!.Value);

            if (systemFieldOption.TitleOption.IsSet)
                writer.WriteString("title", systemFieldOption.Title);

            if (systemFieldOption.SlugOption.IsSet)
                writer.WriteString("slug", systemFieldOption.Slug);

            if (systemFieldOption.ColorOption.IsSet)
                if (systemFieldOption.ColorOption.Value != null)
                    writer.WriteString("color", systemFieldOption.Color);
                else
                    writer.WriteNull("color");

            if (systemFieldOption.IconOption.IsSet)
                if (systemFieldOption.IconOption.Value != null)
                    writer.WriteString("icon", systemFieldOption.Icon);
                else
                    writer.WriteNull("icon");

            if (systemFieldOption.IsDefaultOption.IsSet)
                writer.WriteBoolean("is_default", systemFieldOption.IsDefaultOption.Value!.Value);

            if (systemFieldOption.ReadOnlyOption.IsSet)
                writer.WriteBoolean("read_only", systemFieldOption.ReadOnlyOption.Value!.Value);
        }
    }
}
