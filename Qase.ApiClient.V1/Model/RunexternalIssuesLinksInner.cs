// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// RunexternalIssuesLinksInner
    /// </summary>
    public partial class RunexternalIssuesLinksInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RunexternalIssuesLinksInner" /> class.
        /// </summary>
        /// <param name="runId">runId</param>
        /// <param name="externalIssue">An external issue identifier, e.g. \&quot;PROJ-1234\&quot;. Or null if you want to remove the link.</param>
        [JsonConstructor]
        public RunexternalIssuesLinksInner(long runId, Option<string?> externalIssue = default)
        {
            RunId = runId;
            ExternalIssueOption = externalIssue;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets RunId
        /// </summary>
        [JsonPropertyName("run_id")]
        public long RunId { get; set; }

        /// <summary>
        /// Used to track the state of ExternalIssue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalIssueOption { get; private set; }

        /// <summary>
        /// An external issue identifier, e.g. \&quot;PROJ-1234\&quot;. Or null if you want to remove the link.
        /// </summary>
        /// <value>An external issue identifier, e.g. \&quot;PROJ-1234\&quot;. Or null if you want to remove the link.</value>
        [JsonPropertyName("external_issue")]
        public string? ExternalIssue { get { return this.ExternalIssueOption; } set { this.ExternalIssueOption = new Option<string?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RunexternalIssuesLinksInner {\n");
            sb.Append("  RunId: ").Append(RunId).Append("\n");
            sb.Append("  ExternalIssue: ").Append(ExternalIssue).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ExternalIssue (string) minLength
            if (this.ExternalIssue != null && this.ExternalIssue.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ExternalIssue, length must be greater than 1.", new [] { "ExternalIssue" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RunexternalIssuesLinksInner" />
    /// </summary>
    public class RunexternalIssuesLinksInnerJsonConverter : JsonConverter<RunexternalIssuesLinksInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="RunexternalIssuesLinksInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RunexternalIssuesLinksInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> runId = default;
            Option<string?> externalIssue = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "run_id":
                            runId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "external_issue":
                            externalIssue = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!runId.IsSet)
                throw new ArgumentException("Property is required for class RunexternalIssuesLinksInner.", nameof(runId));

            if (runId.IsSet && runId.Value == null)
                throw new ArgumentNullException(nameof(runId), "Property is not nullable for class RunexternalIssuesLinksInner.");

            return new RunexternalIssuesLinksInner(runId.Value!.Value!, externalIssue);
        }

        /// <summary>
        /// Serializes a <see cref="RunexternalIssuesLinksInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="runexternalIssuesLinksInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RunexternalIssuesLinksInner runexternalIssuesLinksInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, runexternalIssuesLinksInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RunexternalIssuesLinksInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="runexternalIssuesLinksInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RunexternalIssuesLinksInner runexternalIssuesLinksInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("run_id", runexternalIssuesLinksInner.RunId);

            if (runexternalIssuesLinksInner.ExternalIssueOption.IsSet)
                if (runexternalIssuesLinksInner.ExternalIssueOption.Value != null)
                    writer.WriteString("external_issue", runexternalIssuesLinksInner.ExternalIssue);
                else
                    writer.WriteNull("external_issue");
        }
    }
}
