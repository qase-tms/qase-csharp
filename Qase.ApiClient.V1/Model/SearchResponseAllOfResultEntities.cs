// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// SearchResponseAllOfResultEntities
    /// </summary>
    public partial class SearchResponseAllOfResultEntities : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResponseAllOfResultEntities" /> class.
        /// </summary>
        /// <param name="runQuery"></param>
        /// <param name="varEnvironment">varEnvironment</param>
        public SearchResponseAllOfResultEntities(RunQuery runQuery, Option<RunEnvironment?> varEnvironment = default)
        {
            RunQuery = runQuery;
            VarEnvironmentOption = varEnvironment;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResponseAllOfResultEntities" /> class.
        /// </summary>
        /// <param name="resultQuery"></param>
        /// <param name="varEnvironment">varEnvironment</param>
        public SearchResponseAllOfResultEntities(ResultQuery resultQuery, Option<RunEnvironment?> varEnvironment = default)
        {
            ResultQuery = resultQuery;
            VarEnvironmentOption = varEnvironment;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResponseAllOfResultEntities" /> class.
        /// </summary>
        /// <param name="requirementQuery"></param>
        /// <param name="varEnvironment">varEnvironment</param>
        public SearchResponseAllOfResultEntities(RequirementQuery requirementQuery, Option<RunEnvironment?> varEnvironment = default)
        {
            RequirementQuery = requirementQuery;
            VarEnvironmentOption = varEnvironment;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResponseAllOfResultEntities" /> class.
        /// </summary>
        /// <param name="testCaseQuery"></param>
        /// <param name="varEnvironment">varEnvironment</param>
        public SearchResponseAllOfResultEntities(TestCaseQuery testCaseQuery, Option<RunEnvironment?> varEnvironment = default)
        {
            TestCaseQuery = testCaseQuery;
            VarEnvironmentOption = varEnvironment;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResponseAllOfResultEntities" /> class.
        /// </summary>
        /// <param name="defectQuery"></param>
        /// <param name="varEnvironment">varEnvironment</param>
        public SearchResponseAllOfResultEntities(DefectQuery defectQuery, Option<RunEnvironment?> varEnvironment = default)
        {
            DefectQuery = defectQuery;
            VarEnvironmentOption = varEnvironment;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResponseAllOfResultEntities" /> class.
        /// </summary>
        /// <param name="planQuery"></param>
        /// <param name="varEnvironment">varEnvironment</param>
        public SearchResponseAllOfResultEntities(PlanQuery planQuery, Option<RunEnvironment?> varEnvironment = default)
        {
            PlanQuery = planQuery;
            VarEnvironmentOption = varEnvironment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets RunQuery
        /// </summary>
        public RunQuery? RunQuery { get; set; }

        /// <summary>
        /// Gets or Sets ResultQuery
        /// </summary>
        public ResultQuery? ResultQuery { get; set; }

        /// <summary>
        /// Gets or Sets RequirementQuery
        /// </summary>
        public RequirementQuery? RequirementQuery { get; set; }

        /// <summary>
        /// Gets or Sets TestCaseQuery
        /// </summary>
        public TestCaseQuery? TestCaseQuery { get; set; }

        /// <summary>
        /// Gets or Sets DefectQuery
        /// </summary>
        public DefectQuery? DefectQuery { get; set; }

        /// <summary>
        /// Gets or Sets PlanQuery
        /// </summary>
        public PlanQuery? PlanQuery { get; set; }

        /// <summary>
        /// Used to track the state of VarEnvironment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RunEnvironment?> VarEnvironmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets VarEnvironment
        /// </summary>
        [JsonPropertyName("environment")]
        public RunEnvironment? VarEnvironment { get { return this.VarEnvironmentOption; } set { this.VarEnvironmentOption = new Option<RunEnvironment?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchResponseAllOfResultEntities {\n");
            sb.Append("  VarEnvironment: ").Append(VarEnvironment).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SearchResponseAllOfResultEntities" />
    /// </summary>
    public class SearchResponseAllOfResultEntitiesJsonConverter : JsonConverter<SearchResponseAllOfResultEntities>
    {
        /// <summary>
        /// Deserializes json to <see cref="SearchResponseAllOfResultEntities" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchResponseAllOfResultEntities Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<RunEnvironment?> varEnvironment = default;

            RunQuery? runQuery = default;
            ResultQuery? resultQuery = default;
            RequirementQuery? requirementQuery = default;
            TestCaseQuery? testCaseQuery = default;
            DefectQuery? defectQuery = default;
            PlanQuery? planQuery = default;

            Utf8JsonReader utf8JsonReaderOneOf = utf8JsonReader;
            while (utf8JsonReaderOneOf.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (utf8JsonReaderOneOf.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderOneOf.CurrentDepth - 1)
                {
                    Utf8JsonReader utf8JsonReaderRunQuery = utf8JsonReader;
                    ClientUtils.TryDeserialize<RunQuery?>(ref utf8JsonReaderRunQuery, jsonSerializerOptions, out runQuery);

                    Utf8JsonReader utf8JsonReaderResultQuery = utf8JsonReader;
                    ClientUtils.TryDeserialize<ResultQuery?>(ref utf8JsonReaderResultQuery, jsonSerializerOptions, out resultQuery);

                    Utf8JsonReader utf8JsonReaderRequirementQuery = utf8JsonReader;
                    ClientUtils.TryDeserialize<RequirementQuery?>(ref utf8JsonReaderRequirementQuery, jsonSerializerOptions, out requirementQuery);

                    Utf8JsonReader utf8JsonReaderTestCaseQuery = utf8JsonReader;
                    ClientUtils.TryDeserialize<TestCaseQuery?>(ref utf8JsonReaderTestCaseQuery, jsonSerializerOptions, out testCaseQuery);

                    Utf8JsonReader utf8JsonReaderDefectQuery = utf8JsonReader;
                    ClientUtils.TryDeserialize<DefectQuery?>(ref utf8JsonReaderDefectQuery, jsonSerializerOptions, out defectQuery);

                    Utf8JsonReader utf8JsonReaderPlanQuery = utf8JsonReader;
                    ClientUtils.TryDeserialize<PlanQuery?>(ref utf8JsonReaderPlanQuery, jsonSerializerOptions, out planQuery);
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "environment":
                            varEnvironment = new Option<RunEnvironment?>(JsonSerializer.Deserialize<RunEnvironment>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (runQuery != null)
                return new SearchResponseAllOfResultEntities(runQuery, varEnvironment);

            if (resultQuery != null)
                return new SearchResponseAllOfResultEntities(resultQuery, varEnvironment);

            if (requirementQuery != null)
                return new SearchResponseAllOfResultEntities(requirementQuery, varEnvironment);

            if (testCaseQuery != null)
                return new SearchResponseAllOfResultEntities(testCaseQuery, varEnvironment);

            if (defectQuery != null)
                return new SearchResponseAllOfResultEntities(defectQuery, varEnvironment);

            if (planQuery != null)
                return new SearchResponseAllOfResultEntities(planQuery, varEnvironment);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="SearchResponseAllOfResultEntities" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchResponseAllOfResultEntities"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchResponseAllOfResultEntities searchResponseAllOfResultEntities, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, searchResponseAllOfResultEntities, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SearchResponseAllOfResultEntities" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchResponseAllOfResultEntities"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchResponseAllOfResultEntities searchResponseAllOfResultEntities, JsonSerializerOptions jsonSerializerOptions)
        {
            if (searchResponseAllOfResultEntities.VarEnvironmentOption.IsSet)
                if (searchResponseAllOfResultEntities.VarEnvironmentOption.Value != null)
                {
                    writer.WritePropertyName("environment");
                    JsonSerializer.Serialize(writer, searchResponseAllOfResultEntities.VarEnvironment, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("environment");
        }
    }
}
