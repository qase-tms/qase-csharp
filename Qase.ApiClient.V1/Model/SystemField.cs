// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// SystemField
    /// </summary>
    public partial class SystemField : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemField" /> class.
        /// </summary>
        /// <param name="title">title</param>
        /// <param name="slug">slug</param>
        /// <param name="defaultValue">defaultValue</param>
        /// <param name="isRequired">isRequired</param>
        /// <param name="entity">entity</param>
        /// <param name="type">type</param>
        /// <param name="options">options</param>
        [JsonConstructor]
        public SystemField(Option<string?> title = default, Option<string?> slug = default, Option<string?> defaultValue = default, Option<bool?> isRequired = default, Option<long?> entity = default, Option<long?> type = default, Option<List<SystemFieldOption>?> options = default)
        {
            TitleOption = title;
            SlugOption = slug;
            DefaultValueOption = defaultValue;
            IsRequiredOption = isRequired;
            EntityOption = entity;
            TypeOption = type;
            OptionsOption = options;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Slug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SlugOption { get; private set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [JsonPropertyName("slug")]
        public string? Slug { get { return this.SlugOption; } set { this.SlugOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of DefaultValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DefaultValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [JsonPropertyName("default_value")]
        public string? DefaultValue { get { return this.DefaultValueOption; } set { this.DefaultValueOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of IsRequired
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsRequiredOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsRequired
        /// </summary>
        [JsonPropertyName("is_required")]
        public bool? IsRequired { get { return this.IsRequiredOption; } set { this.IsRequiredOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Entity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EntityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [JsonPropertyName("entity")]
        public long? Entity { get { return this.EntityOption; } set { this.EntityOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public long? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Options
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SystemFieldOption>?> OptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [JsonPropertyName("options")]
        public List<SystemFieldOption>? Options { get { return this.OptionsOption; } set { this.OptionsOption = new Option<List<SystemFieldOption>?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemField {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SystemField" />
    /// </summary>
    public class SystemFieldJsonConverter : JsonConverter<SystemField>
    {
        /// <summary>
        /// Deserializes json to <see cref="SystemField" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SystemField Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<string?> slug = default;
            Option<string?> defaultValue = default;
            Option<bool?> isRequired = default;
            Option<long?> entity = default;
            Option<long?> type = default;
            Option<List<SystemFieldOption>?> options = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "slug":
                            slug = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "default_value":
                            defaultValue = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_required":
                            isRequired = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "entity":
                            entity = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "type":
                            type = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "options":
                            options = new Option<List<SystemFieldOption>?>(JsonSerializer.Deserialize<List<SystemFieldOption>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class SystemField.");

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug), "Property is not nullable for class SystemField.");

            if (isRequired.IsSet && isRequired.Value == null)
                throw new ArgumentNullException(nameof(isRequired), "Property is not nullable for class SystemField.");

            if (entity.IsSet && entity.Value == null)
                throw new ArgumentNullException(nameof(entity), "Property is not nullable for class SystemField.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class SystemField.");

            return new SystemField(title, slug, defaultValue, isRequired, entity, type, options);
        }

        /// <summary>
        /// Serializes a <see cref="SystemField" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemField"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SystemField systemField, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, systemField, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SystemField" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemField"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SystemField systemField, JsonSerializerOptions jsonSerializerOptions)
        {
            if (systemField.TitleOption.IsSet && systemField.Title == null)
                throw new ArgumentNullException(nameof(systemField.Title), "Property is required for class SystemField.");

            if (systemField.SlugOption.IsSet && systemField.Slug == null)
                throw new ArgumentNullException(nameof(systemField.Slug), "Property is required for class SystemField.");

            if (systemField.TitleOption.IsSet)
                writer.WriteString("title", systemField.Title);

            if (systemField.SlugOption.IsSet)
                writer.WriteString("slug", systemField.Slug);

            if (systemField.DefaultValueOption.IsSet)
                if (systemField.DefaultValueOption.Value != null)
                    writer.WriteString("default_value", systemField.DefaultValue);
                else
                    writer.WriteNull("default_value");

            if (systemField.IsRequiredOption.IsSet)
                writer.WriteBoolean("is_required", systemField.IsRequiredOption.Value!.Value);

            if (systemField.EntityOption.IsSet)
                writer.WriteNumber("entity", systemField.EntityOption.Value!.Value);

            if (systemField.TypeOption.IsSet)
                writer.WriteNumber("type", systemField.TypeOption.Value!.Value);

            if (systemField.OptionsOption.IsSet)
                if (systemField.OptionsOption.Value != null)
                {
                    writer.WritePropertyName("options");
                    JsonSerializer.Serialize(writer, systemField.Options, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("options");
        }
    }
}
