// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// Could be used instead of &#x60;case_id&#x60;.
    /// </summary>
    public partial class ResultCreateCase : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultCreateCase" /> class.
        /// </summary>
        /// <param name="title">title</param>
        /// <param name="suiteTitle">Nested suites should be separated with &#x60;TAB&#x60; symbol.</param>
        /// <param name="description">description</param>
        /// <param name="preconditions">preconditions</param>
        /// <param name="postconditions">postconditions</param>
        /// <param name="layer">Slug of the layer. You can get it in the System Field settings.</param>
        /// <param name="severity">Slug of the severity. You can get it in the System Field settings.</param>
        /// <param name="priority">Slug of the priority. You can get it in the System Field settings.</param>
        [JsonConstructor]
        public ResultCreateCase(Option<string?> title = default, Option<string?> suiteTitle = default, Option<string?> description = default, Option<string?> preconditions = default, Option<string?> postconditions = default, Option<string?> layer = default, Option<string?> severity = default, Option<string?> priority = default)
        {
            TitleOption = title;
            SuiteTitleOption = suiteTitle;
            DescriptionOption = description;
            PreconditionsOption = preconditions;
            PostconditionsOption = postconditions;
            LayerOption = layer;
            SeverityOption = severity;
            PriorityOption = priority;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of SuiteTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SuiteTitleOption { get; private set; }

        /// <summary>
        /// Nested suites should be separated with &#x60;TAB&#x60; symbol.
        /// </summary>
        /// <value>Nested suites should be separated with &#x60;TAB&#x60; symbol.</value>
        [JsonPropertyName("suite_title")]
        public string? SuiteTitle { get { return this.SuiteTitleOption; } set { this.SuiteTitleOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Preconditions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PreconditionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Preconditions
        /// </summary>
        [JsonPropertyName("preconditions")]
        public string? Preconditions { get { return this.PreconditionsOption; } set { this.PreconditionsOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Postconditions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PostconditionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Postconditions
        /// </summary>
        [JsonPropertyName("postconditions")]
        public string? Postconditions { get { return this.PostconditionsOption; } set { this.PostconditionsOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Layer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LayerOption { get; private set; }

        /// <summary>
        /// Slug of the layer. You can get it in the System Field settings.
        /// </summary>
        /// <value>Slug of the layer. You can get it in the System Field settings.</value>
        [JsonPropertyName("layer")]
        public string? Layer { get { return this.LayerOption; } set { this.LayerOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Severity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SeverityOption { get; private set; }

        /// <summary>
        /// Slug of the severity. You can get it in the System Field settings.
        /// </summary>
        /// <value>Slug of the severity. You can get it in the System Field settings.</value>
        [JsonPropertyName("severity")]
        public string? Severity { get { return this.SeverityOption; } set { this.SeverityOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Priority
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PriorityOption { get; private set; }

        /// <summary>
        /// Slug of the priority. You can get it in the System Field settings.
        /// </summary>
        /// <value>Slug of the priority. You can get it in the System Field settings.</value>
        [JsonPropertyName("priority")]
        public string? Priority { get { return this.PriorityOption; } set { this.PriorityOption = new Option<string?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResultCreateCase {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  SuiteTitle: ").Append(SuiteTitle).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Preconditions: ").Append(Preconditions).Append("\n");
            sb.Append("  Postconditions: ").Append(Postconditions).Append("\n");
            sb.Append("  Layer: ").Append(Layer).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResultCreateCase" />
    /// </summary>
    public class ResultCreateCaseJsonConverter : JsonConverter<ResultCreateCase>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResultCreateCase" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResultCreateCase Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<string?> suiteTitle = default;
            Option<string?> description = default;
            Option<string?> preconditions = default;
            Option<string?> postconditions = default;
            Option<string?> layer = default;
            Option<string?> severity = default;
            Option<string?> priority = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "suite_title":
                            suiteTitle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "preconditions":
                            preconditions = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "postconditions":
                            postconditions = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "layer":
                            layer = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "severity":
                            severity = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "priority":
                            priority = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class ResultCreateCase.");

            if (layer.IsSet && layer.Value == null)
                throw new ArgumentNullException(nameof(layer), "Property is not nullable for class ResultCreateCase.");

            if (severity.IsSet && severity.Value == null)
                throw new ArgumentNullException(nameof(severity), "Property is not nullable for class ResultCreateCase.");

            if (priority.IsSet && priority.Value == null)
                throw new ArgumentNullException(nameof(priority), "Property is not nullable for class ResultCreateCase.");

            return new ResultCreateCase(title, suiteTitle, description, preconditions, postconditions, layer, severity, priority);
        }

        /// <summary>
        /// Serializes a <see cref="ResultCreateCase" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultCreateCase"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResultCreateCase resultCreateCase, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, resultCreateCase, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResultCreateCase" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultCreateCase"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResultCreateCase resultCreateCase, JsonSerializerOptions jsonSerializerOptions)
        {
            if (resultCreateCase.TitleOption.IsSet && resultCreateCase.Title == null)
                throw new ArgumentNullException(nameof(resultCreateCase.Title), "Property is required for class ResultCreateCase.");

            if (resultCreateCase.LayerOption.IsSet && resultCreateCase.Layer == null)
                throw new ArgumentNullException(nameof(resultCreateCase.Layer), "Property is required for class ResultCreateCase.");

            if (resultCreateCase.SeverityOption.IsSet && resultCreateCase.Severity == null)
                throw new ArgumentNullException(nameof(resultCreateCase.Severity), "Property is required for class ResultCreateCase.");

            if (resultCreateCase.PriorityOption.IsSet && resultCreateCase.Priority == null)
                throw new ArgumentNullException(nameof(resultCreateCase.Priority), "Property is required for class ResultCreateCase.");

            if (resultCreateCase.TitleOption.IsSet)
                writer.WriteString("title", resultCreateCase.Title);

            if (resultCreateCase.SuiteTitleOption.IsSet)
                if (resultCreateCase.SuiteTitleOption.Value != null)
                    writer.WriteString("suite_title", resultCreateCase.SuiteTitle);
                else
                    writer.WriteNull("suite_title");

            if (resultCreateCase.DescriptionOption.IsSet)
                if (resultCreateCase.DescriptionOption.Value != null)
                    writer.WriteString("description", resultCreateCase.Description);
                else
                    writer.WriteNull("description");

            if (resultCreateCase.PreconditionsOption.IsSet)
                if (resultCreateCase.PreconditionsOption.Value != null)
                    writer.WriteString("preconditions", resultCreateCase.Preconditions);
                else
                    writer.WriteNull("preconditions");

            if (resultCreateCase.PostconditionsOption.IsSet)
                if (resultCreateCase.PostconditionsOption.Value != null)
                    writer.WriteString("postconditions", resultCreateCase.Postconditions);
                else
                    writer.WriteNull("postconditions");

            if (resultCreateCase.LayerOption.IsSet)
                writer.WriteString("layer", resultCreateCase.Layer);

            if (resultCreateCase.SeverityOption.IsSet)
                writer.WriteString("severity", resultCreateCase.Severity);

            if (resultCreateCase.PriorityOption.IsSet)
                writer.WriteString("priority", resultCreateCase.Priority);
        }
    }
}
