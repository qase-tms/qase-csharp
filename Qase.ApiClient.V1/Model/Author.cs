// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// Author
    /// </summary>
    public partial class Author : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Author" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="authorId">authorId</param>
        /// <param name="entityType">entityType</param>
        /// <param name="entityId">entityId</param>
        /// <param name="email">email</param>
        /// <param name="name">name</param>
        /// <param name="isActive">isActive</param>
        [JsonConstructor]
        public Author(Option<long?> id = default, Option<long?> authorId = default, Option<string?> entityType = default, Option<long?> entityId = default, Option<string?> email = default, Option<string?> name = default, Option<bool?> isActive = default)
        {
            IdOption = id;
            AuthorIdOption = authorId;
            EntityTypeOption = entityType;
            EntityIdOption = entityId;
            EmailOption = email;
            NameOption = name;
            IsActiveOption = isActive;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public long? Id { get { return this.IdOption; } set { this.IdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of AuthorId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AuthorIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets AuthorId
        /// </summary>
        [JsonPropertyName("author_id")]
        public long? AuthorId { get { return this.AuthorIdOption; } set { this.AuthorIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of EntityType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EntityTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [JsonPropertyName("entity_type")]
        public string? EntityType { get { return this.EntityTypeOption; } set { this.EntityTypeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of EntityId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EntityIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets EntityId
        /// </summary>
        [JsonPropertyName("entity_id")]
        public long? EntityId { get { return this.EntityIdOption; } set { this.EntityIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [JsonPropertyName("is_active")]
        public bool? IsActive { get { return this.IsActiveOption; } set { this.IsActiveOption = new Option<bool?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Author {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AuthorId: ").Append(AuthorId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Author" />
    /// </summary>
    public class AuthorJsonConverter : JsonConverter<Author>
    {
        /// <summary>
        /// Deserializes json to <see cref="Author" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Author Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<long?> authorId = default;
            Option<string?> entityType = default;
            Option<long?> entityId = default;
            Option<string?> email = default;
            Option<string?> name = default;
            Option<bool?> isActive = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "author_id":
                            authorId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "entity_type":
                            entityType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "entity_id":
                            entityId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_active":
                            isActive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Author.");

            if (authorId.IsSet && authorId.Value == null)
                throw new ArgumentNullException(nameof(authorId), "Property is not nullable for class Author.");

            if (entityType.IsSet && entityType.Value == null)
                throw new ArgumentNullException(nameof(entityType), "Property is not nullable for class Author.");

            if (entityId.IsSet && entityId.Value == null)
                throw new ArgumentNullException(nameof(entityId), "Property is not nullable for class Author.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class Author.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Author.");

            if (isActive.IsSet && isActive.Value == null)
                throw new ArgumentNullException(nameof(isActive), "Property is not nullable for class Author.");

            return new Author(id, authorId, entityType, entityId, email, name, isActive);
        }

        /// <summary>
        /// Serializes a <see cref="Author" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="author"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Author author, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, author, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Author" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="author"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Author author, JsonSerializerOptions jsonSerializerOptions)
        {
            if (author.EntityTypeOption.IsSet && author.EntityType == null)
                throw new ArgumentNullException(nameof(author.EntityType), "Property is required for class Author.");

            if (author.EmailOption.IsSet && author.Email == null)
                throw new ArgumentNullException(nameof(author.Email), "Property is required for class Author.");

            if (author.NameOption.IsSet && author.Name == null)
                throw new ArgumentNullException(nameof(author.Name), "Property is required for class Author.");

            if (author.IdOption.IsSet)
                writer.WriteNumber("id", author.IdOption.Value!.Value);

            if (author.AuthorIdOption.IsSet)
                writer.WriteNumber("author_id", author.AuthorIdOption.Value!.Value);

            if (author.EntityTypeOption.IsSet)
                writer.WriteString("entity_type", author.EntityType);

            if (author.EntityIdOption.IsSet)
                writer.WriteNumber("entity_id", author.EntityIdOption.Value!.Value);

            if (author.EmailOption.IsSet)
                writer.WriteString("email", author.Email);

            if (author.NameOption.IsSet)
                writer.WriteString("name", author.Name);

            if (author.IsActiveOption.IsSet)
                writer.WriteBoolean("is_active", author.IsActiveOption.Value!.Value);
        }
    }
}
