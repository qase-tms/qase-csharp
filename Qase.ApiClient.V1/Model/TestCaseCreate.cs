// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// TestCaseCreate
    /// </summary>
    public partial class TestCaseCreate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestCaseCreate" /> class.
        /// </summary>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="preconditions">preconditions</param>
        /// <param name="postconditions">postconditions</param>
        /// <param name="severity">severity</param>
        /// <param name="priority">priority</param>
        /// <param name="behavior">behavior</param>
        /// <param name="type">type</param>
        /// <param name="layer">layer</param>
        /// <param name="isFlaky">isFlaky</param>
        /// <param name="suiteId">suiteId</param>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="automation">automation</param>
        /// <param name="status">status</param>
        /// <param name="attachments">A list of Attachment hashes.</param>
        /// <param name="steps">steps</param>
        /// <param name="tags">tags</param>
        /// <param name="params">params</param>
        /// <param name="customField">A map of custom fields values (id &#x3D;&gt; value)</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public TestCaseCreate(string title, Option<string?> description = default, Option<string?> preconditions = default, Option<string?> postconditions = default, Option<int?> severity = default, Option<int?> priority = default, Option<int?> behavior = default, Option<int?> type = default, Option<int?> layer = default, Option<int?> isFlaky = default, Option<long?> suiteId = default, Option<long?> milestoneId = default, Option<int?> automation = default, Option<int?> status = default, Option<List<string>?> attachments = default, Option<List<TestStepCreate>?> steps = default, Option<List<string>?> tags = default, Option<Dictionary<string, List<string>>?> @params = default, Option<Dictionary<string, string>?> customField = default, Option<string?> createdAt = default, Option<string?> updatedAt = default)
        {
            Title = title;
            DescriptionOption = description;
            PreconditionsOption = preconditions;
            PostconditionsOption = postconditions;
            SeverityOption = severity;
            PriorityOption = priority;
            BehaviorOption = behavior;
            TypeOption = type;
            LayerOption = layer;
            IsFlakyOption = isFlaky;
            SuiteIdOption = suiteId;
            MilestoneIdOption = milestoneId;
            AutomationOption = automation;
            StatusOption = status;
            AttachmentsOption = attachments;
            StepsOption = steps;
            TagsOption = tags;
            ParamsOption = @params;
            CustomFieldOption = customField;
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Preconditions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PreconditionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Preconditions
        /// </summary>
        [JsonPropertyName("preconditions")]
        public string? Preconditions { get { return this.PreconditionsOption; } set { this.PreconditionsOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Postconditions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PostconditionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Postconditions
        /// </summary>
        [JsonPropertyName("postconditions")]
        public string? Postconditions { get { return this.PostconditionsOption; } set { this.PostconditionsOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Severity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SeverityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [JsonPropertyName("severity")]
        public int? Severity { get { return this.SeverityOption; } set { this.SeverityOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Priority
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PriorityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [JsonPropertyName("priority")]
        public int? Priority { get { return this.PriorityOption; } set { this.PriorityOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Behavior
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BehaviorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Behavior
        /// </summary>
        [JsonPropertyName("behavior")]
        public int? Behavior { get { return this.BehaviorOption; } set { this.BehaviorOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public int? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Layer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LayerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Layer
        /// </summary>
        [JsonPropertyName("layer")]
        public int? Layer { get { return this.LayerOption; } set { this.LayerOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of IsFlaky
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IsFlakyOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsFlaky
        /// </summary>
        [JsonPropertyName("is_flaky")]
        public int? IsFlaky { get { return this.IsFlakyOption; } set { this.IsFlakyOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of SuiteId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SuiteIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SuiteId
        /// </summary>
        [JsonPropertyName("suite_id")]
        public long? SuiteId { get { return this.SuiteIdOption; } set { this.SuiteIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of MilestoneId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> MilestoneIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets MilestoneId
        /// </summary>
        [JsonPropertyName("milestone_id")]
        public long? MilestoneId { get { return this.MilestoneIdOption; } set { this.MilestoneIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Automation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AutomationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Automation
        /// </summary>
        [JsonPropertyName("automation")]
        public int? Automation { get { return this.AutomationOption; } set { this.AutomationOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public int? Status { get { return this.StatusOption; } set { this.StatusOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Attachments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> AttachmentsOption { get; private set; }

        /// <summary>
        /// A list of Attachment hashes.
        /// </summary>
        /// <value>A list of Attachment hashes.</value>
        [JsonPropertyName("attachments")]
        public List<string>? Attachments { get { return this.AttachmentsOption; } set { this.AttachmentsOption = new Option<List<string>?>(value); } }

        /// <summary>
        /// Used to track the state of Steps
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<TestStepCreate>?> StepsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [JsonPropertyName("steps")]
        public List<TestStepCreate>? Steps { get { return this.StepsOption; } set { this.StepsOption = new Option<List<TestStepCreate>?>(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> TagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public List<string>? Tags { get { return this.TagsOption; } set { this.TagsOption = new Option<List<string>?>(value); } }

        /// <summary>
        /// Used to track the state of Params
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, List<string>>?> ParamsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Params
        /// </summary>
        [JsonPropertyName("params")]
        public Dictionary<string, List<string>>? Params { get { return this.ParamsOption; } set { this.ParamsOption = new Option<Dictionary<string, List<string>>?>(value); } }

        /// <summary>
        /// Used to track the state of CustomField
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> CustomFieldOption { get; private set; }

        /// <summary>
        /// A map of custom fields values (id &#x3D;&gt; value)
        /// </summary>
        /// <value>A map of custom fields values (id &#x3D;&gt; value)</value>
        [JsonPropertyName("custom_field")]
        public Dictionary<string, string>? CustomField { get { return this.CustomFieldOption; } set { this.CustomFieldOption = new Option<Dictionary<string, string>?>(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public string? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new Option<string?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestCaseCreate {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Preconditions: ").Append(Preconditions).Append("\n");
            sb.Append("  Postconditions: ").Append(Postconditions).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Behavior: ").Append(Behavior).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Layer: ").Append(Layer).Append("\n");
            sb.Append("  IsFlaky: ").Append(IsFlaky).Append("\n");
            sb.Append("  SuiteId: ").Append(SuiteId).Append("\n");
            sb.Append("  MilestoneId: ").Append(MilestoneId).Append("\n");
            sb.Append("  Automation: ").Append(Automation).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  CustomField: ").Append(CustomField).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Title, length must be less than 255.", new [] { "Title" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TestCaseCreate" />
    /// </summary>
    public class TestCaseCreateJsonConverter : JsonConverter<TestCaseCreate>
    {
        /// <summary>
        /// Deserializes json to <see cref="TestCaseCreate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TestCaseCreate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<string?> description = default;
            Option<string?> preconditions = default;
            Option<string?> postconditions = default;
            Option<int?> severity = default;
            Option<int?> priority = default;
            Option<int?> behavior = default;
            Option<int?> type = default;
            Option<int?> layer = default;
            Option<int?> isFlaky = default;
            Option<long?> suiteId = default;
            Option<long?> milestoneId = default;
            Option<int?> automation = default;
            Option<int?> status = default;
            Option<List<string>?> attachments = default;
            Option<List<TestStepCreate>?> steps = default;
            Option<List<string>?> tags = default;
            Option<Dictionary<string, List<string>>?> varParams = default;
            Option<Dictionary<string, string>?> customField = default;
            Option<string?> createdAt = default;
            Option<string?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "preconditions":
                            preconditions = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "postconditions":
                            postconditions = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "severity":
                            severity = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "priority":
                            priority = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "behavior":
                            behavior = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "type":
                            type = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "layer":
                            layer = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "is_flaky":
                            isFlaky = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "suite_id":
                            suiteId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "milestone_id":
                            milestoneId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "automation":
                            automation = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "status":
                            status = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "attachments":
                            attachments = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "steps":
                            steps = new Option<List<TestStepCreate>?>(JsonSerializer.Deserialize<List<TestStepCreate>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tags":
                            tags = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "params":
                            varParams = new Option<Dictionary<string, List<string>>?>(JsonSerializer.Deserialize<Dictionary<string, List<string>>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "custom_field":
                            customField = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class TestCaseCreate.", nameof(title));

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class TestCaseCreate.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class TestCaseCreate.");

            if (preconditions.IsSet && preconditions.Value == null)
                throw new ArgumentNullException(nameof(preconditions), "Property is not nullable for class TestCaseCreate.");

            if (postconditions.IsSet && postconditions.Value == null)
                throw new ArgumentNullException(nameof(postconditions), "Property is not nullable for class TestCaseCreate.");

            if (severity.IsSet && severity.Value == null)
                throw new ArgumentNullException(nameof(severity), "Property is not nullable for class TestCaseCreate.");

            if (priority.IsSet && priority.Value == null)
                throw new ArgumentNullException(nameof(priority), "Property is not nullable for class TestCaseCreate.");

            if (behavior.IsSet && behavior.Value == null)
                throw new ArgumentNullException(nameof(behavior), "Property is not nullable for class TestCaseCreate.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class TestCaseCreate.");

            if (layer.IsSet && layer.Value == null)
                throw new ArgumentNullException(nameof(layer), "Property is not nullable for class TestCaseCreate.");

            if (isFlaky.IsSet && isFlaky.Value == null)
                throw new ArgumentNullException(nameof(isFlaky), "Property is not nullable for class TestCaseCreate.");

            if (suiteId.IsSet && suiteId.Value == null)
                throw new ArgumentNullException(nameof(suiteId), "Property is not nullable for class TestCaseCreate.");

            if (milestoneId.IsSet && milestoneId.Value == null)
                throw new ArgumentNullException(nameof(milestoneId), "Property is not nullable for class TestCaseCreate.");

            if (automation.IsSet && automation.Value == null)
                throw new ArgumentNullException(nameof(automation), "Property is not nullable for class TestCaseCreate.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class TestCaseCreate.");

            if (attachments.IsSet && attachments.Value == null)
                throw new ArgumentNullException(nameof(attachments), "Property is not nullable for class TestCaseCreate.");

            if (steps.IsSet && steps.Value == null)
                throw new ArgumentNullException(nameof(steps), "Property is not nullable for class TestCaseCreate.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class TestCaseCreate.");

            if (customField.IsSet && customField.Value == null)
                throw new ArgumentNullException(nameof(customField), "Property is not nullable for class TestCaseCreate.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class TestCaseCreate.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class TestCaseCreate.");

            return new TestCaseCreate(title.Value!, description, preconditions, postconditions, severity, priority, behavior, type, layer, isFlaky, suiteId, milestoneId, automation, status, attachments, steps, tags, varParams, customField, createdAt, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="TestCaseCreate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="testCaseCreate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TestCaseCreate testCaseCreate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, testCaseCreate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TestCaseCreate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="testCaseCreate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TestCaseCreate testCaseCreate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (testCaseCreate.Title == null)
                throw new ArgumentNullException(nameof(testCaseCreate.Title), "Property is required for class TestCaseCreate.");

            if (testCaseCreate.DescriptionOption.IsSet && testCaseCreate.Description == null)
                throw new ArgumentNullException(nameof(testCaseCreate.Description), "Property is required for class TestCaseCreate.");

            if (testCaseCreate.PreconditionsOption.IsSet && testCaseCreate.Preconditions == null)
                throw new ArgumentNullException(nameof(testCaseCreate.Preconditions), "Property is required for class TestCaseCreate.");

            if (testCaseCreate.PostconditionsOption.IsSet && testCaseCreate.Postconditions == null)
                throw new ArgumentNullException(nameof(testCaseCreate.Postconditions), "Property is required for class TestCaseCreate.");

            if (testCaseCreate.AttachmentsOption.IsSet && testCaseCreate.Attachments == null)
                throw new ArgumentNullException(nameof(testCaseCreate.Attachments), "Property is required for class TestCaseCreate.");

            if (testCaseCreate.StepsOption.IsSet && testCaseCreate.Steps == null)
                throw new ArgumentNullException(nameof(testCaseCreate.Steps), "Property is required for class TestCaseCreate.");

            if (testCaseCreate.TagsOption.IsSet && testCaseCreate.Tags == null)
                throw new ArgumentNullException(nameof(testCaseCreate.Tags), "Property is required for class TestCaseCreate.");

            if (testCaseCreate.CustomFieldOption.IsSet && testCaseCreate.CustomField == null)
                throw new ArgumentNullException(nameof(testCaseCreate.CustomField), "Property is required for class TestCaseCreate.");

            if (testCaseCreate.CreatedAtOption.IsSet && testCaseCreate.CreatedAt == null)
                throw new ArgumentNullException(nameof(testCaseCreate.CreatedAt), "Property is required for class TestCaseCreate.");

            if (testCaseCreate.UpdatedAtOption.IsSet && testCaseCreate.UpdatedAt == null)
                throw new ArgumentNullException(nameof(testCaseCreate.UpdatedAt), "Property is required for class TestCaseCreate.");

            writer.WriteString("title", testCaseCreate.Title);

            if (testCaseCreate.DescriptionOption.IsSet)
                writer.WriteString("description", testCaseCreate.Description);

            if (testCaseCreate.PreconditionsOption.IsSet)
                writer.WriteString("preconditions", testCaseCreate.Preconditions);

            if (testCaseCreate.PostconditionsOption.IsSet)
                writer.WriteString("postconditions", testCaseCreate.Postconditions);

            if (testCaseCreate.SeverityOption.IsSet)
                writer.WriteNumber("severity", testCaseCreate.SeverityOption.Value!.Value);

            if (testCaseCreate.PriorityOption.IsSet)
                writer.WriteNumber("priority", testCaseCreate.PriorityOption.Value!.Value);

            if (testCaseCreate.BehaviorOption.IsSet)
                writer.WriteNumber("behavior", testCaseCreate.BehaviorOption.Value!.Value);

            if (testCaseCreate.TypeOption.IsSet)
                writer.WriteNumber("type", testCaseCreate.TypeOption.Value!.Value);

            if (testCaseCreate.LayerOption.IsSet)
                writer.WriteNumber("layer", testCaseCreate.LayerOption.Value!.Value);

            if (testCaseCreate.IsFlakyOption.IsSet)
                writer.WriteNumber("is_flaky", testCaseCreate.IsFlakyOption.Value!.Value);

            if (testCaseCreate.SuiteIdOption.IsSet)
                writer.WriteNumber("suite_id", testCaseCreate.SuiteIdOption.Value!.Value);

            if (testCaseCreate.MilestoneIdOption.IsSet)
                writer.WriteNumber("milestone_id", testCaseCreate.MilestoneIdOption.Value!.Value);

            if (testCaseCreate.AutomationOption.IsSet)
                writer.WriteNumber("automation", testCaseCreate.AutomationOption.Value!.Value);

            if (testCaseCreate.StatusOption.IsSet)
                writer.WriteNumber("status", testCaseCreate.StatusOption.Value!.Value);

            if (testCaseCreate.AttachmentsOption.IsSet)
            {
                writer.WritePropertyName("attachments");
                JsonSerializer.Serialize(writer, testCaseCreate.Attachments, jsonSerializerOptions);
            }
            if (testCaseCreate.StepsOption.IsSet)
            {
                writer.WritePropertyName("steps");
                JsonSerializer.Serialize(writer, testCaseCreate.Steps, jsonSerializerOptions);
            }
            if (testCaseCreate.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, testCaseCreate.Tags, jsonSerializerOptions);
            }
            if (testCaseCreate.ParamsOption.IsSet)
                if (testCaseCreate.ParamsOption.Value != null)
                {
                    writer.WritePropertyName("params");
                    JsonSerializer.Serialize(writer, testCaseCreate.Params, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("params");
            if (testCaseCreate.CustomFieldOption.IsSet)
            {
                writer.WritePropertyName("custom_field");
                JsonSerializer.Serialize(writer, testCaseCreate.CustomField, jsonSerializerOptions);
            }
            if (testCaseCreate.CreatedAtOption.IsSet)
                writer.WriteString("created_at", testCaseCreate.CreatedAt);

            if (testCaseCreate.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", testCaseCreate.UpdatedAt);
        }
    }
}
