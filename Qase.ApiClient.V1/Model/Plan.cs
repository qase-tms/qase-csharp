// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// Plan
    /// </summary>
    public partial class Plan : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Plan" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="casesCount">casesCount</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="created">Deprecated, use the &#x60;created_at&#x60; property instead.</param>
        /// <param name="updated">Deprecated, use the &#x60;updated_at&#x60; property instead.</param>
        [JsonConstructor]
        public Plan(Option<long?> id = default, Option<string?> title = default, Option<string?> description = default, Option<int?> casesCount = default, Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default, Option<string?> created = default, Option<string?> updated = default)
        {
            IdOption = id;
            TitleOption = title;
            DescriptionOption = description;
            CasesCountOption = casesCount;
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            CreatedOption = created;
            UpdatedOption = updated;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public long? Id { get { return this.IdOption; } set { this.IdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of CasesCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CasesCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets CasesCount
        /// </summary>
        [JsonPropertyName("cases_count")]
        public int? CasesCount { get { return this.CasesCountOption; } set { this.CasesCountOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2021-12-30T19:23:59Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2021-12-30T19:23:59Z</example> */
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of Created
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedOption { get; private set; }

        /// <summary>
        /// Deprecated, use the &#x60;created_at&#x60; property instead.
        /// </summary>
        /// <value>Deprecated, use the &#x60;created_at&#x60; property instead.</value>
        /* <example>2021-12-30 19:23:59</example> */
        [JsonPropertyName("created")]
        [Obsolete]
        public string? Created { get { return this.CreatedOption; } set { this.CreatedOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Updated
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedOption { get; private set; }

        /// <summary>
        /// Deprecated, use the &#x60;updated_at&#x60; property instead.
        /// </summary>
        /// <value>Deprecated, use the &#x60;updated_at&#x60; property instead.</value>
        /* <example>2021-12-30 19:23:59</example> */
        [JsonPropertyName("updated")]
        [Obsolete]
        public string? Updated { get { return this.UpdatedOption; } set { this.UpdatedOption = new Option<string?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Plan {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CasesCount: ").Append(CasesCount).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Plan" />
    /// </summary>
    public class PlanJsonConverter : JsonConverter<Plan>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Plan" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Plan Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<string?> title = default;
            Option<string?> description = default;
            Option<int?> casesCount = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<string?> created = default;
            Option<string?> updated = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "cases_count":
                            casesCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "created":
                            created = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated":
                            updated = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Plan.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class Plan.");

            if (casesCount.IsSet && casesCount.Value == null)
                throw new ArgumentNullException(nameof(casesCount), "Property is not nullable for class Plan.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class Plan.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class Plan.");

            if (created.IsSet && created.Value == null)
                throw new ArgumentNullException(nameof(created), "Property is not nullable for class Plan.");

            if (updated.IsSet && updated.Value == null)
                throw new ArgumentNullException(nameof(updated), "Property is not nullable for class Plan.");

            return new Plan(id, title, description, casesCount, createdAt, updatedAt, created, updated);
        }

        /// <summary>
        /// Serializes a <see cref="Plan" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="plan"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Plan plan, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, plan, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Plan" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="plan"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Plan plan, JsonSerializerOptions jsonSerializerOptions)
        {
            if (plan.TitleOption.IsSet && plan.Title == null)
                throw new ArgumentNullException(nameof(plan.Title), "Property is required for class Plan.");

            if (plan.CreatedOption.IsSet && plan.Created == null)
                throw new ArgumentNullException(nameof(plan.Created), "Property is required for class Plan.");

            if (plan.UpdatedOption.IsSet && plan.Updated == null)
                throw new ArgumentNullException(nameof(plan.Updated), "Property is required for class Plan.");

            if (plan.IdOption.IsSet)
                writer.WriteNumber("id", plan.IdOption.Value!.Value);

            if (plan.TitleOption.IsSet)
                writer.WriteString("title", plan.Title);

            if (plan.DescriptionOption.IsSet)
                if (plan.DescriptionOption.Value != null)
                    writer.WriteString("description", plan.Description);
                else
                    writer.WriteNull("description");

            if (plan.CasesCountOption.IsSet)
                writer.WriteNumber("cases_count", plan.CasesCountOption.Value!.Value);

            if (plan.CreatedAtOption.IsSet)
                writer.WriteString("created_at", plan.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (plan.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", plan.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));

            if (plan.CreatedOption.IsSet)
                writer.WriteString("created", plan.Created);

            if (plan.UpdatedOption.IsSet)
                writer.WriteString("updated", plan.Updated);
        }
    }
}
