// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// ResultUpdate
    /// </summary>
    public partial class ResultUpdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultUpdate" /> class.
        /// </summary>
        /// <param name="status">status</param>
        /// <param name="timeMs">timeMs</param>
        /// <param name="defect">defect</param>
        /// <param name="attachments">attachments</param>
        /// <param name="stacktrace">stacktrace</param>
        /// <param name="comment">comment</param>
        /// <param name="steps">steps</param>
        [JsonConstructor]
        public ResultUpdate(Option<StatusEnum?> status = default, Option<long?> timeMs = default, Option<bool?> defect = default, Option<List<string>?> attachments = default, Option<string?> stacktrace = default, Option<string?> comment = default, Option<List<TestStepResultCreate>?> steps = default)
        {
            StatusOption = status;
            TimeMsOption = timeMs;
            DefectOption = defect;
            AttachmentsOption = attachments;
            StacktraceOption = stacktrace;
            CommentOption = comment;
            StepsOption = steps;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Status
        /// </summary>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum InProgress for value: in_progress
            /// </summary>
            InProgress = 1,

            /// <summary>
            /// Enum Passed for value: passed
            /// </summary>
            Passed = 2,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            Failed = 3,

            /// <summary>
            /// Enum Blocked for value: blocked
            /// </summary>
            Blocked = 4,

            /// <summary>
            /// Enum Skipped for value: skipped
            /// </summary>
            Skipped = 5
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("in_progress"))
                return StatusEnum.InProgress;

            if (value.Equals("passed"))
                return StatusEnum.Passed;

            if (value.Equals("failed"))
                return StatusEnum.Failed;

            if (value.Equals("blocked"))
                return StatusEnum.Blocked;

            if (value.Equals("skipped"))
                return StatusEnum.Skipped;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("in_progress"))
                return StatusEnum.InProgress;

            if (value.Equals("passed"))
                return StatusEnum.Passed;

            if (value.Equals("failed"))
                return StatusEnum.Failed;

            if (value.Equals("blocked"))
                return StatusEnum.Blocked;

            if (value.Equals("skipped"))
                return StatusEnum.Skipped;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum? value)
        {
            if (value == StatusEnum.InProgress)
                return "in_progress";

            if (value == StatusEnum.Passed)
                return "passed";

            if (value == StatusEnum.Failed)
                return "failed";

            if (value == StatusEnum.Blocked)
                return "blocked";

            if (value == StatusEnum.Skipped)
                return "skipped";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StatusEnum?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public StatusEnum? Status { get { return this.StatusOption; } set { this.StatusOption = new Option<StatusEnum?>(value); } }

        /// <summary>
        /// Used to track the state of TimeMs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TimeMsOption { get; private set; }

        /// <summary>
        /// Gets or Sets TimeMs
        /// </summary>
        [JsonPropertyName("time_ms")]
        public long? TimeMs { get { return this.TimeMsOption; } set { this.TimeMsOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Defect
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DefectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Defect
        /// </summary>
        [JsonPropertyName("defect")]
        public bool? Defect { get { return this.DefectOption; } set { this.DefectOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Attachments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> AttachmentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [JsonPropertyName("attachments")]
        public List<string>? Attachments { get { return this.AttachmentsOption; } set { this.AttachmentsOption = new Option<List<string>?>(value); } }

        /// <summary>
        /// Used to track the state of Stacktrace
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StacktraceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Stacktrace
        /// </summary>
        [JsonPropertyName("stacktrace")]
        public string? Stacktrace { get { return this.StacktraceOption; } set { this.StacktraceOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Steps
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<TestStepResultCreate>?> StepsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [JsonPropertyName("steps")]
        public List<TestStepResultCreate>? Steps { get { return this.StepsOption; } set { this.StepsOption = new Option<List<TestStepResultCreate>?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResultUpdate {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TimeMs: ").Append(TimeMs).Append("\n");
            sb.Append("  Defect: ").Append(Defect).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Stacktrace: ").Append(Stacktrace).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TimeMs (long) maximum
            if (this.TimeMsOption.IsSet && this.TimeMsOption.Value > (long)31536000000)
            {
                yield return new ValidationResult("Invalid value for TimeMs, must be a value less than or equal to 31536000000.", new [] { "TimeMs" });
            }

            // TimeMs (long) minimum
            if (this.TimeMsOption.IsSet && this.TimeMsOption.Value < (long)0)
            {
                yield return new ValidationResult("Invalid value for TimeMs, must be a value greater than or equal to 0.", new [] { "TimeMs" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResultUpdate" />
    /// </summary>
    public class ResultUpdateJsonConverter : JsonConverter<ResultUpdate>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResultUpdate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResultUpdate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ResultUpdate.StatusEnum?> status = default;
            Option<long?> timeMs = default;
            Option<bool?> defect = default;
            Option<List<string>?> attachments = default;
            Option<string?> stacktrace = default;
            Option<string?> comment = default;
            Option<List<TestStepResultCreate>?> steps = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<ResultUpdate.StatusEnum?>(ResultUpdate.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "time_ms":
                            timeMs = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "defect":
                            defect = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "attachments":
                            attachments = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "stacktrace":
                            stacktrace = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "steps":
                            steps = new Option<List<TestStepResultCreate>?>(JsonSerializer.Deserialize<List<TestStepResultCreate>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ResultUpdate.");

            return new ResultUpdate(status, timeMs, defect, attachments, stacktrace, comment, steps);
        }

        /// <summary>
        /// Serializes a <see cref="ResultUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResultUpdate resultUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, resultUpdate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResultUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResultUpdate resultUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            var statusRawValue = ResultUpdate.StatusEnumToJsonValue(resultUpdate.StatusOption.Value!.Value);
            writer.WriteString("status", statusRawValue);
            if (resultUpdate.TimeMsOption.IsSet)
                if (resultUpdate.TimeMsOption.Value != null)
                    writer.WriteNumber("time_ms", resultUpdate.TimeMsOption.Value!.Value);
                else
                    writer.WriteNull("time_ms");

            if (resultUpdate.DefectOption.IsSet)
                if (resultUpdate.DefectOption.Value != null)
                    writer.WriteBoolean("defect", resultUpdate.DefectOption.Value!.Value);
                else
                    writer.WriteNull("defect");

            if (resultUpdate.AttachmentsOption.IsSet)
                if (resultUpdate.AttachmentsOption.Value != null)
                {
                    writer.WritePropertyName("attachments");
                    JsonSerializer.Serialize(writer, resultUpdate.Attachments, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("attachments");
            if (resultUpdate.StacktraceOption.IsSet)
                if (resultUpdate.StacktraceOption.Value != null)
                    writer.WriteString("stacktrace", resultUpdate.Stacktrace);
                else
                    writer.WriteNull("stacktrace");

            if (resultUpdate.CommentOption.IsSet)
                if (resultUpdate.CommentOption.Value != null)
                    writer.WriteString("comment", resultUpdate.Comment);
                else
                    writer.WriteNull("comment");

            if (resultUpdate.StepsOption.IsSet)
                if (resultUpdate.StepsOption.Value != null)
                {
                    writer.WritePropertyName("steps");
                    JsonSerializer.Serialize(writer, resultUpdate.Steps, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("steps");
        }
    }
}
