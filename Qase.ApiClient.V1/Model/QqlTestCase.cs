// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// QqlTestCase
    /// </summary>
    public partial class QqlTestCase : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QqlTestCase" /> class.
        /// </summary>
        /// <param name="testCaseId">testCaseId</param>
        /// <param name="id">id</param>
        /// <param name="position">position</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="preconditions">preconditions</param>
        /// <param name="postconditions">postconditions</param>
        /// <param name="severity">severity</param>
        /// <param name="priority">priority</param>
        /// <param name="type">type</param>
        /// <param name="layer">layer</param>
        /// <param name="isFlaky">isFlaky</param>
        /// <param name="behavior">behavior</param>
        /// <param name="automation">automation</param>
        /// <param name="status">status</param>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="suiteId">suiteId</param>
        /// <param name="customFields">customFields</param>
        /// <param name="attachments">attachments</param>
        /// <param name="stepsType">stepsType</param>
        /// <param name="steps">steps</param>
        /// <param name="params">params</param>
        /// <param name="tags">tags</param>
        /// <param name="memberId">Deprecated, use &#x60;author_id&#x60; instead.</param>
        /// <param name="authorId">authorId</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="updatedBy">Author ID of the last update.</param>
        [JsonConstructor]
        public QqlTestCase(long testCaseId, Option<long?> id = default, Option<int?> position = default, Option<string?> title = default, Option<string?> description = default, Option<string?> preconditions = default, Option<string?> postconditions = default, Option<int?> severity = default, Option<int?> priority = default, Option<int?> type = default, Option<int?> layer = default, Option<int?> isFlaky = default, Option<int?> behavior = default, Option<int?> automation = default, Option<int?> status = default, Option<long?> milestoneId = default, Option<long?> suiteId = default, Option<List<CustomFieldValue>?> customFields = default, Option<List<Attachment>?> attachments = default, Option<string?> stepsType = default, Option<List<TestStep>?> steps = default, Option<TestCaseParams?> @params = default, Option<List<TagValue>?> tags = default, Option<long?> memberId = default, Option<long?> authorId = default, Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default, Option<long?> updatedBy = default)
        {
            TestCaseId = testCaseId;
            IdOption = id;
            PositionOption = position;
            TitleOption = title;
            DescriptionOption = description;
            PreconditionsOption = preconditions;
            PostconditionsOption = postconditions;
            SeverityOption = severity;
            PriorityOption = priority;
            TypeOption = type;
            LayerOption = layer;
            IsFlakyOption = isFlaky;
            BehaviorOption = behavior;
            AutomationOption = automation;
            StatusOption = status;
            MilestoneIdOption = milestoneId;
            SuiteIdOption = suiteId;
            CustomFieldsOption = customFields;
            AttachmentsOption = attachments;
            StepsTypeOption = stepsType;
            StepsOption = steps;
            ParamsOption = @params;
            TagsOption = tags;
            MemberIdOption = memberId;
            AuthorIdOption = authorId;
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            UpdatedByOption = updatedBy;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets TestCaseId
        /// </summary>
        [JsonPropertyName("test_case_id")]
        public long TestCaseId { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public long? Id { get { return this.IdOption; } set { this.IdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Position
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PositionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [JsonPropertyName("position")]
        public int? Position { get { return this.PositionOption; } set { this.PositionOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Preconditions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PreconditionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Preconditions
        /// </summary>
        [JsonPropertyName("preconditions")]
        public string? Preconditions { get { return this.PreconditionsOption; } set { this.PreconditionsOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Postconditions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PostconditionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Postconditions
        /// </summary>
        [JsonPropertyName("postconditions")]
        public string? Postconditions { get { return this.PostconditionsOption; } set { this.PostconditionsOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Severity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SeverityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [JsonPropertyName("severity")]
        public int? Severity { get { return this.SeverityOption; } set { this.SeverityOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Priority
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PriorityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [JsonPropertyName("priority")]
        public int? Priority { get { return this.PriorityOption; } set { this.PriorityOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public int? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Layer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LayerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Layer
        /// </summary>
        [JsonPropertyName("layer")]
        public int? Layer { get { return this.LayerOption; } set { this.LayerOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of IsFlaky
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IsFlakyOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsFlaky
        /// </summary>
        [JsonPropertyName("is_flaky")]
        public int? IsFlaky { get { return this.IsFlakyOption; } set { this.IsFlakyOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Behavior
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BehaviorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Behavior
        /// </summary>
        [JsonPropertyName("behavior")]
        public int? Behavior { get { return this.BehaviorOption; } set { this.BehaviorOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Automation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AutomationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Automation
        /// </summary>
        [JsonPropertyName("automation")]
        public int? Automation { get { return this.AutomationOption; } set { this.AutomationOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public int? Status { get { return this.StatusOption; } set { this.StatusOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of MilestoneId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> MilestoneIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets MilestoneId
        /// </summary>
        [JsonPropertyName("milestone_id")]
        public long? MilestoneId { get { return this.MilestoneIdOption; } set { this.MilestoneIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of SuiteId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SuiteIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SuiteId
        /// </summary>
        [JsonPropertyName("suite_id")]
        public long? SuiteId { get { return this.SuiteIdOption; } set { this.SuiteIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of CustomFields
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CustomFieldValue>?> CustomFieldsOption { get; private set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [JsonPropertyName("custom_fields")]
        public List<CustomFieldValue>? CustomFields { get { return this.CustomFieldsOption; } set { this.CustomFieldsOption = new Option<List<CustomFieldValue>?>(value); } }

        /// <summary>
        /// Used to track the state of Attachments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Attachment>?> AttachmentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [JsonPropertyName("attachments")]
        public List<Attachment>? Attachments { get { return this.AttachmentsOption; } set { this.AttachmentsOption = new Option<List<Attachment>?>(value); } }

        /// <summary>
        /// Used to track the state of StepsType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StepsTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets StepsType
        /// </summary>
        [JsonPropertyName("steps_type")]
        public string? StepsType { get { return this.StepsTypeOption; } set { this.StepsTypeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Steps
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<TestStep>?> StepsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [JsonPropertyName("steps")]
        public List<TestStep>? Steps { get { return this.StepsOption; } set { this.StepsOption = new Option<List<TestStep>?>(value); } }

        /// <summary>
        /// Used to track the state of Params
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TestCaseParams?> ParamsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Params
        /// </summary>
        [JsonPropertyName("params")]
        public TestCaseParams? Params { get { return this.ParamsOption; } set { this.ParamsOption = new Option<TestCaseParams?>(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<TagValue>?> TagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public List<TagValue>? Tags { get { return this.TagsOption; } set { this.TagsOption = new Option<List<TagValue>?>(value); } }

        /// <summary>
        /// Used to track the state of MemberId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> MemberIdOption { get; private set; }

        /// <summary>
        /// Deprecated, use &#x60;author_id&#x60; instead.
        /// </summary>
        /// <value>Deprecated, use &#x60;author_id&#x60; instead.</value>
        [JsonPropertyName("member_id")]
        [Obsolete]
        public long? MemberId { get { return this.MemberIdOption; } set { this.MemberIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of AuthorId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AuthorIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets AuthorId
        /// </summary>
        [JsonPropertyName("author_id")]
        public long? AuthorId { get { return this.AuthorIdOption; } set { this.AuthorIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2021-12-30T19:23:59Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2021-12-30T19:23:59Z</example> */
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of UpdatedBy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> UpdatedByOption { get; private set; }

        /// <summary>
        /// Author ID of the last update.
        /// </summary>
        /// <value>Author ID of the last update.</value>
        [JsonPropertyName("updated_by")]
        public long? UpdatedBy { get { return this.UpdatedByOption; } set { this.UpdatedByOption = new Option<long?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QqlTestCase {\n");
            sb.Append("  TestCaseId: ").Append(TestCaseId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Preconditions: ").Append(Preconditions).Append("\n");
            sb.Append("  Postconditions: ").Append(Postconditions).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Layer: ").Append(Layer).Append("\n");
            sb.Append("  IsFlaky: ").Append(IsFlaky).Append("\n");
            sb.Append("  Behavior: ").Append(Behavior).Append("\n");
            sb.Append("  Automation: ").Append(Automation).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  MilestoneId: ").Append(MilestoneId).Append("\n");
            sb.Append("  SuiteId: ").Append(SuiteId).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  StepsType: ").Append(StepsType).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  MemberId: ").Append(MemberId).Append("\n");
            sb.Append("  AuthorId: ").Append(AuthorId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="QqlTestCase" />
    /// </summary>
    public class QqlTestCaseJsonConverter : JsonConverter<QqlTestCase>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="QqlTestCase" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override QqlTestCase Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> testCaseId = default;
            Option<long?> id = default;
            Option<int?> position = default;
            Option<string?> title = default;
            Option<string?> description = default;
            Option<string?> preconditions = default;
            Option<string?> postconditions = default;
            Option<int?> severity = default;
            Option<int?> priority = default;
            Option<int?> type = default;
            Option<int?> layer = default;
            Option<int?> isFlaky = default;
            Option<int?> behavior = default;
            Option<int?> automation = default;
            Option<int?> status = default;
            Option<long?> milestoneId = default;
            Option<long?> suiteId = default;
            Option<List<CustomFieldValue>?> customFields = default;
            Option<List<Attachment>?> attachments = default;
            Option<string?> stepsType = default;
            Option<List<TestStep>?> steps = default;
            Option<TestCaseParams?> varParams = default;
            Option<List<TagValue>?> tags = default;
            Option<long?> memberId = default;
            Option<long?> authorId = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<long?> updatedBy = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "test_case_id":
                            testCaseId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "position":
                            position = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "preconditions":
                            preconditions = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "postconditions":
                            postconditions = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "severity":
                            severity = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "priority":
                            priority = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "type":
                            type = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "layer":
                            layer = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "is_flaky":
                            isFlaky = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "behavior":
                            behavior = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "automation":
                            automation = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "status":
                            status = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "milestone_id":
                            milestoneId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "suite_id":
                            suiteId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "custom_fields":
                            customFields = new Option<List<CustomFieldValue>?>(JsonSerializer.Deserialize<List<CustomFieldValue>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "attachments":
                            attachments = new Option<List<Attachment>?>(JsonSerializer.Deserialize<List<Attachment>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "steps_type":
                            stepsType = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "steps":
                            steps = new Option<List<TestStep>?>(JsonSerializer.Deserialize<List<TestStep>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "params":
                            varParams = new Option<TestCaseParams?>(JsonSerializer.Deserialize<TestCaseParams>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tags":
                            tags = new Option<List<TagValue>?>(JsonSerializer.Deserialize<List<TagValue>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "member_id":
                            memberId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "author_id":
                            authorId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_by":
                            updatedBy = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!testCaseId.IsSet)
                throw new ArgumentException("Property is required for class QqlTestCase.", nameof(testCaseId));

            if (testCaseId.IsSet && testCaseId.Value == null)
                throw new ArgumentNullException(nameof(testCaseId), "Property is not nullable for class QqlTestCase.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class QqlTestCase.");

            if (position.IsSet && position.Value == null)
                throw new ArgumentNullException(nameof(position), "Property is not nullable for class QqlTestCase.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class QqlTestCase.");

            if (severity.IsSet && severity.Value == null)
                throw new ArgumentNullException(nameof(severity), "Property is not nullable for class QqlTestCase.");

            if (priority.IsSet && priority.Value == null)
                throw new ArgumentNullException(nameof(priority), "Property is not nullable for class QqlTestCase.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class QqlTestCase.");

            if (layer.IsSet && layer.Value == null)
                throw new ArgumentNullException(nameof(layer), "Property is not nullable for class QqlTestCase.");

            if (isFlaky.IsSet && isFlaky.Value == null)
                throw new ArgumentNullException(nameof(isFlaky), "Property is not nullable for class QqlTestCase.");

            if (behavior.IsSet && behavior.Value == null)
                throw new ArgumentNullException(nameof(behavior), "Property is not nullable for class QqlTestCase.");

            if (automation.IsSet && automation.Value == null)
                throw new ArgumentNullException(nameof(automation), "Property is not nullable for class QqlTestCase.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class QqlTestCase.");

            if (customFields.IsSet && customFields.Value == null)
                throw new ArgumentNullException(nameof(customFields), "Property is not nullable for class QqlTestCase.");

            if (attachments.IsSet && attachments.Value == null)
                throw new ArgumentNullException(nameof(attachments), "Property is not nullable for class QqlTestCase.");

            if (steps.IsSet && steps.Value == null)
                throw new ArgumentNullException(nameof(steps), "Property is not nullable for class QqlTestCase.");

            if (varParams.IsSet && varParams.Value == null)
                throw new ArgumentNullException(nameof(varParams), "Property is not nullable for class QqlTestCase.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class QqlTestCase.");

            if (memberId.IsSet && memberId.Value == null)
                throw new ArgumentNullException(nameof(memberId), "Property is not nullable for class QqlTestCase.");

            if (authorId.IsSet && authorId.Value == null)
                throw new ArgumentNullException(nameof(authorId), "Property is not nullable for class QqlTestCase.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class QqlTestCase.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class QqlTestCase.");

            if (updatedBy.IsSet && updatedBy.Value == null)
                throw new ArgumentNullException(nameof(updatedBy), "Property is not nullable for class QqlTestCase.");

            return new QqlTestCase(testCaseId.Value!.Value!, id, position, title, description, preconditions, postconditions, severity, priority, type, layer, isFlaky, behavior, automation, status, milestoneId, suiteId, customFields, attachments, stepsType, steps, varParams, tags, memberId, authorId, createdAt, updatedAt, updatedBy);
        }

        /// <summary>
        /// Serializes a <see cref="QqlTestCase" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="qqlTestCase"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, QqlTestCase qqlTestCase, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, qqlTestCase, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="QqlTestCase" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="qqlTestCase"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, QqlTestCase qqlTestCase, JsonSerializerOptions jsonSerializerOptions)
        {
            if (qqlTestCase.TitleOption.IsSet && qqlTestCase.Title == null)
                throw new ArgumentNullException(nameof(qqlTestCase.Title), "Property is required for class QqlTestCase.");

            if (qqlTestCase.CustomFieldsOption.IsSet && qqlTestCase.CustomFields == null)
                throw new ArgumentNullException(nameof(qqlTestCase.CustomFields), "Property is required for class QqlTestCase.");

            if (qqlTestCase.AttachmentsOption.IsSet && qqlTestCase.Attachments == null)
                throw new ArgumentNullException(nameof(qqlTestCase.Attachments), "Property is required for class QqlTestCase.");

            if (qqlTestCase.StepsOption.IsSet && qqlTestCase.Steps == null)
                throw new ArgumentNullException(nameof(qqlTestCase.Steps), "Property is required for class QqlTestCase.");

            if (qqlTestCase.ParamsOption.IsSet && qqlTestCase.Params == null)
                throw new ArgumentNullException(nameof(qqlTestCase.Params), "Property is required for class QqlTestCase.");

            if (qqlTestCase.TagsOption.IsSet && qqlTestCase.Tags == null)
                throw new ArgumentNullException(nameof(qqlTestCase.Tags), "Property is required for class QqlTestCase.");

            writer.WriteNumber("test_case_id", qqlTestCase.TestCaseId);

            if (qqlTestCase.IdOption.IsSet)
                writer.WriteNumber("id", qqlTestCase.IdOption.Value!.Value);

            if (qqlTestCase.PositionOption.IsSet)
                writer.WriteNumber("position", qqlTestCase.PositionOption.Value!.Value);

            if (qqlTestCase.TitleOption.IsSet)
                writer.WriteString("title", qqlTestCase.Title);

            if (qqlTestCase.DescriptionOption.IsSet)
                if (qqlTestCase.DescriptionOption.Value != null)
                    writer.WriteString("description", qqlTestCase.Description);
                else
                    writer.WriteNull("description");

            if (qqlTestCase.PreconditionsOption.IsSet)
                if (qqlTestCase.PreconditionsOption.Value != null)
                    writer.WriteString("preconditions", qqlTestCase.Preconditions);
                else
                    writer.WriteNull("preconditions");

            if (qqlTestCase.PostconditionsOption.IsSet)
                if (qqlTestCase.PostconditionsOption.Value != null)
                    writer.WriteString("postconditions", qqlTestCase.Postconditions);
                else
                    writer.WriteNull("postconditions");

            if (qqlTestCase.SeverityOption.IsSet)
                writer.WriteNumber("severity", qqlTestCase.SeverityOption.Value!.Value);

            if (qqlTestCase.PriorityOption.IsSet)
                writer.WriteNumber("priority", qqlTestCase.PriorityOption.Value!.Value);

            if (qqlTestCase.TypeOption.IsSet)
                writer.WriteNumber("type", qqlTestCase.TypeOption.Value!.Value);

            if (qqlTestCase.LayerOption.IsSet)
                writer.WriteNumber("layer", qqlTestCase.LayerOption.Value!.Value);

            if (qqlTestCase.IsFlakyOption.IsSet)
                writer.WriteNumber("is_flaky", qqlTestCase.IsFlakyOption.Value!.Value);

            if (qqlTestCase.BehaviorOption.IsSet)
                writer.WriteNumber("behavior", qqlTestCase.BehaviorOption.Value!.Value);

            if (qqlTestCase.AutomationOption.IsSet)
                writer.WriteNumber("automation", qqlTestCase.AutomationOption.Value!.Value);

            if (qqlTestCase.StatusOption.IsSet)
                writer.WriteNumber("status", qqlTestCase.StatusOption.Value!.Value);

            if (qqlTestCase.MilestoneIdOption.IsSet)
                if (qqlTestCase.MilestoneIdOption.Value != null)
                    writer.WriteNumber("milestone_id", qqlTestCase.MilestoneIdOption.Value!.Value);
                else
                    writer.WriteNull("milestone_id");

            if (qqlTestCase.SuiteIdOption.IsSet)
                if (qqlTestCase.SuiteIdOption.Value != null)
                    writer.WriteNumber("suite_id", qqlTestCase.SuiteIdOption.Value!.Value);
                else
                    writer.WriteNull("suite_id");

            if (qqlTestCase.CustomFieldsOption.IsSet)
            {
                writer.WritePropertyName("custom_fields");
                JsonSerializer.Serialize(writer, qqlTestCase.CustomFields, jsonSerializerOptions);
            }
            if (qqlTestCase.AttachmentsOption.IsSet)
            {
                writer.WritePropertyName("attachments");
                JsonSerializer.Serialize(writer, qqlTestCase.Attachments, jsonSerializerOptions);
            }
            if (qqlTestCase.StepsTypeOption.IsSet)
                if (qqlTestCase.StepsTypeOption.Value != null)
                    writer.WriteString("steps_type", qqlTestCase.StepsType);
                else
                    writer.WriteNull("steps_type");

            if (qqlTestCase.StepsOption.IsSet)
            {
                writer.WritePropertyName("steps");
                JsonSerializer.Serialize(writer, qqlTestCase.Steps, jsonSerializerOptions);
            }
            if (qqlTestCase.ParamsOption.IsSet)
            {
                writer.WritePropertyName("params");
                JsonSerializer.Serialize(writer, qqlTestCase.Params, jsonSerializerOptions);
            }
            if (qqlTestCase.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, qqlTestCase.Tags, jsonSerializerOptions);
            }
            if (qqlTestCase.MemberIdOption.IsSet)
                writer.WriteNumber("member_id", qqlTestCase.MemberIdOption.Value!.Value);

            if (qqlTestCase.AuthorIdOption.IsSet)
                writer.WriteNumber("author_id", qqlTestCase.AuthorIdOption.Value!.Value);

            if (qqlTestCase.CreatedAtOption.IsSet)
                writer.WriteString("created_at", qqlTestCase.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (qqlTestCase.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", qqlTestCase.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));

            if (qqlTestCase.UpdatedByOption.IsSet)
                writer.WriteNumber("updated_by", qqlTestCase.UpdatedByOption.Value!.Value);
        }
    }
}
