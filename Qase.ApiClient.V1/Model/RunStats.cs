// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// RunStats
    /// </summary>
    public partial class RunStats : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RunStats" /> class.
        /// </summary>
        /// <param name="total">total</param>
        /// <param name="statuses">statuses</param>
        /// <param name="untested">untested</param>
        /// <param name="passed">passed</param>
        /// <param name="failed">failed</param>
        /// <param name="blocked">blocked</param>
        /// <param name="skipped">skipped</param>
        /// <param name="retest">retest</param>
        /// <param name="inProgress">inProgress</param>
        /// <param name="invalid">invalid</param>
        [JsonConstructor]
        public RunStats(Option<int?> total = default, Option<Dictionary<string, int>?> statuses = default, Option<int?> untested = default, Option<int?> passed = default, Option<int?> failed = default, Option<int?> blocked = default, Option<int?> skipped = default, Option<int?> retest = default, Option<int?> inProgress = default, Option<int?> invalid = default)
        {
            TotalOption = total;
            StatusesOption = statuses;
            UntestedOption = untested;
            PassedOption = passed;
            FailedOption = failed;
            BlockedOption = blocked;
            SkippedOption = skipped;
            RetestOption = retest;
            InProgressOption = inProgress;
            InvalidOption = invalid;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Total
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalOption { get; private set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [JsonPropertyName("total")]
        public int? Total { get { return this.TotalOption; } set { this.TotalOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Statuses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, int>?> StatusesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Statuses
        /// </summary>
        [JsonPropertyName("statuses")]
        public Dictionary<string, int>? Statuses { get { return this.StatusesOption; } set { this.StatusesOption = new Option<Dictionary<string, int>?>(value); } }

        /// <summary>
        /// Used to track the state of Untested
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> UntestedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Untested
        /// </summary>
        [JsonPropertyName("untested")]
        [Obsolete]
        public int? Untested { get { return this.UntestedOption; } set { this.UntestedOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Passed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PassedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Passed
        /// </summary>
        [JsonPropertyName("passed")]
        [Obsolete]
        public int? Passed { get { return this.PassedOption; } set { this.PassedOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Failed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FailedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Failed
        /// </summary>
        [JsonPropertyName("failed")]
        [Obsolete]
        public int? Failed { get { return this.FailedOption; } set { this.FailedOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Blocked
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BlockedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Blocked
        /// </summary>
        [JsonPropertyName("blocked")]
        [Obsolete]
        public int? Blocked { get { return this.BlockedOption; } set { this.BlockedOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Skipped
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SkippedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Skipped
        /// </summary>
        [JsonPropertyName("skipped")]
        [Obsolete]
        public int? Skipped { get { return this.SkippedOption; } set { this.SkippedOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Retest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RetestOption { get; private set; }

        /// <summary>
        /// Gets or Sets Retest
        /// </summary>
        [JsonPropertyName("retest")]
        [Obsolete]
        public int? Retest { get { return this.RetestOption; } set { this.RetestOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of InProgress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> InProgressOption { get; private set; }

        /// <summary>
        /// Gets or Sets InProgress
        /// </summary>
        [JsonPropertyName("in_progress")]
        [Obsolete]
        public int? InProgress { get { return this.InProgressOption; } set { this.InProgressOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Invalid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> InvalidOption { get; private set; }

        /// <summary>
        /// Gets or Sets Invalid
        /// </summary>
        [JsonPropertyName("invalid")]
        [Obsolete]
        public int? Invalid { get { return this.InvalidOption; } set { this.InvalidOption = new Option<int?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RunStats {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("  Untested: ").Append(Untested).Append("\n");
            sb.Append("  Passed: ").Append(Passed).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  Skipped: ").Append(Skipped).Append("\n");
            sb.Append("  Retest: ").Append(Retest).Append("\n");
            sb.Append("  InProgress: ").Append(InProgress).Append("\n");
            sb.Append("  Invalid: ").Append(Invalid).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RunStats" />
    /// </summary>
    public class RunStatsJsonConverter : JsonConverter<RunStats>
    {
        /// <summary>
        /// Deserializes json to <see cref="RunStats" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RunStats Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> total = default;
            Option<Dictionary<string, int>?> statuses = default;
            Option<int?> untested = default;
            Option<int?> passed = default;
            Option<int?> failed = default;
            Option<int?> blocked = default;
            Option<int?> skipped = default;
            Option<int?> retest = default;
            Option<int?> inProgress = default;
            Option<int?> invalid = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "total":
                            total = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "statuses":
                            statuses = new Option<Dictionary<string, int>?>(JsonSerializer.Deserialize<Dictionary<string, int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "untested":
                            untested = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "passed":
                            passed = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "failed":
                            failed = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "blocked":
                            blocked = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "skipped":
                            skipped = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "retest":
                            retest = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "in_progress":
                            inProgress = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "invalid":
                            invalid = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class RunStats.");

            if (statuses.IsSet && statuses.Value == null)
                throw new ArgumentNullException(nameof(statuses), "Property is not nullable for class RunStats.");

            if (untested.IsSet && untested.Value == null)
                throw new ArgumentNullException(nameof(untested), "Property is not nullable for class RunStats.");

            if (passed.IsSet && passed.Value == null)
                throw new ArgumentNullException(nameof(passed), "Property is not nullable for class RunStats.");

            if (failed.IsSet && failed.Value == null)
                throw new ArgumentNullException(nameof(failed), "Property is not nullable for class RunStats.");

            if (blocked.IsSet && blocked.Value == null)
                throw new ArgumentNullException(nameof(blocked), "Property is not nullable for class RunStats.");

            if (skipped.IsSet && skipped.Value == null)
                throw new ArgumentNullException(nameof(skipped), "Property is not nullable for class RunStats.");

            if (retest.IsSet && retest.Value == null)
                throw new ArgumentNullException(nameof(retest), "Property is not nullable for class RunStats.");

            if (inProgress.IsSet && inProgress.Value == null)
                throw new ArgumentNullException(nameof(inProgress), "Property is not nullable for class RunStats.");

            if (invalid.IsSet && invalid.Value == null)
                throw new ArgumentNullException(nameof(invalid), "Property is not nullable for class RunStats.");

            return new RunStats(total, statuses, untested, passed, failed, blocked, skipped, retest, inProgress, invalid);
        }

        /// <summary>
        /// Serializes a <see cref="RunStats" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="runStats"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RunStats runStats, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, runStats, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RunStats" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="runStats"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RunStats runStats, JsonSerializerOptions jsonSerializerOptions)
        {
            if (runStats.StatusesOption.IsSet && runStats.Statuses == null)
                throw new ArgumentNullException(nameof(runStats.Statuses), "Property is required for class RunStats.");

            if (runStats.TotalOption.IsSet)
                writer.WriteNumber("total", runStats.TotalOption.Value!.Value);

            if (runStats.StatusesOption.IsSet)
            {
                writer.WritePropertyName("statuses");
                JsonSerializer.Serialize(writer, runStats.Statuses, jsonSerializerOptions);
            }
            if (runStats.UntestedOption.IsSet)
                writer.WriteNumber("untested", runStats.UntestedOption.Value!.Value);

            if (runStats.PassedOption.IsSet)
                writer.WriteNumber("passed", runStats.PassedOption.Value!.Value);

            if (runStats.FailedOption.IsSet)
                writer.WriteNumber("failed", runStats.FailedOption.Value!.Value);

            if (runStats.BlockedOption.IsSet)
                writer.WriteNumber("blocked", runStats.BlockedOption.Value!.Value);

            if (runStats.SkippedOption.IsSet)
                writer.WriteNumber("skipped", runStats.SkippedOption.Value!.Value);

            if (runStats.RetestOption.IsSet)
                writer.WriteNumber("retest", runStats.RetestOption.Value!.Value);

            if (runStats.InProgressOption.IsSet)
                writer.WriteNumber("in_progress", runStats.InProgressOption.Value!.Value);

            if (runStats.InvalidOption.IsSet)
                writer.WriteNumber("invalid", runStats.InvalidOption.Value!.Value);
        }
    }
}
