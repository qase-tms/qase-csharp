// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// Requirement
    /// </summary>
    public partial class Requirement : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Requirement" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="requirementId">requirementId</param>
        /// <param name="parentId">parentId</param>
        /// <param name="memberId">memberId</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="status">status</param>
        /// <param name="type">type</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public Requirement(Option<long?> id = default, Option<long?> requirementId = default, Option<long?> parentId = default, Option<long?> memberId = default, Option<string?> title = default, Option<string?> description = default, Option<StatusEnum?> status = default, Option<TypeEnum?> type = default, Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default)
        {
            IdOption = id;
            RequirementIdOption = requirementId;
            ParentIdOption = parentId;
            MemberIdOption = memberId;
            TitleOption = title;
            DescriptionOption = description;
            StatusOption = status;
            TypeOption = type;
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Status
        /// </summary>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Valid for value: valid
            /// </summary>
            Valid = 1,

            /// <summary>
            /// Enum Draft for value: draft
            /// </summary>
            Draft = 2,

            /// <summary>
            /// Enum Review for value: review
            /// </summary>
            Review = 3,

            /// <summary>
            /// Enum Rework for value: rework
            /// </summary>
            Rework = 4,

            /// <summary>
            /// Enum Finish for value: finish
            /// </summary>
            Finish = 5,

            /// <summary>
            /// Enum Implemented for value: implemented
            /// </summary>
            Implemented = 6,

            /// <summary>
            /// Enum NotTestable for value: not-testable
            /// </summary>
            NotTestable = 7,

            /// <summary>
            /// Enum Obsolete for value: obsolete
            /// </summary>
            Obsolete = 8
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("valid"))
                return StatusEnum.Valid;

            if (value.Equals("draft"))
                return StatusEnum.Draft;

            if (value.Equals("review"))
                return StatusEnum.Review;

            if (value.Equals("rework"))
                return StatusEnum.Rework;

            if (value.Equals("finish"))
                return StatusEnum.Finish;

            if (value.Equals("implemented"))
                return StatusEnum.Implemented;

            if (value.Equals("not-testable"))
                return StatusEnum.NotTestable;

            if (value.Equals("obsolete"))
                return StatusEnum.Obsolete;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("valid"))
                return StatusEnum.Valid;

            if (value.Equals("draft"))
                return StatusEnum.Draft;

            if (value.Equals("review"))
                return StatusEnum.Review;

            if (value.Equals("rework"))
                return StatusEnum.Rework;

            if (value.Equals("finish"))
                return StatusEnum.Finish;

            if (value.Equals("implemented"))
                return StatusEnum.Implemented;

            if (value.Equals("not-testable"))
                return StatusEnum.NotTestable;

            if (value.Equals("obsolete"))
                return StatusEnum.Obsolete;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum? value)
        {
            if (value == StatusEnum.Valid)
                return "valid";

            if (value == StatusEnum.Draft)
                return "draft";

            if (value == StatusEnum.Review)
                return "review";

            if (value == StatusEnum.Rework)
                return "rework";

            if (value == StatusEnum.Finish)
                return "finish";

            if (value == StatusEnum.Implemented)
                return "implemented";

            if (value == StatusEnum.NotTestable)
                return "not-testable";

            if (value == StatusEnum.Obsolete)
                return "obsolete";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StatusEnum?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public StatusEnum? Status { get { return this.StatusOption; } set { this.StatusOption = new Option<StatusEnum?>(value); } }

        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Epic for value: epic
            /// </summary>
            Epic = 1,

            /// <summary>
            /// Enum UserStory for value: user-story
            /// </summary>
            UserStory = 2,

            /// <summary>
            /// Enum Feature for value: feature
            /// </summary>
            Feature = 3
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("epic"))
                return TypeEnum.Epic;

            if (value.Equals("user-story"))
                return TypeEnum.UserStory;

            if (value.Equals("feature"))
                return TypeEnum.Feature;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("epic"))
                return TypeEnum.Epic;

            if (value.Equals("user-story"))
                return TypeEnum.UserStory;

            if (value.Equals("feature"))
                return TypeEnum.Feature;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.Epic)
                return "epic";

            if (value == TypeEnum.UserStory)
                return "user-story";

            if (value == TypeEnum.Feature)
                return "feature";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<TypeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public long? Id { get { return this.IdOption; } set { this.IdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of RequirementId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> RequirementIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets RequirementId
        /// </summary>
        [JsonPropertyName("requirement_id")]
        public long? RequirementId { get { return this.RequirementIdOption; } set { this.RequirementIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of ParentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ParentIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [JsonPropertyName("parent_id")]
        public long? ParentId { get { return this.ParentIdOption; } set { this.ParentIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of MemberId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> MemberIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets MemberId
        /// </summary>
        [JsonPropertyName("member_id")]
        public long? MemberId { get { return this.MemberIdOption; } set { this.MemberIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2021-12-30T19:23:59Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2021-12-30T19:23:59Z</example> */
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Requirement {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RequirementId: ").Append(RequirementId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  MemberId: ").Append(MemberId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Requirement" />
    /// </summary>
    public class RequirementJsonConverter : JsonConverter<Requirement>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Requirement" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Requirement Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<long?> requirementId = default;
            Option<long?> parentId = default;
            Option<long?> memberId = default;
            Option<string?> title = default;
            Option<string?> description = default;
            Option<Requirement.StatusEnum?> status = default;
            Option<Requirement.TypeEnum?> type = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "requirement_id":
                            requirementId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "parent_id":
                            parentId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "member_id":
                            memberId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<Requirement.StatusEnum?>(Requirement.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<Requirement.TypeEnum?>(Requirement.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Requirement.");

            if (requirementId.IsSet && requirementId.Value == null)
                throw new ArgumentNullException(nameof(requirementId), "Property is not nullable for class Requirement.");

            if (memberId.IsSet && memberId.Value == null)
                throw new ArgumentNullException(nameof(memberId), "Property is not nullable for class Requirement.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class Requirement.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class Requirement.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Requirement.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class Requirement.");

            return new Requirement(id, requirementId, parentId, memberId, title, description, status, type, createdAt, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="Requirement" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="requirement"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Requirement requirement, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, requirement, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Requirement" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="requirement"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Requirement requirement, JsonSerializerOptions jsonSerializerOptions)
        {
            if (requirement.TitleOption.IsSet && requirement.Title == null)
                throw new ArgumentNullException(nameof(requirement.Title), "Property is required for class Requirement.");

            if (requirement.IdOption.IsSet)
                writer.WriteNumber("id", requirement.IdOption.Value!.Value);

            if (requirement.RequirementIdOption.IsSet)
                writer.WriteNumber("requirement_id", requirement.RequirementIdOption.Value!.Value);

            if (requirement.ParentIdOption.IsSet)
                if (requirement.ParentIdOption.Value != null)
                    writer.WriteNumber("parent_id", requirement.ParentIdOption.Value!.Value);
                else
                    writer.WriteNull("parent_id");

            if (requirement.MemberIdOption.IsSet)
                writer.WriteNumber("member_id", requirement.MemberIdOption.Value!.Value);

            if (requirement.TitleOption.IsSet)
                writer.WriteString("title", requirement.Title);

            if (requirement.DescriptionOption.IsSet)
                if (requirement.DescriptionOption.Value != null)
                    writer.WriteString("description", requirement.Description);
                else
                    writer.WriteNull("description");

            var statusRawValue = Requirement.StatusEnumToJsonValue(requirement.StatusOption.Value!.Value);
            writer.WriteString("status", statusRawValue);
            var typeRawValue = Requirement.TypeEnumToJsonValue(requirement.TypeOption.Value!.Value);
            writer.WriteString("type", typeRawValue);
            if (requirement.CreatedAtOption.IsSet)
                writer.WriteString("created_at", requirement.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (requirement.UpdatedAtOption.IsSet)
                if (requirement.UpdatedAtOption.Value != null)
                    writer.WriteString("updated_at", requirement.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));
                else
                    writer.WriteNull("updated_at");
        }
    }
}
