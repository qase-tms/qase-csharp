// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// CustomFieldUpdate
    /// </summary>
    public partial class CustomFieldUpdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldUpdate" /> class.
        /// </summary>
        /// <param name="title">title</param>
        /// <param name="value">value</param>
        /// <param name="replaceValues">Dictionary of old values and their replacemants</param>
        /// <param name="placeholder">placeholder</param>
        /// <param name="defaultValue">defaultValue</param>
        /// <param name="isFilterable">isFilterable</param>
        /// <param name="isVisible">isVisible</param>
        /// <param name="isRequired">isRequired</param>
        /// <param name="isEnabledForAllProjects">isEnabledForAllProjects</param>
        /// <param name="projectsCodes">projectsCodes</param>
        [JsonConstructor]
        public CustomFieldUpdate(string title, Option<List<CustomFieldCreateValueInner>?> value = default, Option<Dictionary<string, string>?> replaceValues = default, Option<string?> placeholder = default, Option<string?> defaultValue = default, Option<bool?> isFilterable = default, Option<bool?> isVisible = default, Option<bool?> isRequired = default, Option<bool?> isEnabledForAllProjects = default, Option<List<string>?> projectsCodes = default)
        {
            Title = title;
            ValueOption = value;
            ReplaceValuesOption = replaceValues;
            PlaceholderOption = placeholder;
            DefaultValueOption = defaultValue;
            IsFilterableOption = isFilterable;
            IsVisibleOption = isVisible;
            IsRequiredOption = isRequired;
            IsEnabledForAllProjectsOption = isEnabledForAllProjects;
            ProjectsCodesOption = projectsCodes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CustomFieldCreateValueInner>?> ValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public List<CustomFieldCreateValueInner>? Value { get { return this.ValueOption; } set { this.ValueOption = new Option<List<CustomFieldCreateValueInner>?>(value); } }

        /// <summary>
        /// Used to track the state of ReplaceValues
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> ReplaceValuesOption { get; private set; }

        /// <summary>
        /// Dictionary of old values and their replacemants
        /// </summary>
        /// <value>Dictionary of old values and their replacemants</value>
        [JsonPropertyName("replace_values")]
        public Dictionary<string, string>? ReplaceValues { get { return this.ReplaceValuesOption; } set { this.ReplaceValuesOption = new Option<Dictionary<string, string>?>(value); } }

        /// <summary>
        /// Used to track the state of Placeholder
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PlaceholderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Placeholder
        /// </summary>
        [JsonPropertyName("placeholder")]
        public string? Placeholder { get { return this.PlaceholderOption; } set { this.PlaceholderOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of DefaultValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DefaultValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [JsonPropertyName("default_value")]
        public string? DefaultValue { get { return this.DefaultValueOption; } set { this.DefaultValueOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of IsFilterable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsFilterableOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsFilterable
        /// </summary>
        [JsonPropertyName("is_filterable")]
        public bool? IsFilterable { get { return this.IsFilterableOption; } set { this.IsFilterableOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IsVisible
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsVisibleOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsVisible
        /// </summary>
        [JsonPropertyName("is_visible")]
        public bool? IsVisible { get { return this.IsVisibleOption; } set { this.IsVisibleOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IsRequired
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsRequiredOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsRequired
        /// </summary>
        [JsonPropertyName("is_required")]
        public bool? IsRequired { get { return this.IsRequiredOption; } set { this.IsRequiredOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IsEnabledForAllProjects
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsEnabledForAllProjectsOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsEnabledForAllProjects
        /// </summary>
        [JsonPropertyName("is_enabled_for_all_projects")]
        public bool? IsEnabledForAllProjects { get { return this.IsEnabledForAllProjectsOption; } set { this.IsEnabledForAllProjectsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ProjectsCodes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ProjectsCodesOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProjectsCodes
        /// </summary>
        [JsonPropertyName("projects_codes")]
        public List<string>? ProjectsCodes { get { return this.ProjectsCodesOption; } set { this.ProjectsCodesOption = new Option<List<string>?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomFieldUpdate {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ReplaceValues: ").Append(ReplaceValues).Append("\n");
            sb.Append("  Placeholder: ").Append(Placeholder).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  IsFilterable: ").Append(IsFilterable).Append("\n");
            sb.Append("  IsVisible: ").Append(IsVisible).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IsEnabledForAllProjects: ").Append(IsEnabledForAllProjects).Append("\n");
            sb.Append("  ProjectsCodes: ").Append(ProjectsCodes).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Title, length must be less than 255.", new [] { "Title" });
            }

            // Placeholder (string) maxLength
            if (this.Placeholder != null && this.Placeholder.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Placeholder, length must be less than 255.", new [] { "Placeholder" });
            }

            // DefaultValue (string) maxLength
            if (this.DefaultValue != null && this.DefaultValue.Length > 255)
            {
                yield return new ValidationResult("Invalid value for DefaultValue, length must be less than 255.", new [] { "DefaultValue" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CustomFieldUpdate" />
    /// </summary>
    public class CustomFieldUpdateJsonConverter : JsonConverter<CustomFieldUpdate>
    {
        /// <summary>
        /// Deserializes json to <see cref="CustomFieldUpdate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CustomFieldUpdate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<List<CustomFieldCreateValueInner>?> value = default;
            Option<Dictionary<string, string>?> replaceValues = default;
            Option<string?> placeholder = default;
            Option<string?> defaultValue = default;
            Option<bool?> isFilterable = default;
            Option<bool?> isVisible = default;
            Option<bool?> isRequired = default;
            Option<bool?> isEnabledForAllProjects = default;
            Option<List<string>?> projectsCodes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "value":
                            value = new Option<List<CustomFieldCreateValueInner>?>(JsonSerializer.Deserialize<List<CustomFieldCreateValueInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "replace_values":
                            replaceValues = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "placeholder":
                            placeholder = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "default_value":
                            defaultValue = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_filterable":
                            isFilterable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_visible":
                            isVisible = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_required":
                            isRequired = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_enabled_for_all_projects":
                            isEnabledForAllProjects = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "projects_codes":
                            projectsCodes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class CustomFieldUpdate.", nameof(title));

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class CustomFieldUpdate.");

            if (isFilterable.IsSet && isFilterable.Value == null)
                throw new ArgumentNullException(nameof(isFilterable), "Property is not nullable for class CustomFieldUpdate.");

            if (isVisible.IsSet && isVisible.Value == null)
                throw new ArgumentNullException(nameof(isVisible), "Property is not nullable for class CustomFieldUpdate.");

            if (isRequired.IsSet && isRequired.Value == null)
                throw new ArgumentNullException(nameof(isRequired), "Property is not nullable for class CustomFieldUpdate.");

            if (isEnabledForAllProjects.IsSet && isEnabledForAllProjects.Value == null)
                throw new ArgumentNullException(nameof(isEnabledForAllProjects), "Property is not nullable for class CustomFieldUpdate.");

            if (projectsCodes.IsSet && projectsCodes.Value == null)
                throw new ArgumentNullException(nameof(projectsCodes), "Property is not nullable for class CustomFieldUpdate.");

            return new CustomFieldUpdate(title.Value!, value, replaceValues, placeholder, defaultValue, isFilterable, isVisible, isRequired, isEnabledForAllProjects, projectsCodes);
        }

        /// <summary>
        /// Serializes a <see cref="CustomFieldUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customFieldUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CustomFieldUpdate customFieldUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, customFieldUpdate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CustomFieldUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customFieldUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CustomFieldUpdate customFieldUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (customFieldUpdate.Title == null)
                throw new ArgumentNullException(nameof(customFieldUpdate.Title), "Property is required for class CustomFieldUpdate.");

            if (customFieldUpdate.ProjectsCodesOption.IsSet && customFieldUpdate.ProjectsCodes == null)
                throw new ArgumentNullException(nameof(customFieldUpdate.ProjectsCodes), "Property is required for class CustomFieldUpdate.");

            writer.WriteString("title", customFieldUpdate.Title);

            if (customFieldUpdate.ValueOption.IsSet)
                if (customFieldUpdate.ValueOption.Value != null)
                {
                    writer.WritePropertyName("value");
                    JsonSerializer.Serialize(writer, customFieldUpdate.Value, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("value");
            if (customFieldUpdate.ReplaceValuesOption.IsSet)
                if (customFieldUpdate.ReplaceValuesOption.Value != null)
                {
                    writer.WritePropertyName("replace_values");
                    JsonSerializer.Serialize(writer, customFieldUpdate.ReplaceValues, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("replace_values");
            if (customFieldUpdate.PlaceholderOption.IsSet)
                if (customFieldUpdate.PlaceholderOption.Value != null)
                    writer.WriteString("placeholder", customFieldUpdate.Placeholder);
                else
                    writer.WriteNull("placeholder");

            if (customFieldUpdate.DefaultValueOption.IsSet)
                if (customFieldUpdate.DefaultValueOption.Value != null)
                    writer.WriteString("default_value", customFieldUpdate.DefaultValue);
                else
                    writer.WriteNull("default_value");

            if (customFieldUpdate.IsFilterableOption.IsSet)
                writer.WriteBoolean("is_filterable", customFieldUpdate.IsFilterableOption.Value!.Value);

            if (customFieldUpdate.IsVisibleOption.IsSet)
                writer.WriteBoolean("is_visible", customFieldUpdate.IsVisibleOption.Value!.Value);

            if (customFieldUpdate.IsRequiredOption.IsSet)
                writer.WriteBoolean("is_required", customFieldUpdate.IsRequiredOption.Value!.Value);

            if (customFieldUpdate.IsEnabledForAllProjectsOption.IsSet)
                writer.WriteBoolean("is_enabled_for_all_projects", customFieldUpdate.IsEnabledForAllProjectsOption.Value!.Value);

            if (customFieldUpdate.ProjectsCodesOption.IsSet)
            {
                writer.WritePropertyName("projects_codes");
                JsonSerializer.Serialize(writer, customFieldUpdate.ProjectsCodes, jsonSerializerOptions);
            }
        }
    }
}
