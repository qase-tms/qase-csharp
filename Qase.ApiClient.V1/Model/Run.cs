// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// Run
    /// </summary>
    public partial class Run : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Run" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="runId">runId</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="status">status</param>
        /// <param name="statusText">statusText</param>
        /// <param name="startTime">startTime</param>
        /// <param name="endTime">endTime</param>
        /// <param name="public">public</param>
        /// <param name="stats">stats</param>
        /// <param name="timeSpent">Time in ms.</param>
        /// <param name="elapsedTime">Time in ms.</param>
        /// <param name="varEnvironment">varEnvironment</param>
        /// <param name="milestone">milestone</param>
        /// <param name="customFields">customFields</param>
        /// <param name="tags">tags</param>
        /// <param name="cases">cases</param>
        /// <param name="planId">planId</param>
        /// <param name="configurations">configurations</param>
        /// <param name="externalIssue">externalIssue</param>
        [JsonConstructor]
        public Run(Option<long?> id = default, Option<long?> runId = default, Option<string?> title = default, Option<string?> description = default, Option<int?> status = default, Option<string?> statusText = default, Option<DateTime?> startTime = default, Option<DateTime?> endTime = default, Option<bool?> @public = default, Option<RunStats?> stats = default, Option<long?> timeSpent = default, Option<long?> elapsedTime = default, Option<RunEnvironment?> varEnvironment = default, Option<RunMilestone?> milestone = default, Option<List<CustomFieldValue>?> customFields = default, Option<List<TagValue>?> tags = default, Option<List<long>?> cases = default, Option<long?> planId = default, Option<List<long>?> configurations = default, Option<RunExternalIssue?> externalIssue = default)
        {
            IdOption = id;
            RunIdOption = runId;
            TitleOption = title;
            DescriptionOption = description;
            StatusOption = status;
            StatusTextOption = statusText;
            StartTimeOption = startTime;
            EndTimeOption = endTime;
            PublicOption = @public;
            StatsOption = stats;
            TimeSpentOption = timeSpent;
            ElapsedTimeOption = elapsedTime;
            VarEnvironmentOption = varEnvironment;
            MilestoneOption = milestone;
            CustomFieldsOption = customFields;
            TagsOption = tags;
            CasesOption = cases;
            PlanIdOption = planId;
            ConfigurationsOption = configurations;
            ExternalIssueOption = externalIssue;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public long? Id { get { return this.IdOption; } set { this.IdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of RunId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> RunIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets RunId
        /// </summary>
        [JsonPropertyName("run_id")]
        public long? RunId { get { return this.RunIdOption; } set { this.RunIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public int? Status { get { return this.StatusOption; } set { this.StatusOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of StatusText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusTextOption { get; private set; }

        /// <summary>
        /// Gets or Sets StatusText
        /// </summary>
        [JsonPropertyName("status_text")]
        public string? StatusText { get { return this.StatusTextOption; } set { this.StatusTextOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of StartTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> StartTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        /* <example>2021-12-30T19:23:59Z</example> */
        [JsonPropertyName("start_time")]
        public DateTime? StartTime { get { return this.StartTimeOption; } set { this.StartTimeOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of EndTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> EndTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        /* <example>2021-12-30T19:23:59Z</example> */
        [JsonPropertyName("end_time")]
        public DateTime? EndTime { get { return this.EndTimeOption; } set { this.EndTimeOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of Public
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PublicOption { get; private set; }

        /// <summary>
        /// Gets or Sets Public
        /// </summary>
        [JsonPropertyName("public")]
        public bool? Public { get { return this.PublicOption; } set { this.PublicOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Stats
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RunStats?> StatsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Stats
        /// </summary>
        [JsonPropertyName("stats")]
        public RunStats? Stats { get { return this.StatsOption; } set { this.StatsOption = new Option<RunStats?>(value); } }

        /// <summary>
        /// Used to track the state of TimeSpent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TimeSpentOption { get; private set; }

        /// <summary>
        /// Time in ms.
        /// </summary>
        /// <value>Time in ms.</value>
        [JsonPropertyName("time_spent")]
        public long? TimeSpent { get { return this.TimeSpentOption; } set { this.TimeSpentOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of ElapsedTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ElapsedTimeOption { get; private set; }

        /// <summary>
        /// Time in ms.
        /// </summary>
        /// <value>Time in ms.</value>
        [JsonPropertyName("elapsed_time")]
        public long? ElapsedTime { get { return this.ElapsedTimeOption; } set { this.ElapsedTimeOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of VarEnvironment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RunEnvironment?> VarEnvironmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets VarEnvironment
        /// </summary>
        [JsonPropertyName("environment")]
        public RunEnvironment? VarEnvironment { get { return this.VarEnvironmentOption; } set { this.VarEnvironmentOption = new Option<RunEnvironment?>(value); } }

        /// <summary>
        /// Used to track the state of Milestone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RunMilestone?> MilestoneOption { get; private set; }

        /// <summary>
        /// Gets or Sets Milestone
        /// </summary>
        [JsonPropertyName("milestone")]
        public RunMilestone? Milestone { get { return this.MilestoneOption; } set { this.MilestoneOption = new Option<RunMilestone?>(value); } }

        /// <summary>
        /// Used to track the state of CustomFields
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CustomFieldValue>?> CustomFieldsOption { get; private set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [JsonPropertyName("custom_fields")]
        public List<CustomFieldValue>? CustomFields { get { return this.CustomFieldsOption; } set { this.CustomFieldsOption = new Option<List<CustomFieldValue>?>(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<TagValue>?> TagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public List<TagValue>? Tags { get { return this.TagsOption; } set { this.TagsOption = new Option<List<TagValue>?>(value); } }

        /// <summary>
        /// Used to track the state of Cases
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<long>?> CasesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Cases
        /// </summary>
        [JsonPropertyName("cases")]
        public List<long>? Cases { get { return this.CasesOption; } set { this.CasesOption = new Option<List<long>?>(value); } }

        /// <summary>
        /// Used to track the state of PlanId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> PlanIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets PlanId
        /// </summary>
        [JsonPropertyName("plan_id")]
        public long? PlanId { get { return this.PlanIdOption; } set { this.PlanIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Configurations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<long>?> ConfigurationsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Configurations
        /// </summary>
        [JsonPropertyName("configurations")]
        public List<long>? Configurations { get { return this.ConfigurationsOption; } set { this.ConfigurationsOption = new Option<List<long>?>(value); } }

        /// <summary>
        /// Used to track the state of ExternalIssue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RunExternalIssue?> ExternalIssueOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExternalIssue
        /// </summary>
        [JsonPropertyName("external_issue")]
        public RunExternalIssue? ExternalIssue { get { return this.ExternalIssueOption; } set { this.ExternalIssueOption = new Option<RunExternalIssue?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Run {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RunId: ").Append(RunId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusText: ").Append(StatusText).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Public: ").Append(Public).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("  TimeSpent: ").Append(TimeSpent).Append("\n");
            sb.Append("  ElapsedTime: ").Append(ElapsedTime).Append("\n");
            sb.Append("  VarEnvironment: ").Append(VarEnvironment).Append("\n");
            sb.Append("  Milestone: ").Append(Milestone).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Cases: ").Append(Cases).Append("\n");
            sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            sb.Append("  Configurations: ").Append(Configurations).Append("\n");
            sb.Append("  ExternalIssue: ").Append(ExternalIssue).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Run" />
    /// </summary>
    public class RunJsonConverter : JsonConverter<Run>
    {
        /// <summary>
        /// The format to use to serialize StartTime
        /// </summary>
        public static string StartTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndTime
        /// </summary>
        public static string EndTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Run" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Run Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<long?> runId = default;
            Option<string?> title = default;
            Option<string?> description = default;
            Option<int?> status = default;
            Option<string?> statusText = default;
            Option<DateTime?> startTime = default;
            Option<DateTime?> endTime = default;
            Option<bool?> varPublic = default;
            Option<RunStats?> stats = default;
            Option<long?> timeSpent = default;
            Option<long?> elapsedTime = default;
            Option<RunEnvironment?> varEnvironment = default;
            Option<RunMilestone?> milestone = default;
            Option<List<CustomFieldValue>?> customFields = default;
            Option<List<TagValue>?> tags = default;
            Option<List<long>?> cases = default;
            Option<long?> planId = default;
            Option<List<long>?> configurations = default;
            Option<RunExternalIssue?> externalIssue = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "run_id":
                            runId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            status = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "status_text":
                            statusText = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "start_time":
                            startTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "end_time":
                            endTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "public":
                            varPublic = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "stats":
                            stats = new Option<RunStats?>(JsonSerializer.Deserialize<RunStats>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "time_spent":
                            timeSpent = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "elapsed_time":
                            elapsedTime = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "environment":
                            varEnvironment = new Option<RunEnvironment?>(JsonSerializer.Deserialize<RunEnvironment>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "milestone":
                            milestone = new Option<RunMilestone?>(JsonSerializer.Deserialize<RunMilestone>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "custom_fields":
                            customFields = new Option<List<CustomFieldValue>?>(JsonSerializer.Deserialize<List<CustomFieldValue>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tags":
                            tags = new Option<List<TagValue>?>(JsonSerializer.Deserialize<List<TagValue>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "cases":
                            cases = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "plan_id":
                            planId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "configurations":
                            configurations = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "external_issue":
                            externalIssue = new Option<RunExternalIssue?>(JsonSerializer.Deserialize<RunExternalIssue>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Run.");

            if (runId.IsSet && runId.Value == null)
                throw new ArgumentNullException(nameof(runId), "Property is not nullable for class Run.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class Run.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class Run.");

            if (statusText.IsSet && statusText.Value == null)
                throw new ArgumentNullException(nameof(statusText), "Property is not nullable for class Run.");

            if (varPublic.IsSet && varPublic.Value == null)
                throw new ArgumentNullException(nameof(varPublic), "Property is not nullable for class Run.");

            if (stats.IsSet && stats.Value == null)
                throw new ArgumentNullException(nameof(stats), "Property is not nullable for class Run.");

            if (timeSpent.IsSet && timeSpent.Value == null)
                throw new ArgumentNullException(nameof(timeSpent), "Property is not nullable for class Run.");

            if (elapsedTime.IsSet && elapsedTime.Value == null)
                throw new ArgumentNullException(nameof(elapsedTime), "Property is not nullable for class Run.");

            if (customFields.IsSet && customFields.Value == null)
                throw new ArgumentNullException(nameof(customFields), "Property is not nullable for class Run.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class Run.");

            if (cases.IsSet && cases.Value == null)
                throw new ArgumentNullException(nameof(cases), "Property is not nullable for class Run.");

            if (configurations.IsSet && configurations.Value == null)
                throw new ArgumentNullException(nameof(configurations), "Property is not nullable for class Run.");

            return new Run(id, runId, title, description, status, statusText, startTime, endTime, varPublic, stats, timeSpent, elapsedTime, varEnvironment, milestone, customFields, tags, cases, planId, configurations, externalIssue);
        }

        /// <summary>
        /// Serializes a <see cref="Run" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="run"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Run run, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, run, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Run" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="run"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Run run, JsonSerializerOptions jsonSerializerOptions)
        {
            if (run.TitleOption.IsSet && run.Title == null)
                throw new ArgumentNullException(nameof(run.Title), "Property is required for class Run.");

            if (run.StatusTextOption.IsSet && run.StatusText == null)
                throw new ArgumentNullException(nameof(run.StatusText), "Property is required for class Run.");

            if (run.StatsOption.IsSet && run.Stats == null)
                throw new ArgumentNullException(nameof(run.Stats), "Property is required for class Run.");

            if (run.CustomFieldsOption.IsSet && run.CustomFields == null)
                throw new ArgumentNullException(nameof(run.CustomFields), "Property is required for class Run.");

            if (run.TagsOption.IsSet && run.Tags == null)
                throw new ArgumentNullException(nameof(run.Tags), "Property is required for class Run.");

            if (run.CasesOption.IsSet && run.Cases == null)
                throw new ArgumentNullException(nameof(run.Cases), "Property is required for class Run.");

            if (run.ConfigurationsOption.IsSet && run.Configurations == null)
                throw new ArgumentNullException(nameof(run.Configurations), "Property is required for class Run.");

            if (run.IdOption.IsSet)
                writer.WriteNumber("id", run.IdOption.Value!.Value);

            if (run.RunIdOption.IsSet)
                writer.WriteNumber("run_id", run.RunIdOption.Value!.Value);

            if (run.TitleOption.IsSet)
                writer.WriteString("title", run.Title);

            if (run.DescriptionOption.IsSet)
                if (run.DescriptionOption.Value != null)
                    writer.WriteString("description", run.Description);
                else
                    writer.WriteNull("description");

            if (run.StatusOption.IsSet)
                writer.WriteNumber("status", run.StatusOption.Value!.Value);

            if (run.StatusTextOption.IsSet)
                writer.WriteString("status_text", run.StatusText);

            if (run.StartTimeOption.IsSet)
                if (run.StartTimeOption.Value != null)
                    writer.WriteString("start_time", run.StartTimeOption.Value!.Value.ToString(StartTimeFormat));
                else
                    writer.WriteNull("start_time");

            if (run.EndTimeOption.IsSet)
                if (run.EndTimeOption.Value != null)
                    writer.WriteString("end_time", run.EndTimeOption.Value!.Value.ToString(EndTimeFormat));
                else
                    writer.WriteNull("end_time");

            if (run.PublicOption.IsSet)
                writer.WriteBoolean("public", run.PublicOption.Value!.Value);

            if (run.StatsOption.IsSet)
            {
                writer.WritePropertyName("stats");
                JsonSerializer.Serialize(writer, run.Stats, jsonSerializerOptions);
            }
            if (run.TimeSpentOption.IsSet)
                writer.WriteNumber("time_spent", run.TimeSpentOption.Value!.Value);

            if (run.ElapsedTimeOption.IsSet)
                writer.WriteNumber("elapsed_time", run.ElapsedTimeOption.Value!.Value);

            if (run.VarEnvironmentOption.IsSet)
                if (run.VarEnvironmentOption.Value != null)
                {
                    writer.WritePropertyName("environment");
                    JsonSerializer.Serialize(writer, run.VarEnvironment, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("environment");
            if (run.MilestoneOption.IsSet)
                if (run.MilestoneOption.Value != null)
                {
                    writer.WritePropertyName("milestone");
                    JsonSerializer.Serialize(writer, run.Milestone, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("milestone");
            if (run.CustomFieldsOption.IsSet)
            {
                writer.WritePropertyName("custom_fields");
                JsonSerializer.Serialize(writer, run.CustomFields, jsonSerializerOptions);
            }
            if (run.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, run.Tags, jsonSerializerOptions);
            }
            if (run.CasesOption.IsSet)
            {
                writer.WritePropertyName("cases");
                JsonSerializer.Serialize(writer, run.Cases, jsonSerializerOptions);
            }
            if (run.PlanIdOption.IsSet)
                if (run.PlanIdOption.Value != null)
                    writer.WriteNumber("plan_id", run.PlanIdOption.Value!.Value);
                else
                    writer.WriteNull("plan_id");

            if (run.ConfigurationsOption.IsSet)
            {
                writer.WritePropertyName("configurations");
                JsonSerializer.Serialize(writer, run.Configurations, jsonSerializerOptions);
            }
            if (run.ExternalIssueOption.IsSet)
                if (run.ExternalIssueOption.Value != null)
                {
                    writer.WritePropertyName("external_issue");
                    JsonSerializer.Serialize(writer, run.ExternalIssue, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("external_issue");
        }
    }
}
