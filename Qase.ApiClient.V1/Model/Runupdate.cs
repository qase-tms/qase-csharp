// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// Runupdate
    /// </summary>
    public partial class Runupdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Runupdate" /> class.
        /// </summary>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="environmentId">environmentId</param>
        /// <param name="environmentSlug">environmentSlug</param>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="tags">tags</param>
        /// <param name="configurations">configurations</param>
        /// <param name="customField">A map of custom fields values (id &#x3D;&gt; value)</param>
        [JsonConstructor]
        public Runupdate(Option<string?> title = default, Option<string?> description = default, Option<long?> environmentId = default, Option<string?> environmentSlug = default, Option<long?> milestoneId = default, Option<List<string>?> tags = default, Option<List<long>?> configurations = default, Option<Dictionary<string, string>?> customField = default)
        {
            TitleOption = title;
            DescriptionOption = description;
            EnvironmentIdOption = environmentId;
            EnvironmentSlugOption = environmentSlug;
            MilestoneIdOption = milestoneId;
            TagsOption = tags;
            ConfigurationsOption = configurations;
            CustomFieldOption = customField;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of EnvironmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EnvironmentIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets EnvironmentId
        /// </summary>
        [JsonPropertyName("environment_id")]
        public long? EnvironmentId { get { return this.EnvironmentIdOption; } set { this.EnvironmentIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of EnvironmentSlug
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EnvironmentSlugOption { get; private set; }

        /// <summary>
        /// Gets or Sets EnvironmentSlug
        /// </summary>
        [JsonPropertyName("environment_slug")]
        public string? EnvironmentSlug { get { return this.EnvironmentSlugOption; } set { this.EnvironmentSlugOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of MilestoneId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> MilestoneIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets MilestoneId
        /// </summary>
        [JsonPropertyName("milestone_id")]
        public long? MilestoneId { get { return this.MilestoneIdOption; } set { this.MilestoneIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> TagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public List<string>? Tags { get { return this.TagsOption; } set { this.TagsOption = new Option<List<string>?>(value); } }

        /// <summary>
        /// Used to track the state of Configurations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<long>?> ConfigurationsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Configurations
        /// </summary>
        [JsonPropertyName("configurations")]
        public List<long>? Configurations { get { return this.ConfigurationsOption; } set { this.ConfigurationsOption = new Option<List<long>?>(value); } }

        /// <summary>
        /// Used to track the state of CustomField
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> CustomFieldOption { get; private set; }

        /// <summary>
        /// A map of custom fields values (id &#x3D;&gt; value)
        /// </summary>
        /// <value>A map of custom fields values (id &#x3D;&gt; value)</value>
        [JsonPropertyName("custom_field")]
        public Dictionary<string, string>? CustomField { get { return this.CustomFieldOption; } set { this.CustomFieldOption = new Option<Dictionary<string, string>?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Runupdate {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EnvironmentId: ").Append(EnvironmentId).Append("\n");
            sb.Append("  EnvironmentSlug: ").Append(EnvironmentSlug).Append("\n");
            sb.Append("  MilestoneId: ").Append(MilestoneId).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Configurations: ").Append(Configurations).Append("\n");
            sb.Append("  CustomField: ").Append(CustomField).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Title, length must be less than 255.", new [] { "Title" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 10000)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 10000.", new [] { "Description" });
            }

            // EnvironmentId (long) minimum
            if (this.EnvironmentIdOption.IsSet && this.EnvironmentIdOption.Value < (long)1)
            {
                yield return new ValidationResult("Invalid value for EnvironmentId, must be a value greater than or equal to 1.", new [] { "EnvironmentId" });
            }

            // EnvironmentSlug (string) maxLength
            if (this.EnvironmentSlug != null && this.EnvironmentSlug.Length > 255)
            {
                yield return new ValidationResult("Invalid value for EnvironmentSlug, length must be less than 255.", new [] { "EnvironmentSlug" });
            }

            // MilestoneId (long) minimum
            if (this.MilestoneIdOption.IsSet && this.MilestoneIdOption.Value < (long)1)
            {
                yield return new ValidationResult("Invalid value for MilestoneId, must be a value greater than or equal to 1.", new [] { "MilestoneId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Runupdate" />
    /// </summary>
    public class RunupdateJsonConverter : JsonConverter<Runupdate>
    {
        /// <summary>
        /// Deserializes json to <see cref="Runupdate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Runupdate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<string?> description = default;
            Option<long?> environmentId = default;
            Option<string?> environmentSlug = default;
            Option<long?> milestoneId = default;
            Option<List<string>?> tags = default;
            Option<List<long>?> configurations = default;
            Option<Dictionary<string, string>?> customField = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "environment_id":
                            environmentId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "environment_slug":
                            environmentSlug = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "milestone_id":
                            milestoneId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "tags":
                            tags = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "configurations":
                            configurations = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "custom_field":
                            customField = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class Runupdate.");

            return new Runupdate(title, description, environmentId, environmentSlug, milestoneId, tags, configurations, customField);
        }

        /// <summary>
        /// Serializes a <see cref="Runupdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="runupdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Runupdate runupdate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, runupdate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Runupdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="runupdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Runupdate runupdate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (runupdate.TitleOption.IsSet && runupdate.Title == null)
                throw new ArgumentNullException(nameof(runupdate.Title), "Property is required for class Runupdate.");

            if (runupdate.TitleOption.IsSet)
                writer.WriteString("title", runupdate.Title);

            if (runupdate.DescriptionOption.IsSet)
                if (runupdate.DescriptionOption.Value != null)
                    writer.WriteString("description", runupdate.Description);
                else
                    writer.WriteNull("description");

            if (runupdate.EnvironmentIdOption.IsSet)
                if (runupdate.EnvironmentIdOption.Value != null)
                    writer.WriteNumber("environment_id", runupdate.EnvironmentIdOption.Value!.Value);
                else
                    writer.WriteNull("environment_id");

            if (runupdate.EnvironmentSlugOption.IsSet)
                if (runupdate.EnvironmentSlugOption.Value != null)
                    writer.WriteString("environment_slug", runupdate.EnvironmentSlug);
                else
                    writer.WriteNull("environment_slug");

            if (runupdate.MilestoneIdOption.IsSet)
                if (runupdate.MilestoneIdOption.Value != null)
                    writer.WriteNumber("milestone_id", runupdate.MilestoneIdOption.Value!.Value);
                else
                    writer.WriteNull("milestone_id");

            if (runupdate.TagsOption.IsSet)
                if (runupdate.TagsOption.Value != null)
                {
                    writer.WritePropertyName("tags");
                    JsonSerializer.Serialize(writer, runupdate.Tags, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("tags");
            if (runupdate.ConfigurationsOption.IsSet)
                if (runupdate.ConfigurationsOption.Value != null)
                {
                    writer.WritePropertyName("configurations");
                    JsonSerializer.Serialize(writer, runupdate.Configurations, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("configurations");
            if (runupdate.CustomFieldOption.IsSet)
                if (runupdate.CustomFieldOption.Value != null)
                {
                    writer.WritePropertyName("custom_field");
                    JsonSerializer.Serialize(writer, runupdate.CustomField, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("custom_field");
        }
    }
}
