// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// RunexternalIssues
    /// </summary>
    public partial class RunexternalIssues : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RunexternalIssues" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="links">Array of external issue links. Each test run (run_id) can have only one external issue link.</param>
        [JsonConstructor]
        public RunexternalIssues(TypeEnum type, List<RunexternalIssuesLinksInner> links)
        {
            Type = type;
            Links = links;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum JiraCloud for value: jira-cloud
            /// </summary>
            JiraCloud = 1,

            /// <summary>
            /// Enum JiraServer for value: jira-server
            /// </summary>
            JiraServer = 2
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("jira-cloud"))
                return TypeEnum.JiraCloud;

            if (value.Equals("jira-server"))
                return TypeEnum.JiraServer;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("jira-cloud"))
                return TypeEnum.JiraCloud;

            if (value.Equals("jira-server"))
                return TypeEnum.JiraServer;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.JiraCloud)
                return "jira-cloud";

            if (value == TypeEnum.JiraServer)
                return "jira-server";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Array of external issue links. Each test run (run_id) can have only one external issue link.
        /// </summary>
        /// <value>Array of external issue links. Each test run (run_id) can have only one external issue link.</value>
        [JsonPropertyName("links")]
        public List<RunexternalIssuesLinksInner> Links { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RunexternalIssues {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RunexternalIssues" />
    /// </summary>
    public class RunexternalIssuesJsonConverter : JsonConverter<RunexternalIssues>
    {
        /// <summary>
        /// Deserializes json to <see cref="RunexternalIssues" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RunexternalIssues Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<RunexternalIssues.TypeEnum?> type = default;
            Option<List<RunexternalIssuesLinksInner>?> links = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<RunexternalIssues.TypeEnum?>(RunexternalIssues.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "links":
                            links = new Option<List<RunexternalIssuesLinksInner>?>(JsonSerializer.Deserialize<List<RunexternalIssuesLinksInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class RunexternalIssues.", nameof(type));

            if (!links.IsSet)
                throw new ArgumentException("Property is required for class RunexternalIssues.", nameof(links));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class RunexternalIssues.");

            if (links.IsSet && links.Value == null)
                throw new ArgumentNullException(nameof(links), "Property is not nullable for class RunexternalIssues.");

            return new RunexternalIssues(type.Value!.Value!, links.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="RunexternalIssues" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="runexternalIssues"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RunexternalIssues runexternalIssues, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, runexternalIssues, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RunexternalIssues" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="runexternalIssues"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RunexternalIssues runexternalIssues, JsonSerializerOptions jsonSerializerOptions)
        {
            if (runexternalIssues.Links == null)
                throw new ArgumentNullException(nameof(runexternalIssues.Links), "Property is required for class RunexternalIssues.");

            var typeRawValue = RunexternalIssues.TypeEnumToJsonValue(runexternalIssues.Type);
            writer.WriteString("type", typeRawValue);
            writer.WritePropertyName("links");
            JsonSerializer.Serialize(writer, runexternalIssues.Links, jsonSerializerOptions);
        }
    }
}
