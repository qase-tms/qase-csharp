// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// TestCaseExternalIssuesLinksInner
    /// </summary>
    public partial class TestCaseExternalIssuesLinksInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestCaseExternalIssuesLinksInner" /> class.
        /// </summary>
        /// <param name="caseId">caseId</param>
        /// <param name="externalIssues">externalIssues</param>
        [JsonConstructor]
        public TestCaseExternalIssuesLinksInner(long caseId, List<string> externalIssues)
        {
            CaseId = caseId;
            ExternalIssues = externalIssues;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets CaseId
        /// </summary>
        [JsonPropertyName("case_id")]
        public long CaseId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalIssues
        /// </summary>
        [JsonPropertyName("external_issues")]
        public List<string> ExternalIssues { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestCaseExternalIssuesLinksInner {\n");
            sb.Append("  CaseId: ").Append(CaseId).Append("\n");
            sb.Append("  ExternalIssues: ").Append(ExternalIssues).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TestCaseExternalIssuesLinksInner" />
    /// </summary>
    public class TestCaseExternalIssuesLinksInnerJsonConverter : JsonConverter<TestCaseExternalIssuesLinksInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="TestCaseExternalIssuesLinksInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TestCaseExternalIssuesLinksInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> caseId = default;
            Option<List<string>?> externalIssues = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "case_id":
                            caseId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "external_issues":
                            externalIssues = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!caseId.IsSet)
                throw new ArgumentException("Property is required for class TestCaseExternalIssuesLinksInner.", nameof(caseId));

            if (!externalIssues.IsSet)
                throw new ArgumentException("Property is required for class TestCaseExternalIssuesLinksInner.", nameof(externalIssues));

            if (caseId.IsSet && caseId.Value == null)
                throw new ArgumentNullException(nameof(caseId), "Property is not nullable for class TestCaseExternalIssuesLinksInner.");

            if (externalIssues.IsSet && externalIssues.Value == null)
                throw new ArgumentNullException(nameof(externalIssues), "Property is not nullable for class TestCaseExternalIssuesLinksInner.");

            return new TestCaseExternalIssuesLinksInner(caseId.Value!.Value!, externalIssues.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="TestCaseExternalIssuesLinksInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="testCaseExternalIssuesLinksInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TestCaseExternalIssuesLinksInner testCaseExternalIssuesLinksInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, testCaseExternalIssuesLinksInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TestCaseExternalIssuesLinksInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="testCaseExternalIssuesLinksInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TestCaseExternalIssuesLinksInner testCaseExternalIssuesLinksInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (testCaseExternalIssuesLinksInner.ExternalIssues == null)
                throw new ArgumentNullException(nameof(testCaseExternalIssuesLinksInner.ExternalIssues), "Property is required for class TestCaseExternalIssuesLinksInner.");

            writer.WriteNumber("case_id", testCaseExternalIssuesLinksInner.CaseId);

            writer.WritePropertyName("external_issues");
            JsonSerializer.Serialize(writer, testCaseExternalIssuesLinksInner.ExternalIssues, jsonSerializerOptions);
        }
    }
}
