// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// QqlDefect
    /// </summary>
    public partial class QqlDefect : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QqlDefect" /> class.
        /// </summary>
        /// <param name="defectId">defectId</param>
        /// <param name="id">id</param>
        /// <param name="title">title</param>
        /// <param name="actualResult">actualResult</param>
        /// <param name="severity">severity</param>
        /// <param name="status">status</param>
        /// <param name="milestoneId">milestoneId</param>
        /// <param name="customFields">customFields</param>
        /// <param name="attachments">attachments</param>
        /// <param name="resolved">resolved</param>
        /// <param name="memberId">Deprecated, use &#x60;author_id&#x60; instead.</param>
        /// <param name="authorId">authorId</param>
        /// <param name="externalData">externalData</param>
        /// <param name="tags">tags</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public QqlDefect(long defectId, Option<long?> id = default, Option<string?> title = default, Option<string?> actualResult = default, Option<string?> severity = default, Option<string?> status = default, Option<long?> milestoneId = default, Option<List<CustomFieldValue>?> customFields = default, Option<List<Attachment>?> attachments = default, Option<DateTime?> resolved = default, Option<long?> memberId = default, Option<long?> authorId = default, Option<string?> externalData = default, Option<List<TagValue>?> tags = default, Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default)
        {
            DefectId = defectId;
            IdOption = id;
            TitleOption = title;
            ActualResultOption = actualResult;
            SeverityOption = severity;
            StatusOption = status;
            MilestoneIdOption = milestoneId;
            CustomFieldsOption = customFields;
            AttachmentsOption = attachments;
            ResolvedOption = resolved;
            MemberIdOption = memberId;
            AuthorIdOption = authorId;
            ExternalDataOption = externalData;
            TagsOption = tags;
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets DefectId
        /// </summary>
        [JsonPropertyName("defect_id")]
        public long DefectId { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public long? Id { get { return this.IdOption; } set { this.IdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ActualResult
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ActualResultOption { get; private set; }

        /// <summary>
        /// Gets or Sets ActualResult
        /// </summary>
        [JsonPropertyName("actual_result")]
        public string? ActualResult { get { return this.ActualResultOption; } set { this.ActualResultOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Severity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SeverityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [JsonPropertyName("severity")]
        public string? Severity { get { return this.SeverityOption; } set { this.SeverityOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public string? Status { get { return this.StatusOption; } set { this.StatusOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of MilestoneId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> MilestoneIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets MilestoneId
        /// </summary>
        [JsonPropertyName("milestone_id")]
        public long? MilestoneId { get { return this.MilestoneIdOption; } set { this.MilestoneIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of CustomFields
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CustomFieldValue>?> CustomFieldsOption { get; private set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [JsonPropertyName("custom_fields")]
        public List<CustomFieldValue>? CustomFields { get { return this.CustomFieldsOption; } set { this.CustomFieldsOption = new Option<List<CustomFieldValue>?>(value); } }

        /// <summary>
        /// Used to track the state of Attachments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Attachment>?> AttachmentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [JsonPropertyName("attachments")]
        public List<Attachment>? Attachments { get { return this.AttachmentsOption; } set { this.AttachmentsOption = new Option<List<Attachment>?>(value); } }

        /// <summary>
        /// Used to track the state of Resolved
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ResolvedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Resolved
        /// </summary>
        [JsonPropertyName("resolved")]
        public DateTime? Resolved { get { return this.ResolvedOption; } set { this.ResolvedOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of MemberId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> MemberIdOption { get; private set; }

        /// <summary>
        /// Deprecated, use &#x60;author_id&#x60; instead.
        /// </summary>
        /// <value>Deprecated, use &#x60;author_id&#x60; instead.</value>
        [JsonPropertyName("member_id")]
        [Obsolete]
        public long? MemberId { get { return this.MemberIdOption; } set { this.MemberIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of AuthorId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AuthorIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets AuthorId
        /// </summary>
        [JsonPropertyName("author_id")]
        public long? AuthorId { get { return this.AuthorIdOption; } set { this.AuthorIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of ExternalData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExternalData
        /// </summary>
        [JsonPropertyName("external_data")]
        public string? ExternalData { get { return this.ExternalDataOption; } set { this.ExternalDataOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<TagValue>?> TagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public List<TagValue>? Tags { get { return this.TagsOption; } set { this.TagsOption = new Option<List<TagValue>?>(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2021-12-30T19:23:59Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2021-12-30T19:23:59Z</example> */
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QqlDefect {\n");
            sb.Append("  DefectId: ").Append(DefectId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ActualResult: ").Append(ActualResult).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  MilestoneId: ").Append(MilestoneId).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Resolved: ").Append(Resolved).Append("\n");
            sb.Append("  MemberId: ").Append(MemberId).Append("\n");
            sb.Append("  AuthorId: ").Append(AuthorId).Append("\n");
            sb.Append("  ExternalData: ").Append(ExternalData).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="QqlDefect" />
    /// </summary>
    public class QqlDefectJsonConverter : JsonConverter<QqlDefect>
    {
        /// <summary>
        /// The format to use to serialize Resolved
        /// </summary>
        public static string ResolvedFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="QqlDefect" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override QqlDefect Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> defectId = default;
            Option<long?> id = default;
            Option<string?> title = default;
            Option<string?> actualResult = default;
            Option<string?> severity = default;
            Option<string?> status = default;
            Option<long?> milestoneId = default;
            Option<List<CustomFieldValue>?> customFields = default;
            Option<List<Attachment>?> attachments = default;
            Option<DateTime?> resolved = default;
            Option<long?> memberId = default;
            Option<long?> authorId = default;
            Option<string?> externalData = default;
            Option<List<TagValue>?> tags = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "defect_id":
                            defectId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "actual_result":
                            actualResult = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "severity":
                            severity = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "milestone_id":
                            milestoneId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "custom_fields":
                            customFields = new Option<List<CustomFieldValue>?>(JsonSerializer.Deserialize<List<CustomFieldValue>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "attachments":
                            attachments = new Option<List<Attachment>?>(JsonSerializer.Deserialize<List<Attachment>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "resolved":
                            resolved = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "member_id":
                            memberId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "author_id":
                            authorId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "external_data":
                            externalData = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tags":
                            tags = new Option<List<TagValue>?>(JsonSerializer.Deserialize<List<TagValue>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!defectId.IsSet)
                throw new ArgumentException("Property is required for class QqlDefect.", nameof(defectId));

            if (defectId.IsSet && defectId.Value == null)
                throw new ArgumentNullException(nameof(defectId), "Property is not nullable for class QqlDefect.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class QqlDefect.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class QqlDefect.");

            if (actualResult.IsSet && actualResult.Value == null)
                throw new ArgumentNullException(nameof(actualResult), "Property is not nullable for class QqlDefect.");

            if (severity.IsSet && severity.Value == null)
                throw new ArgumentNullException(nameof(severity), "Property is not nullable for class QqlDefect.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class QqlDefect.");

            if (customFields.IsSet && customFields.Value == null)
                throw new ArgumentNullException(nameof(customFields), "Property is not nullable for class QqlDefect.");

            if (attachments.IsSet && attachments.Value == null)
                throw new ArgumentNullException(nameof(attachments), "Property is not nullable for class QqlDefect.");

            if (memberId.IsSet && memberId.Value == null)
                throw new ArgumentNullException(nameof(memberId), "Property is not nullable for class QqlDefect.");

            if (authorId.IsSet && authorId.Value == null)
                throw new ArgumentNullException(nameof(authorId), "Property is not nullable for class QqlDefect.");

            if (externalData.IsSet && externalData.Value == null)
                throw new ArgumentNullException(nameof(externalData), "Property is not nullable for class QqlDefect.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class QqlDefect.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class QqlDefect.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class QqlDefect.");

            return new QqlDefect(defectId.Value!.Value!, id, title, actualResult, severity, status, milestoneId, customFields, attachments, resolved, memberId, authorId, externalData, tags, createdAt, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="QqlDefect" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="qqlDefect"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, QqlDefect qqlDefect, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, qqlDefect, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="QqlDefect" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="qqlDefect"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, QqlDefect qqlDefect, JsonSerializerOptions jsonSerializerOptions)
        {
            if (qqlDefect.TitleOption.IsSet && qqlDefect.Title == null)
                throw new ArgumentNullException(nameof(qqlDefect.Title), "Property is required for class QqlDefect.");

            if (qqlDefect.ActualResultOption.IsSet && qqlDefect.ActualResult == null)
                throw new ArgumentNullException(nameof(qqlDefect.ActualResult), "Property is required for class QqlDefect.");

            if (qqlDefect.SeverityOption.IsSet && qqlDefect.Severity == null)
                throw new ArgumentNullException(nameof(qqlDefect.Severity), "Property is required for class QqlDefect.");

            if (qqlDefect.StatusOption.IsSet && qqlDefect.Status == null)
                throw new ArgumentNullException(nameof(qqlDefect.Status), "Property is required for class QqlDefect.");

            if (qqlDefect.CustomFieldsOption.IsSet && qqlDefect.CustomFields == null)
                throw new ArgumentNullException(nameof(qqlDefect.CustomFields), "Property is required for class QqlDefect.");

            if (qqlDefect.AttachmentsOption.IsSet && qqlDefect.Attachments == null)
                throw new ArgumentNullException(nameof(qqlDefect.Attachments), "Property is required for class QqlDefect.");

            if (qqlDefect.ExternalDataOption.IsSet && qqlDefect.ExternalData == null)
                throw new ArgumentNullException(nameof(qqlDefect.ExternalData), "Property is required for class QqlDefect.");

            if (qqlDefect.TagsOption.IsSet && qqlDefect.Tags == null)
                throw new ArgumentNullException(nameof(qqlDefect.Tags), "Property is required for class QqlDefect.");

            writer.WriteNumber("defect_id", qqlDefect.DefectId);

            if (qqlDefect.IdOption.IsSet)
                writer.WriteNumber("id", qqlDefect.IdOption.Value!.Value);

            if (qqlDefect.TitleOption.IsSet)
                writer.WriteString("title", qqlDefect.Title);

            if (qqlDefect.ActualResultOption.IsSet)
                writer.WriteString("actual_result", qqlDefect.ActualResult);

            if (qqlDefect.SeverityOption.IsSet)
                writer.WriteString("severity", qqlDefect.Severity);

            if (qqlDefect.StatusOption.IsSet)
                writer.WriteString("status", qqlDefect.Status);

            if (qqlDefect.MilestoneIdOption.IsSet)
                if (qqlDefect.MilestoneIdOption.Value != null)
                    writer.WriteNumber("milestone_id", qqlDefect.MilestoneIdOption.Value!.Value);
                else
                    writer.WriteNull("milestone_id");

            if (qqlDefect.CustomFieldsOption.IsSet)
            {
                writer.WritePropertyName("custom_fields");
                JsonSerializer.Serialize(writer, qqlDefect.CustomFields, jsonSerializerOptions);
            }
            if (qqlDefect.AttachmentsOption.IsSet)
            {
                writer.WritePropertyName("attachments");
                JsonSerializer.Serialize(writer, qqlDefect.Attachments, jsonSerializerOptions);
            }
            if (qqlDefect.ResolvedOption.IsSet)
                if (qqlDefect.ResolvedOption.Value != null)
                    writer.WriteString("resolved", qqlDefect.ResolvedOption.Value!.Value.ToString(ResolvedFormat));
                else
                    writer.WriteNull("resolved");

            if (qqlDefect.MemberIdOption.IsSet)
                writer.WriteNumber("member_id", qqlDefect.MemberIdOption.Value!.Value);

            if (qqlDefect.AuthorIdOption.IsSet)
                writer.WriteNumber("author_id", qqlDefect.AuthorIdOption.Value!.Value);

            if (qqlDefect.ExternalDataOption.IsSet)
                writer.WriteString("external_data", qqlDefect.ExternalData);

            if (qqlDefect.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, qqlDefect.Tags, jsonSerializerOptions);
            }
            if (qqlDefect.CreatedAtOption.IsSet)
                writer.WriteString("created_at", qqlDefect.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (qqlDefect.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", qqlDefect.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));
        }
    }
}
