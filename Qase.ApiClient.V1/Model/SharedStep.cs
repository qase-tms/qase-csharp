// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// SharedStep
    /// </summary>
    public partial class SharedStep : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharedStep" /> class.
        /// </summary>
        /// <param name="hash">hash</param>
        /// <param name="title">title</param>
        /// <param name="action">action</param>
        /// <param name="expectedResult">expectedResult</param>
        /// <param name="steps">steps</param>
        /// <param name="data">data</param>
        /// <param name="cases">cases</param>
        /// <param name="casesCount">casesCount</param>
        /// <param name="created">Deprecated, use the &#x60;created_at&#x60; property instead.</param>
        /// <param name="updated">Deprecated, use the &#x60;updated_at&#x60; property instead.</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public SharedStep(Option<string?> hash = default, Option<string?> title = default, Option<string?> action = default, Option<string?> expectedResult = default, Option<List<SharedStepContent>?> steps = default, Option<string?> data = default, Option<List<long>?> cases = default, Option<int?> casesCount = default, Option<string?> created = default, Option<string?> updated = default, Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default)
        {
            HashOption = hash;
            TitleOption = title;
            ActionOption = action;
            ExpectedResultOption = expectedResult;
            StepsOption = steps;
            DataOption = data;
            CasesOption = cases;
            CasesCountOption = casesCount;
            CreatedOption = created;
            UpdatedOption = updated;
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Hash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HashOption { get; private set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [JsonPropertyName("hash")]
        public string? Hash { get { return this.HashOption; } set { this.HashOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Action
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ActionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [JsonPropertyName("action")]
        public string? Action { get { return this.ActionOption; } set { this.ActionOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ExpectedResult
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExpectedResultOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExpectedResult
        /// </summary>
        [JsonPropertyName("expected_result")]
        public string? ExpectedResult { get { return this.ExpectedResultOption; } set { this.ExpectedResultOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Steps
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SharedStepContent>?> StepsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [JsonPropertyName("steps")]
        public List<SharedStepContent>? Steps { get { return this.StepsOption; } set { this.StepsOption = new Option<List<SharedStepContent>?>(value); } }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public string? Data { get { return this.DataOption; } set { this.DataOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Cases
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<long>?> CasesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Cases
        /// </summary>
        [JsonPropertyName("cases")]
        public List<long>? Cases { get { return this.CasesOption; } set { this.CasesOption = new Option<List<long>?>(value); } }

        /// <summary>
        /// Used to track the state of CasesCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CasesCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets CasesCount
        /// </summary>
        [JsonPropertyName("cases_count")]
        public int? CasesCount { get { return this.CasesCountOption; } set { this.CasesCountOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Created
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedOption { get; private set; }

        /// <summary>
        /// Deprecated, use the &#x60;created_at&#x60; property instead.
        /// </summary>
        /// <value>Deprecated, use the &#x60;created_at&#x60; property instead.</value>
        /* <example>2021-12-30 19:23:59</example> */
        [JsonPropertyName("created")]
        [Obsolete]
        public string? Created { get { return this.CreatedOption; } set { this.CreatedOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Updated
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedOption { get; private set; }

        /// <summary>
        /// Deprecated, use the &#x60;updated_at&#x60; property instead.
        /// </summary>
        /// <value>Deprecated, use the &#x60;updated_at&#x60; property instead.</value>
        /* <example>2021-12-30 19:23:59</example> */
        [JsonPropertyName("updated")]
        [Obsolete]
        public string? Updated { get { return this.UpdatedOption; } set { this.UpdatedOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2021-12-30T19:23:59Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2021-12-30T19:23:59Z</example> */
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SharedStep {\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  ExpectedResult: ").Append(ExpectedResult).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Cases: ").Append(Cases).Append("\n");
            sb.Append("  CasesCount: ").Append(CasesCount).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SharedStep" />
    /// </summary>
    public class SharedStepJsonConverter : JsonConverter<SharedStep>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SharedStep" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SharedStep Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> hash = default;
            Option<string?> title = default;
            Option<string?> action = default;
            Option<string?> expectedResult = default;
            Option<List<SharedStepContent>?> steps = default;
            Option<string?> data = default;
            Option<List<long>?> cases = default;
            Option<int?> casesCount = default;
            Option<string?> created = default;
            Option<string?> updated = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "hash":
                            hash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "action":
                            action = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expected_result":
                            expectedResult = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "steps":
                            steps = new Option<List<SharedStepContent>?>(JsonSerializer.Deserialize<List<SharedStepContent>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "data":
                            data = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "cases":
                            cases = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "cases_count":
                            casesCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "created":
                            created = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated":
                            updated = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (hash.IsSet && hash.Value == null)
                throw new ArgumentNullException(nameof(hash), "Property is not nullable for class SharedStep.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class SharedStep.");

            if (action.IsSet && action.Value == null)
                throw new ArgumentNullException(nameof(action), "Property is not nullable for class SharedStep.");

            if (expectedResult.IsSet && expectedResult.Value == null)
                throw new ArgumentNullException(nameof(expectedResult), "Property is not nullable for class SharedStep.");

            if (steps.IsSet && steps.Value == null)
                throw new ArgumentNullException(nameof(steps), "Property is not nullable for class SharedStep.");

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class SharedStep.");

            if (cases.IsSet && cases.Value == null)
                throw new ArgumentNullException(nameof(cases), "Property is not nullable for class SharedStep.");

            if (casesCount.IsSet && casesCount.Value == null)
                throw new ArgumentNullException(nameof(casesCount), "Property is not nullable for class SharedStep.");

            if (created.IsSet && created.Value == null)
                throw new ArgumentNullException(nameof(created), "Property is not nullable for class SharedStep.");

            if (updated.IsSet && updated.Value == null)
                throw new ArgumentNullException(nameof(updated), "Property is not nullable for class SharedStep.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class SharedStep.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class SharedStep.");

            return new SharedStep(hash, title, action, expectedResult, steps, data, cases, casesCount, created, updated, createdAt, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="SharedStep" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sharedStep"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SharedStep sharedStep, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sharedStep, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SharedStep" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sharedStep"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SharedStep sharedStep, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sharedStep.HashOption.IsSet && sharedStep.Hash == null)
                throw new ArgumentNullException(nameof(sharedStep.Hash), "Property is required for class SharedStep.");

            if (sharedStep.TitleOption.IsSet && sharedStep.Title == null)
                throw new ArgumentNullException(nameof(sharedStep.Title), "Property is required for class SharedStep.");

            if (sharedStep.ActionOption.IsSet && sharedStep.Action == null)
                throw new ArgumentNullException(nameof(sharedStep.Action), "Property is required for class SharedStep.");

            if (sharedStep.ExpectedResultOption.IsSet && sharedStep.ExpectedResult == null)
                throw new ArgumentNullException(nameof(sharedStep.ExpectedResult), "Property is required for class SharedStep.");

            if (sharedStep.StepsOption.IsSet && sharedStep.Steps == null)
                throw new ArgumentNullException(nameof(sharedStep.Steps), "Property is required for class SharedStep.");

            if (sharedStep.DataOption.IsSet && sharedStep.Data == null)
                throw new ArgumentNullException(nameof(sharedStep.Data), "Property is required for class SharedStep.");

            if (sharedStep.CasesOption.IsSet && sharedStep.Cases == null)
                throw new ArgumentNullException(nameof(sharedStep.Cases), "Property is required for class SharedStep.");

            if (sharedStep.CreatedOption.IsSet && sharedStep.Created == null)
                throw new ArgumentNullException(nameof(sharedStep.Created), "Property is required for class SharedStep.");

            if (sharedStep.UpdatedOption.IsSet && sharedStep.Updated == null)
                throw new ArgumentNullException(nameof(sharedStep.Updated), "Property is required for class SharedStep.");

            if (sharedStep.HashOption.IsSet)
                writer.WriteString("hash", sharedStep.Hash);

            if (sharedStep.TitleOption.IsSet)
                writer.WriteString("title", sharedStep.Title);

            if (sharedStep.ActionOption.IsSet)
                writer.WriteString("action", sharedStep.Action);

            if (sharedStep.ExpectedResultOption.IsSet)
                writer.WriteString("expected_result", sharedStep.ExpectedResult);

            if (sharedStep.StepsOption.IsSet)
            {
                writer.WritePropertyName("steps");
                JsonSerializer.Serialize(writer, sharedStep.Steps, jsonSerializerOptions);
            }
            if (sharedStep.DataOption.IsSet)
                writer.WriteString("data", sharedStep.Data);

            if (sharedStep.CasesOption.IsSet)
            {
                writer.WritePropertyName("cases");
                JsonSerializer.Serialize(writer, sharedStep.Cases, jsonSerializerOptions);
            }
            if (sharedStep.CasesCountOption.IsSet)
                writer.WriteNumber("cases_count", sharedStep.CasesCountOption.Value!.Value);

            if (sharedStep.CreatedOption.IsSet)
                writer.WriteString("created", sharedStep.Created);

            if (sharedStep.UpdatedOption.IsSet)
                writer.WriteString("updated", sharedStep.Updated);

            if (sharedStep.CreatedAtOption.IsSet)
                writer.WriteString("created_at", sharedStep.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (sharedStep.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", sharedStep.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));
        }
    }
}
