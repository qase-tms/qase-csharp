// <auto-generated>
/*
 * Qase.io TestOps API v1
 *
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V1.Client;

namespace Qase.ApiClient.V1.Model
{
    /// <summary>
    /// TestStepResultCreate
    /// </summary>
    public partial class TestStepResultCreate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestStepResultCreate" /> class.
        /// </summary>
        /// <param name="status">status</param>
        /// <param name="position">position</param>
        /// <param name="comment">comment</param>
        /// <param name="attachments">attachments</param>
        /// <param name="action">action</param>
        /// <param name="expectedResult">expectedResult</param>
        /// <param name="data">data</param>
        /// <param name="steps">Nested steps results may be passed here. Use same structure for them.</param>
        [JsonConstructor]
        public TestStepResultCreate(StatusEnum status, Option<int?> position = default, Option<string?> comment = default, Option<List<string>?> attachments = default, Option<string?> action = default, Option<string?> expectedResult = default, Option<string?> data = default, Option<List<Object>?> steps = default)
        {
            Status = status;
            PositionOption = position;
            CommentOption = comment;
            AttachmentsOption = attachments;
            ActionOption = action;
            ExpectedResultOption = expectedResult;
            DataOption = data;
            StepsOption = steps;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Status
        /// </summary>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Passed for value: passed
            /// </summary>
            Passed = 1,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            Failed = 2,

            /// <summary>
            /// Enum Blocked for value: blocked
            /// </summary>
            Blocked = 3,

            /// <summary>
            /// Enum InProgress for value: in_progress
            /// </summary>
            InProgress = 4
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("passed"))
                return StatusEnum.Passed;

            if (value.Equals("failed"))
                return StatusEnum.Failed;

            if (value.Equals("blocked"))
                return StatusEnum.Blocked;

            if (value.Equals("in_progress"))
                return StatusEnum.InProgress;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("passed"))
                return StatusEnum.Passed;

            if (value.Equals("failed"))
                return StatusEnum.Failed;

            if (value.Equals("blocked"))
                return StatusEnum.Blocked;

            if (value.Equals("in_progress"))
                return StatusEnum.InProgress;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.Passed)
                return "passed";

            if (value == StatusEnum.Failed)
                return "failed";

            if (value == StatusEnum.Blocked)
                return "blocked";

            if (value == StatusEnum.InProgress)
                return "in_progress";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Used to track the state of Position
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PositionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [JsonPropertyName("position")]
        [Obsolete]
        public int? Position { get { return this.PositionOption; } set { this.PositionOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Attachments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> AttachmentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [JsonPropertyName("attachments")]
        public List<string>? Attachments { get { return this.AttachmentsOption; } set { this.AttachmentsOption = new Option<List<string>?>(value); } }

        /// <summary>
        /// Used to track the state of Action
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ActionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [JsonPropertyName("action")]
        public string? Action { get { return this.ActionOption; } set { this.ActionOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ExpectedResult
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExpectedResultOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExpectedResult
        /// </summary>
        [JsonPropertyName("expected_result")]
        public string? ExpectedResult { get { return this.ExpectedResultOption; } set { this.ExpectedResultOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public string? Data { get { return this.DataOption; } set { this.DataOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Steps
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Object>?> StepsOption { get; private set; }

        /// <summary>
        /// Nested steps results may be passed here. Use same structure for them.
        /// </summary>
        /// <value>Nested steps results may be passed here. Use same structure for them.</value>
        [JsonPropertyName("steps")]
        public List<Object>? Steps { get { return this.StepsOption; } set { this.StepsOption = new Option<List<Object>?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestStepResultCreate {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  ExpectedResult: ").Append(ExpectedResult).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TestStepResultCreate" />
    /// </summary>
    public class TestStepResultCreateJsonConverter : JsonConverter<TestStepResultCreate>
    {
        /// <summary>
        /// Deserializes json to <see cref="TestStepResultCreate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TestStepResultCreate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<TestStepResultCreate.StatusEnum?> status = default;
            Option<int?> position = default;
            Option<string?> comment = default;
            Option<List<string>?> attachments = default;
            Option<string?> action = default;
            Option<string?> expectedResult = default;
            Option<string?> data = default;
            Option<List<Object>?> steps = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<TestStepResultCreate.StatusEnum?>(TestStepResultCreate.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "position":
                            position = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "attachments":
                            attachments = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "action":
                            action = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expected_result":
                            expectedResult = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "data":
                            data = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "steps":
                            steps = new Option<List<Object>?>(JsonSerializer.Deserialize<List<Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class TestStepResultCreate.", nameof(status));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class TestStepResultCreate.");

            if (position.IsSet && position.Value == null)
                throw new ArgumentNullException(nameof(position), "Property is not nullable for class TestStepResultCreate.");

            if (action.IsSet && action.Value == null)
                throw new ArgumentNullException(nameof(action), "Property is not nullable for class TestStepResultCreate.");

            if (steps.IsSet && steps.Value == null)
                throw new ArgumentNullException(nameof(steps), "Property is not nullable for class TestStepResultCreate.");

            return new TestStepResultCreate(status.Value!.Value!, position, comment, attachments, action, expectedResult, data, steps);
        }

        /// <summary>
        /// Serializes a <see cref="TestStepResultCreate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="testStepResultCreate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TestStepResultCreate testStepResultCreate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, testStepResultCreate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TestStepResultCreate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="testStepResultCreate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TestStepResultCreate testStepResultCreate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (testStepResultCreate.ActionOption.IsSet && testStepResultCreate.Action == null)
                throw new ArgumentNullException(nameof(testStepResultCreate.Action), "Property is required for class TestStepResultCreate.");

            if (testStepResultCreate.StepsOption.IsSet && testStepResultCreate.Steps == null)
                throw new ArgumentNullException(nameof(testStepResultCreate.Steps), "Property is required for class TestStepResultCreate.");

            var statusRawValue = TestStepResultCreate.StatusEnumToJsonValue(testStepResultCreate.Status);
            writer.WriteString("status", statusRawValue);
            if (testStepResultCreate.PositionOption.IsSet)
                writer.WriteNumber("position", testStepResultCreate.PositionOption.Value!.Value);

            if (testStepResultCreate.CommentOption.IsSet)
                if (testStepResultCreate.CommentOption.Value != null)
                    writer.WriteString("comment", testStepResultCreate.Comment);
                else
                    writer.WriteNull("comment");

            if (testStepResultCreate.AttachmentsOption.IsSet)
                if (testStepResultCreate.AttachmentsOption.Value != null)
                {
                    writer.WritePropertyName("attachments");
                    JsonSerializer.Serialize(writer, testStepResultCreate.Attachments, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("attachments");
            if (testStepResultCreate.ActionOption.IsSet)
                writer.WriteString("action", testStepResultCreate.Action);

            if (testStepResultCreate.ExpectedResultOption.IsSet)
                if (testStepResultCreate.ExpectedResultOption.Value != null)
                    writer.WriteString("expected_result", testStepResultCreate.ExpectedResult);
                else
                    writer.WriteNull("expected_result");

            if (testStepResultCreate.DataOption.IsSet)
                if (testStepResultCreate.DataOption.Value != null)
                    writer.WriteString("data", testStepResultCreate.Data);
                else
                    writer.WriteNull("data");

            if (testStepResultCreate.StepsOption.IsSet)
            {
                writer.WritePropertyName("steps");
                JsonSerializer.Serialize(writer, testStepResultCreate.Steps, jsonSerializerOptions);
            }
        }
    }
}
