// <auto-generated>
/*
 * Qase.io TestOps API v2
 *
 * Qase TestOps API v2 Specification.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V2.Client;

namespace Qase.ApiClient.V2.Model
{
    /// <summary>
    /// ResultCreate
    /// </summary>
    public partial class ResultCreate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultCreate" /> class.
        /// </summary>
        /// <param name="title">title</param>
        /// <param name="execution">execution</param>
        /// <param name="id">If passed, used as an idempotency key</param>
        /// <param name="signature">signature</param>
        /// <param name="testopsId">ID of the test case. Cannot be specified together with testopd_ids.</param>
        /// <param name="testopsIds">IDs of the test cases. Cannot be specified together with testopd_id.</param>
        /// <param name="fields">fields</param>
        /// <param name="attachments">attachments</param>
        /// <param name="steps">steps</param>
        /// <param name="stepsType">stepsType</param>
        /// <param name="params">params</param>
        /// <param name="paramGroups">List parameter groups by name only. Add their values in the &#39;params&#39; field</param>
        /// <param name="relations">relations</param>
        /// <param name="message">message</param>
        /// <param name="defect">If true and the result is failed, the defect associated with the result will be created</param>
        [JsonConstructor]
        public ResultCreate(string title, ResultExecution execution, Option<string?> id = default, Option<string?> signature = default, Option<long?> testopsId = default, Option<List<long>?> testopsIds = default, Option<ResultCreateFields?> fields = default, Option<List<string>?> attachments = default, Option<List<ResultStep>?> steps = default, Option<ResultStepsType?> stepsType = default, Option<Dictionary<string, string>?> @params = default, Option<List<List<string>>?> paramGroups = default, Option<ResultRelations?> relations = default, Option<string?> message = default, Option<bool?> defect = default)
        {
            Title = title;
            Execution = execution;
            IdOption = id;
            SignatureOption = signature;
            TestopsIdOption = testopsId;
            TestopsIdsOption = testopsIds;
            FieldsOption = fields;
            AttachmentsOption = attachments;
            StepsOption = steps;
            StepsTypeOption = stepsType;
            ParamsOption = @params;
            ParamGroupsOption = paramGroups;
            RelationsOption = relations;
            MessageOption = message;
            DefectOption = defect;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of StepsType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ResultStepsType?> StepsTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets StepsType
        /// </summary>
        [JsonPropertyName("steps_type")]
        public ResultStepsType? StepsType { get { return this.StepsTypeOption; } set { this.StepsTypeOption = new Option<ResultStepsType?>(value); } }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Execution
        /// </summary>
        [JsonPropertyName("execution")]
        public ResultExecution Execution { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// If passed, used as an idempotency key
        /// </summary>
        /// <value>If passed, used as an idempotency key</value>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Signature
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SignatureOption { get; private set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [JsonPropertyName("signature")]
        public string? Signature { get { return this.SignatureOption; } set { this.SignatureOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of TestopsId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TestopsIdOption { get; private set; }

        /// <summary>
        /// ID of the test case. Cannot be specified together with testopd_ids.
        /// </summary>
        /// <value>ID of the test case. Cannot be specified together with testopd_ids.</value>
        [JsonPropertyName("testops_id")]
        public long? TestopsId { get { return this.TestopsIdOption; } set { this.TestopsIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of TestopsIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<long>?> TestopsIdsOption { get; private set; }

        /// <summary>
        /// IDs of the test cases. Cannot be specified together with testopd_id.
        /// </summary>
        /// <value>IDs of the test cases. Cannot be specified together with testopd_id.</value>
        [JsonPropertyName("testops_ids")]
        public List<long>? TestopsIds { get { return this.TestopsIdsOption; } set { this.TestopsIdsOption = new Option<List<long>?>(value); } }

        /// <summary>
        /// Used to track the state of Fields
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ResultCreateFields?> FieldsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [JsonPropertyName("fields")]
        public ResultCreateFields? Fields { get { return this.FieldsOption; } set { this.FieldsOption = new Option<ResultCreateFields?>(value); } }

        /// <summary>
        /// Used to track the state of Attachments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> AttachmentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [JsonPropertyName("attachments")]
        public List<string>? Attachments { get { return this.AttachmentsOption; } set { this.AttachmentsOption = new Option<List<string>?>(value); } }

        /// <summary>
        /// Used to track the state of Steps
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ResultStep>?> StepsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [JsonPropertyName("steps")]
        public List<ResultStep>? Steps { get { return this.StepsOption; } set { this.StepsOption = new Option<List<ResultStep>?>(value); } }

        /// <summary>
        /// Used to track the state of Params
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> ParamsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Params
        /// </summary>
        [JsonPropertyName("params")]
        public Dictionary<string, string>? Params { get { return this.ParamsOption; } set { this.ParamsOption = new Option<Dictionary<string, string>?>(value); } }

        /// <summary>
        /// Used to track the state of ParamGroups
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<List<string>>?> ParamGroupsOption { get; private set; }

        /// <summary>
        /// List parameter groups by name only. Add their values in the &#39;params&#39; field
        /// </summary>
        /// <value>List parameter groups by name only. Add their values in the &#39;params&#39; field</value>
        [JsonPropertyName("param_groups")]
        public List<List<string>>? ParamGroups { get { return this.ParamGroupsOption; } set { this.ParamGroupsOption = new Option<List<List<string>>?>(value); } }

        /// <summary>
        /// Used to track the state of Relations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ResultRelations?> RelationsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Relations
        /// </summary>
        [JsonPropertyName("relations")]
        public ResultRelations? Relations { get { return this.RelationsOption; } set { this.RelationsOption = new Option<ResultRelations?>(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public string? Message { get { return this.MessageOption; } set { this.MessageOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Defect
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DefectOption { get; private set; }

        /// <summary>
        /// If true and the result is failed, the defect associated with the result will be created
        /// </summary>
        /// <value>If true and the result is failed, the defect associated with the result will be created</value>
        [JsonPropertyName("defect")]
        public bool? Defect { get { return this.DefectOption; } set { this.DefectOption = new Option<bool?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResultCreate {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Execution: ").Append(Execution).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  TestopsId: ").Append(TestopsId).Append("\n");
            sb.Append("  TestopsIds: ").Append(TestopsIds).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  StepsType: ").Append(StepsType).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  ParamGroups: ").Append(ParamGroups).Append("\n");
            sb.Append("  Relations: ").Append(Relations).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Defect: ").Append(Defect).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResultCreate" />
    /// </summary>
    public class ResultCreateJsonConverter : JsonConverter<ResultCreate>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResultCreate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResultCreate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<ResultExecution?> execution = default;
            Option<string?> id = default;
            Option<string?> signature = default;
            Option<long?> testopsId = default;
            Option<List<long>?> testopsIds = default;
            Option<ResultCreateFields?> fields = default;
            Option<List<string>?> attachments = default;
            Option<List<ResultStep>?> steps = default;
            Option<ResultStepsType?> stepsType = default;
            Option<Dictionary<string, string>?> varParams = default;
            Option<List<List<string>>?> paramGroups = default;
            Option<ResultRelations?> relations = default;
            Option<string?> message = default;
            Option<bool?> defect = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "execution":
                            execution = new Option<ResultExecution?>(JsonSerializer.Deserialize<ResultExecution>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "signature":
                            signature = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "testops_id":
                            testopsId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "testops_ids":
                            testopsIds = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fields":
                            fields = new Option<ResultCreateFields?>(JsonSerializer.Deserialize<ResultCreateFields>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "attachments":
                            attachments = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "steps":
                            steps = new Option<List<ResultStep>?>(JsonSerializer.Deserialize<List<ResultStep>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "steps_type":
                            string? stepsTypeRawValue = utf8JsonReader.GetString();
                            if (stepsTypeRawValue != null)
                                stepsType = new Option<ResultStepsType?>(ResultStepsTypeValueConverter.FromStringOrDefault(stepsTypeRawValue));
                            break;
                        case "params":
                            varParams = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "param_groups":
                            paramGroups = new Option<List<List<string>>?>(JsonSerializer.Deserialize<List<List<string>>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "relations":
                            relations = new Option<ResultRelations?>(JsonSerializer.Deserialize<ResultRelations>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "defect":
                            defect = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class ResultCreate.", nameof(title));

            if (!execution.IsSet)
                throw new ArgumentException("Property is required for class ResultCreate.", nameof(execution));

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class ResultCreate.");

            if (execution.IsSet && execution.Value == null)
                throw new ArgumentNullException(nameof(execution), "Property is not nullable for class ResultCreate.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ResultCreate.");

            if (signature.IsSet && signature.Value == null)
                throw new ArgumentNullException(nameof(signature), "Property is not nullable for class ResultCreate.");

            if (fields.IsSet && fields.Value == null)
                throw new ArgumentNullException(nameof(fields), "Property is not nullable for class ResultCreate.");

            if (attachments.IsSet && attachments.Value == null)
                throw new ArgumentNullException(nameof(attachments), "Property is not nullable for class ResultCreate.");

            if (steps.IsSet && steps.Value == null)
                throw new ArgumentNullException(nameof(steps), "Property is not nullable for class ResultCreate.");

            if (varParams.IsSet && varParams.Value == null)
                throw new ArgumentNullException(nameof(varParams), "Property is not nullable for class ResultCreate.");

            if (defect.IsSet && defect.Value == null)
                throw new ArgumentNullException(nameof(defect), "Property is not nullable for class ResultCreate.");

            return new ResultCreate(title.Value!, execution.Value!, id, signature, testopsId, testopsIds, fields, attachments, steps, stepsType, varParams, paramGroups, relations, message, defect);
        }

        /// <summary>
        /// Serializes a <see cref="ResultCreate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultCreate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResultCreate resultCreate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, resultCreate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResultCreate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultCreate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResultCreate resultCreate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (resultCreate.Title == null)
                throw new ArgumentNullException(nameof(resultCreate.Title), "Property is required for class ResultCreate.");

            if (resultCreate.Execution == null)
                throw new ArgumentNullException(nameof(resultCreate.Execution), "Property is required for class ResultCreate.");

            if (resultCreate.IdOption.IsSet && resultCreate.Id == null)
                throw new ArgumentNullException(nameof(resultCreate.Id), "Property is required for class ResultCreate.");

            if (resultCreate.SignatureOption.IsSet && resultCreate.Signature == null)
                throw new ArgumentNullException(nameof(resultCreate.Signature), "Property is required for class ResultCreate.");

            if (resultCreate.FieldsOption.IsSet && resultCreate.Fields == null)
                throw new ArgumentNullException(nameof(resultCreate.Fields), "Property is required for class ResultCreate.");

            if (resultCreate.AttachmentsOption.IsSet && resultCreate.Attachments == null)
                throw new ArgumentNullException(nameof(resultCreate.Attachments), "Property is required for class ResultCreate.");

            if (resultCreate.StepsOption.IsSet && resultCreate.Steps == null)
                throw new ArgumentNullException(nameof(resultCreate.Steps), "Property is required for class ResultCreate.");

            if (resultCreate.ParamsOption.IsSet && resultCreate.Params == null)
                throw new ArgumentNullException(nameof(resultCreate.Params), "Property is required for class ResultCreate.");

            writer.WriteString("title", resultCreate.Title);

            writer.WritePropertyName("execution");
            JsonSerializer.Serialize(writer, resultCreate.Execution, jsonSerializerOptions);
            if (resultCreate.IdOption.IsSet)
                writer.WriteString("id", resultCreate.Id);

            if (resultCreate.SignatureOption.IsSet)
                writer.WriteString("signature", resultCreate.Signature);

            if (resultCreate.TestopsIdOption.IsSet)
                if (resultCreate.TestopsIdOption.Value != null)
                    writer.WriteNumber("testops_id", resultCreate.TestopsIdOption.Value!.Value);
                else
                    writer.WriteNull("testops_id");

            if (resultCreate.TestopsIdsOption.IsSet)
                if (resultCreate.TestopsIdsOption.Value != null)
                {
                    writer.WritePropertyName("testops_ids");
                    JsonSerializer.Serialize(writer, resultCreate.TestopsIds, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("testops_ids");
            if (resultCreate.FieldsOption.IsSet)
            {
                writer.WritePropertyName("fields");
                JsonSerializer.Serialize(writer, resultCreate.Fields, jsonSerializerOptions);
            }
            if (resultCreate.AttachmentsOption.IsSet)
            {
                writer.WritePropertyName("attachments");
                JsonSerializer.Serialize(writer, resultCreate.Attachments, jsonSerializerOptions);
            }
            if (resultCreate.StepsOption.IsSet)
            {
                writer.WritePropertyName("steps");
                JsonSerializer.Serialize(writer, resultCreate.Steps, jsonSerializerOptions);
            }
            if (resultCreate.StepsTypeOption.IsSet)
                if (resultCreate.StepsTypeOption!.Value != null)
                {
                    var stepsTypeRawValue = ResultStepsTypeValueConverter.ToJsonValue(resultCreate.StepsTypeOption.Value!.Value);
                    writer.WriteString("steps_type", stepsTypeRawValue);
                }
                else
                    writer.WriteNull("steps_type");
            if (resultCreate.ParamsOption.IsSet)
            {
                writer.WritePropertyName("params");
                JsonSerializer.Serialize(writer, resultCreate.Params, jsonSerializerOptions);
            }
            if (resultCreate.ParamGroupsOption.IsSet)
                if (resultCreate.ParamGroupsOption.Value != null)
                {
                    writer.WritePropertyName("param_groups");
                    JsonSerializer.Serialize(writer, resultCreate.ParamGroups, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("param_groups");
            if (resultCreate.RelationsOption.IsSet)
                if (resultCreate.RelationsOption.Value != null)
                {
                    writer.WritePropertyName("relations");
                    JsonSerializer.Serialize(writer, resultCreate.Relations, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("relations");
            if (resultCreate.MessageOption.IsSet)
                if (resultCreate.MessageOption.Value != null)
                    writer.WriteString("message", resultCreate.Message);
                else
                    writer.WriteNull("message");

            if (resultCreate.DefectOption.IsSet)
                writer.WriteBoolean("defect", resultCreate.DefectOption.Value!.Value);
        }
    }
}
