// <auto-generated>
/*
 * Qase.io TestOps API v2
 *
 * Qase TestOps API v2 Specification.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V2.Client;

namespace Qase.ApiClient.V2.Model
{
    /// <summary>
    /// RelationSuiteItem
    /// </summary>
    public partial class RelationSuiteItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelationSuiteItem" /> class.
        /// </summary>
        /// <param name="title">title</param>
        /// <param name="publicId">publicId</param>
        [JsonConstructor]
        public RelationSuiteItem(string title, Option<long?> publicId = default)
        {
            Title = title;
            PublicIdOption = publicId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Used to track the state of PublicId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> PublicIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets PublicId
        /// </summary>
        [JsonPropertyName("public_id")]
        public long? PublicId { get { return this.PublicIdOption; } set { this.PublicIdOption = new Option<long?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RelationSuiteItem {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  PublicId: ").Append(PublicId).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RelationSuiteItem" />
    /// </summary>
    public class RelationSuiteItemJsonConverter : JsonConverter<RelationSuiteItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="RelationSuiteItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RelationSuiteItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<long?> publicId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "public_id":
                            publicId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class RelationSuiteItem.", nameof(title));

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class RelationSuiteItem.");

            return new RelationSuiteItem(title.Value!, publicId);
        }

        /// <summary>
        /// Serializes a <see cref="RelationSuiteItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="relationSuiteItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RelationSuiteItem relationSuiteItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, relationSuiteItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RelationSuiteItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="relationSuiteItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RelationSuiteItem relationSuiteItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (relationSuiteItem.Title == null)
                throw new ArgumentNullException(nameof(relationSuiteItem.Title), "Property is required for class RelationSuiteItem.");

            writer.WriteString("title", relationSuiteItem.Title);

            if (relationSuiteItem.PublicIdOption.IsSet)
                if (relationSuiteItem.PublicIdOption.Value != null)
                    writer.WriteNumber("public_id", relationSuiteItem.PublicIdOption.Value!.Value);
                else
                    writer.WriteNull("public_id");
        }
    }
}
