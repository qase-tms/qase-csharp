// <auto-generated>
/*
 * Qase.io TestOps API v2
 *
 * Qase TestOps API v2 Specification.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V2.Client;

namespace Qase.ApiClient.V2.Model
{
    /// <summary>
    /// ResultCreateFields
    /// </summary>
    public partial class ResultCreateFields : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultCreateFields" /> class.
        /// </summary>
        /// <param name="author">Author of the related test case (member id, name or email). If set and test case auto-creation is enabled, the author will be used to create the test case</param>
        /// <param name="description">description</param>
        /// <param name="preconditions">preconditions</param>
        /// <param name="postconditions">postconditions</param>
        /// <param name="layer">layer</param>
        /// <param name="severity">severity</param>
        /// <param name="priority">priority</param>
        /// <param name="behavior">behavior</param>
        /// <param name="type">type</param>
        /// <param name="muted">muted</param>
        /// <param name="isFlaky">isFlaky</param>
        /// <param name="executedBy">User who executed the test (member id, name or email)</param>
        [JsonConstructor]
        public ResultCreateFields(Option<string?> author = default, Option<string?> description = default, Option<string?> preconditions = default, Option<string?> postconditions = default, Option<string?> layer = default, Option<string?> severity = default, Option<string?> priority = default, Option<string?> behavior = default, Option<string?> type = default, Option<string?> muted = default, Option<string?> isFlaky = default, Option<string?> executedBy = default)
        {
            AuthorOption = author;
            DescriptionOption = description;
            PreconditionsOption = preconditions;
            PostconditionsOption = postconditions;
            LayerOption = layer;
            SeverityOption = severity;
            PriorityOption = priority;
            BehaviorOption = behavior;
            TypeOption = type;
            MutedOption = muted;
            IsFlakyOption = isFlaky;
            ExecutedByOption = executedBy;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Author
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AuthorOption { get; private set; }

        /// <summary>
        /// Author of the related test case (member id, name or email). If set and test case auto-creation is enabled, the author will be used to create the test case
        /// </summary>
        /// <value>Author of the related test case (member id, name or email). If set and test case auto-creation is enabled, the author will be used to create the test case</value>
        [JsonPropertyName("author")]
        public string? Author { get { return this.AuthorOption; } set { this.AuthorOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Preconditions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PreconditionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Preconditions
        /// </summary>
        [JsonPropertyName("preconditions")]
        public string? Preconditions { get { return this.PreconditionsOption; } set { this.PreconditionsOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Postconditions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PostconditionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Postconditions
        /// </summary>
        [JsonPropertyName("postconditions")]
        public string? Postconditions { get { return this.PostconditionsOption; } set { this.PostconditionsOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Layer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LayerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Layer
        /// </summary>
        [JsonPropertyName("layer")]
        public string? Layer { get { return this.LayerOption; } set { this.LayerOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Severity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SeverityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [JsonPropertyName("severity")]
        public string? Severity { get { return this.SeverityOption; } set { this.SeverityOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Priority
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PriorityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [JsonPropertyName("priority")]
        public string? Priority { get { return this.PriorityOption; } set { this.PriorityOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Behavior
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BehaviorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Behavior
        /// </summary>
        [JsonPropertyName("behavior")]
        public string? Behavior { get { return this.BehaviorOption; } set { this.BehaviorOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Muted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MutedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Muted
        /// </summary>
        [JsonPropertyName("muted")]
        public string? Muted { get { return this.MutedOption; } set { this.MutedOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of IsFlaky
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IsFlakyOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsFlaky
        /// </summary>
        [JsonPropertyName("is_flaky")]
        public string? IsFlaky { get { return this.IsFlakyOption; } set { this.IsFlakyOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ExecutedBy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExecutedByOption { get; private set; }

        /// <summary>
        /// User who executed the test (member id, name or email)
        /// </summary>
        /// <value>User who executed the test (member id, name or email)</value>
        [JsonPropertyName("executed_by")]
        public string? ExecutedBy { get { return this.ExecutedByOption; } set { this.ExecutedByOption = new Option<string?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResultCreateFields {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Preconditions: ").Append(Preconditions).Append("\n");
            sb.Append("  Postconditions: ").Append(Postconditions).Append("\n");
            sb.Append("  Layer: ").Append(Layer).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Behavior: ").Append(Behavior).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Muted: ").Append(Muted).Append("\n");
            sb.Append("  IsFlaky: ").Append(IsFlaky).Append("\n");
            sb.Append("  ExecutedBy: ").Append(ExecutedBy).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResultCreateFields" />
    /// </summary>
    public class ResultCreateFieldsJsonConverter : JsonConverter<ResultCreateFields>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResultCreateFields" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResultCreateFields Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> author = default;
            Option<string?> description = default;
            Option<string?> preconditions = default;
            Option<string?> postconditions = default;
            Option<string?> layer = default;
            Option<string?> severity = default;
            Option<string?> priority = default;
            Option<string?> behavior = default;
            Option<string?> type = default;
            Option<string?> muted = default;
            Option<string?> isFlaky = default;
            Option<string?> executedBy = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "author":
                            author = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "preconditions":
                            preconditions = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "postconditions":
                            postconditions = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "layer":
                            layer = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "severity":
                            severity = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "priority":
                            priority = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "behavior":
                            behavior = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "muted":
                            muted = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_flaky":
                            isFlaky = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "executed_by":
                            executedBy = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (author.IsSet && author.Value == null)
                throw new ArgumentNullException(nameof(author), "Property is not nullable for class ResultCreateFields.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class ResultCreateFields.");

            if (preconditions.IsSet && preconditions.Value == null)
                throw new ArgumentNullException(nameof(preconditions), "Property is not nullable for class ResultCreateFields.");

            if (postconditions.IsSet && postconditions.Value == null)
                throw new ArgumentNullException(nameof(postconditions), "Property is not nullable for class ResultCreateFields.");

            if (layer.IsSet && layer.Value == null)
                throw new ArgumentNullException(nameof(layer), "Property is not nullable for class ResultCreateFields.");

            if (severity.IsSet && severity.Value == null)
                throw new ArgumentNullException(nameof(severity), "Property is not nullable for class ResultCreateFields.");

            if (priority.IsSet && priority.Value == null)
                throw new ArgumentNullException(nameof(priority), "Property is not nullable for class ResultCreateFields.");

            if (behavior.IsSet && behavior.Value == null)
                throw new ArgumentNullException(nameof(behavior), "Property is not nullable for class ResultCreateFields.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ResultCreateFields.");

            if (muted.IsSet && muted.Value == null)
                throw new ArgumentNullException(nameof(muted), "Property is not nullable for class ResultCreateFields.");

            if (isFlaky.IsSet && isFlaky.Value == null)
                throw new ArgumentNullException(nameof(isFlaky), "Property is not nullable for class ResultCreateFields.");

            if (executedBy.IsSet && executedBy.Value == null)
                throw new ArgumentNullException(nameof(executedBy), "Property is not nullable for class ResultCreateFields.");

            return new ResultCreateFields(author, description, preconditions, postconditions, layer, severity, priority, behavior, type, muted, isFlaky, executedBy);
        }

        /// <summary>
        /// Serializes a <see cref="ResultCreateFields" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultCreateFields"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResultCreateFields resultCreateFields, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, resultCreateFields, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResultCreateFields" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultCreateFields"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResultCreateFields resultCreateFields, JsonSerializerOptions jsonSerializerOptions)
        {
            if (resultCreateFields.AuthorOption.IsSet && resultCreateFields.Author == null)
                throw new ArgumentNullException(nameof(resultCreateFields.Author), "Property is required for class ResultCreateFields.");

            if (resultCreateFields.DescriptionOption.IsSet && resultCreateFields.Description == null)
                throw new ArgumentNullException(nameof(resultCreateFields.Description), "Property is required for class ResultCreateFields.");

            if (resultCreateFields.PreconditionsOption.IsSet && resultCreateFields.Preconditions == null)
                throw new ArgumentNullException(nameof(resultCreateFields.Preconditions), "Property is required for class ResultCreateFields.");

            if (resultCreateFields.PostconditionsOption.IsSet && resultCreateFields.Postconditions == null)
                throw new ArgumentNullException(nameof(resultCreateFields.Postconditions), "Property is required for class ResultCreateFields.");

            if (resultCreateFields.LayerOption.IsSet && resultCreateFields.Layer == null)
                throw new ArgumentNullException(nameof(resultCreateFields.Layer), "Property is required for class ResultCreateFields.");

            if (resultCreateFields.SeverityOption.IsSet && resultCreateFields.Severity == null)
                throw new ArgumentNullException(nameof(resultCreateFields.Severity), "Property is required for class ResultCreateFields.");

            if (resultCreateFields.PriorityOption.IsSet && resultCreateFields.Priority == null)
                throw new ArgumentNullException(nameof(resultCreateFields.Priority), "Property is required for class ResultCreateFields.");

            if (resultCreateFields.BehaviorOption.IsSet && resultCreateFields.Behavior == null)
                throw new ArgumentNullException(nameof(resultCreateFields.Behavior), "Property is required for class ResultCreateFields.");

            if (resultCreateFields.TypeOption.IsSet && resultCreateFields.Type == null)
                throw new ArgumentNullException(nameof(resultCreateFields.Type), "Property is required for class ResultCreateFields.");

            if (resultCreateFields.MutedOption.IsSet && resultCreateFields.Muted == null)
                throw new ArgumentNullException(nameof(resultCreateFields.Muted), "Property is required for class ResultCreateFields.");

            if (resultCreateFields.IsFlakyOption.IsSet && resultCreateFields.IsFlaky == null)
                throw new ArgumentNullException(nameof(resultCreateFields.IsFlaky), "Property is required for class ResultCreateFields.");

            if (resultCreateFields.ExecutedByOption.IsSet && resultCreateFields.ExecutedBy == null)
                throw new ArgumentNullException(nameof(resultCreateFields.ExecutedBy), "Property is required for class ResultCreateFields.");

            if (resultCreateFields.AuthorOption.IsSet)
                writer.WriteString("author", resultCreateFields.Author);

            if (resultCreateFields.DescriptionOption.IsSet)
                writer.WriteString("description", resultCreateFields.Description);

            if (resultCreateFields.PreconditionsOption.IsSet)
                writer.WriteString("preconditions", resultCreateFields.Preconditions);

            if (resultCreateFields.PostconditionsOption.IsSet)
                writer.WriteString("postconditions", resultCreateFields.Postconditions);

            if (resultCreateFields.LayerOption.IsSet)
                writer.WriteString("layer", resultCreateFields.Layer);

            if (resultCreateFields.SeverityOption.IsSet)
                writer.WriteString("severity", resultCreateFields.Severity);

            if (resultCreateFields.PriorityOption.IsSet)
                writer.WriteString("priority", resultCreateFields.Priority);

            if (resultCreateFields.BehaviorOption.IsSet)
                writer.WriteString("behavior", resultCreateFields.Behavior);

            if (resultCreateFields.TypeOption.IsSet)
                writer.WriteString("type", resultCreateFields.Type);

            if (resultCreateFields.MutedOption.IsSet)
                writer.WriteString("muted", resultCreateFields.Muted);

            if (resultCreateFields.IsFlakyOption.IsSet)
                writer.WriteString("is_flaky", resultCreateFields.IsFlaky);

            if (resultCreateFields.ExecutedByOption.IsSet)
                writer.WriteString("executed_by", resultCreateFields.ExecutedBy);
        }
    }
}
