// <auto-generated>
/*
 * Qase.io TestOps API v2
 *
 * Qase TestOps API v2 Specification.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V2.Client;

namespace Qase.ApiClient.V2.Model
{
    /// <summary>
    /// Defines ResultStepStatus
    /// </summary>
    public enum ResultStepStatus
    {
        /// <summary>
        /// Enum Passed for value: passed
        /// </summary>
        Passed = 1,

        /// <summary>
        /// Enum Failed for value: failed
        /// </summary>
        Failed = 2,

        /// <summary>
        /// Enum Blocked for value: blocked
        /// </summary>
        Blocked = 3,

        /// <summary>
        /// Enum Skipped for value: skipped
        /// </summary>
        Skipped = 4
    }

    /// <summary>
    /// Converts <see cref="ResultStepStatus"/> to and from the JSON value
    /// </summary>
    public static class ResultStepStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ResultStepStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ResultStepStatus FromString(string value)
        {
            if (value.Equals("passed"))
                return ResultStepStatus.Passed;

            if (value.Equals("failed"))
                return ResultStepStatus.Failed;

            if (value.Equals("blocked"))
                return ResultStepStatus.Blocked;

            if (value.Equals("skipped"))
                return ResultStepStatus.Skipped;

            throw new NotImplementedException($"Could not convert value to type ResultStepStatus: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ResultStepStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ResultStepStatus? FromStringOrDefault(string value)
        {
            if (value.Equals("passed"))
                return ResultStepStatus.Passed;

            if (value.Equals("failed"))
                return ResultStepStatus.Failed;

            if (value.Equals("blocked"))
                return ResultStepStatus.Blocked;

            if (value.Equals("skipped"))
                return ResultStepStatus.Skipped;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ResultStepStatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ResultStepStatus value)
        {
            if (value == ResultStepStatus.Passed)
                return "passed";

            if (value == ResultStepStatus.Failed)
                return "failed";

            if (value == ResultStepStatus.Blocked)
                return "blocked";

            if (value == ResultStepStatus.Skipped)
                return "skipped";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResultStepStatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ResultStepStatusJsonConverter : JsonConverter<ResultStepStatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ResultStepStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ResultStepStatus? result = rawValue == null
                ? null
                : ResultStepStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ResultStepStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultStepStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ResultStepStatus resultStepStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(resultStepStatus.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResultStepStatus"/>
    /// </summary>
    public class ResultStepStatusNullableJsonConverter : JsonConverter<ResultStepStatus?>
    {
        /// <summary>
        /// Returns a ResultStepStatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ResultStepStatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ResultStepStatus? result = rawValue == null
                ? null
                : ResultStepStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultStepStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ResultStepStatus? resultStepStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(resultStepStatus?.ToString() ?? "null");
        }
    }
}
