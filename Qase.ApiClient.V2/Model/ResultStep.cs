// <auto-generated>
/*
 * Qase.io TestOps API v2
 *
 * Qase TestOps API v2 Specification.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V2.Client;

namespace Qase.ApiClient.V2.Model
{
    /// <summary>
    /// ResultStep
    /// </summary>
    public partial class ResultStep : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultStep" /> class.
        /// </summary>
        /// <param name="data">data</param>
        /// <param name="execution">execution</param>
        /// <param name="steps">Nested steps will be here. The same structure is used for them.</param>
        [JsonConstructor]
        public ResultStep(Option<ResultStepData?> data = default, Option<ResultStepExecution?> execution = default, Option<List<Object>?> steps = default)
        {
            DataOption = data;
            ExecutionOption = execution;
            StepsOption = steps;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ResultStepData?> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public ResultStepData? Data { get { return this.DataOption; } set { this.DataOption = new Option<ResultStepData?>(value); } }

        /// <summary>
        /// Used to track the state of Execution
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ResultStepExecution?> ExecutionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Execution
        /// </summary>
        [JsonPropertyName("execution")]
        public ResultStepExecution? Execution { get { return this.ExecutionOption; } set { this.ExecutionOption = new Option<ResultStepExecution?>(value); } }

        /// <summary>
        /// Used to track the state of Steps
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Object>?> StepsOption { get; private set; }

        /// <summary>
        /// Nested steps will be here. The same structure is used for them.
        /// </summary>
        /// <value>Nested steps will be here. The same structure is used for them.</value>
        [JsonPropertyName("steps")]
        public List<Object>? Steps { get { return this.StepsOption; } set { this.StepsOption = new Option<List<Object>?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResultStep {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Execution: ").Append(Execution).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResultStep" />
    /// </summary>
    public class ResultStepJsonConverter : JsonConverter<ResultStep>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResultStep" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResultStep Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ResultStepData?> data = default;
            Option<ResultStepExecution?> execution = default;
            Option<List<Object>?> steps = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "data":
                            data = new Option<ResultStepData?>(JsonSerializer.Deserialize<ResultStepData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "execution":
                            execution = new Option<ResultStepExecution?>(JsonSerializer.Deserialize<ResultStepExecution>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "steps":
                            steps = new Option<List<Object>?>(JsonSerializer.Deserialize<List<Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class ResultStep.");

            if (execution.IsSet && execution.Value == null)
                throw new ArgumentNullException(nameof(execution), "Property is not nullable for class ResultStep.");

            if (steps.IsSet && steps.Value == null)
                throw new ArgumentNullException(nameof(steps), "Property is not nullable for class ResultStep.");

            return new ResultStep(data, execution, steps);
        }

        /// <summary>
        /// Serializes a <see cref="ResultStep" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultStep"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResultStep resultStep, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, resultStep, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResultStep" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultStep"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResultStep resultStep, JsonSerializerOptions jsonSerializerOptions)
        {
            if (resultStep.DataOption.IsSet && resultStep.Data == null)
                throw new ArgumentNullException(nameof(resultStep.Data), "Property is required for class ResultStep.");

            if (resultStep.ExecutionOption.IsSet && resultStep.Execution == null)
                throw new ArgumentNullException(nameof(resultStep.Execution), "Property is required for class ResultStep.");

            if (resultStep.StepsOption.IsSet && resultStep.Steps == null)
                throw new ArgumentNullException(nameof(resultStep.Steps), "Property is required for class ResultStep.");

            if (resultStep.DataOption.IsSet)
            {
                writer.WritePropertyName("data");
                JsonSerializer.Serialize(writer, resultStep.Data, jsonSerializerOptions);
            }
            if (resultStep.ExecutionOption.IsSet)
            {
                writer.WritePropertyName("execution");
                JsonSerializer.Serialize(writer, resultStep.Execution, jsonSerializerOptions);
            }
            if (resultStep.StepsOption.IsSet)
            {
                writer.WritePropertyName("steps");
                JsonSerializer.Serialize(writer, resultStep.Steps, jsonSerializerOptions);
            }
        }
    }
}
