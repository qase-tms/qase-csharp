// <auto-generated>
/*
 * Qase.io TestOps API v2
 *
 * Qase TestOps API v2 Specification.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V2.Client;

namespace Qase.ApiClient.V2.Model
{
    /// <summary>
    /// Defines ResultStepsType
    /// </summary>
    public enum ResultStepsType
    {
        /// <summary>
        /// Enum Classic for value: classic
        /// </summary>
        Classic = 1,

        /// <summary>
        /// Enum Gherkin for value: gherkin
        /// </summary>
        Gherkin = 2
    }

    /// <summary>
    /// Converts <see cref="ResultStepsType"/> to and from the JSON value
    /// </summary>
    public static class ResultStepsTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ResultStepsType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ResultStepsType FromString(string value)
        {
            if (value.Equals("classic"))
                return ResultStepsType.Classic;

            if (value.Equals("gherkin"))
                return ResultStepsType.Gherkin;

            throw new NotImplementedException($"Could not convert value to type ResultStepsType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ResultStepsType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ResultStepsType? FromStringOrDefault(string value)
        {
            if (value.Equals("classic"))
                return ResultStepsType.Classic;

            if (value.Equals("gherkin"))
                return ResultStepsType.Gherkin;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ResultStepsType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ResultStepsType value)
        {
            if (value == ResultStepsType.Classic)
                return "classic";

            if (value == ResultStepsType.Gherkin)
                return "gherkin";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResultStepsType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ResultStepsTypeJsonConverter : JsonConverter<ResultStepsType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ResultStepsType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ResultStepsType? result = rawValue == null
                ? null
                : ResultStepsTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ResultStepsType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultStepsType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ResultStepsType resultStepsType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(resultStepsType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResultStepsType"/>
    /// </summary>
    public class ResultStepsTypeNullableJsonConverter : JsonConverter<ResultStepsType?>
    {
        /// <summary>
        /// Returns a ResultStepsType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ResultStepsType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ResultStepsType? result = rawValue == null
                ? null
                : ResultStepsTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultStepsType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ResultStepsType? resultStepsType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(resultStepsType?.ToString() ?? "null");
        }
    }
}
