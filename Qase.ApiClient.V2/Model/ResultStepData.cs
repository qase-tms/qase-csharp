// <auto-generated>
/*
 * Qase.io TestOps API v2
 *
 * Qase TestOps API v2 Specification.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V2.Client;

namespace Qase.ApiClient.V2.Model
{
    /// <summary>
    /// ResultStepData
    /// </summary>
    public partial class ResultStepData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultStepData" /> class.
        /// </summary>
        /// <param name="action">action</param>
        /// <param name="expectedResult">expectedResult</param>
        /// <param name="inputData">inputData</param>
        /// <param name="attachments">attachments</param>
        [JsonConstructor]
        public ResultStepData(string action, Option<string?> expectedResult = default, Option<string?> inputData = default, Option<List<string>?> attachments = default)
        {
            Action = action;
            ExpectedResultOption = expectedResult;
            InputDataOption = inputData;
            AttachmentsOption = attachments;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [JsonPropertyName("action")]
        public string Action { get; set; }

        /// <summary>
        /// Used to track the state of ExpectedResult
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExpectedResultOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExpectedResult
        /// </summary>
        [JsonPropertyName("expected_result")]
        public string? ExpectedResult { get { return this.ExpectedResultOption; } set { this.ExpectedResultOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of InputData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InputDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets InputData
        /// </summary>
        [JsonPropertyName("input_data")]
        public string? InputData { get { return this.InputDataOption; } set { this.InputDataOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Attachments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> AttachmentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [JsonPropertyName("attachments")]
        public List<string>? Attachments { get { return this.AttachmentsOption; } set { this.AttachmentsOption = new Option<List<string>?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResultStepData {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  ExpectedResult: ").Append(ExpectedResult).Append("\n");
            sb.Append("  InputData: ").Append(InputData).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResultStepData" />
    /// </summary>
    public class ResultStepDataJsonConverter : JsonConverter<ResultStepData>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResultStepData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResultStepData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> action = default;
            Option<string?> expectedResult = default;
            Option<string?> inputData = default;
            Option<List<string>?> attachments = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "action":
                            action = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expected_result":
                            expectedResult = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "input_data":
                            inputData = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "attachments":
                            attachments = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!action.IsSet)
                throw new ArgumentException("Property is required for class ResultStepData.", nameof(action));

            if (action.IsSet && action.Value == null)
                throw new ArgumentNullException(nameof(action), "Property is not nullable for class ResultStepData.");

            if (expectedResult.IsSet && expectedResult.Value == null)
                throw new ArgumentNullException(nameof(expectedResult), "Property is not nullable for class ResultStepData.");

            if (inputData.IsSet && inputData.Value == null)
                throw new ArgumentNullException(nameof(inputData), "Property is not nullable for class ResultStepData.");

            if (attachments.IsSet && attachments.Value == null)
                throw new ArgumentNullException(nameof(attachments), "Property is not nullable for class ResultStepData.");

            return new ResultStepData(action.Value!, expectedResult, inputData, attachments);
        }

        /// <summary>
        /// Serializes a <see cref="ResultStepData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultStepData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResultStepData resultStepData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, resultStepData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResultStepData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultStepData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResultStepData resultStepData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (resultStepData.Action == null)
                throw new ArgumentNullException(nameof(resultStepData.Action), "Property is required for class ResultStepData.");

            if (resultStepData.ExpectedResultOption.IsSet && resultStepData.ExpectedResult == null)
                throw new ArgumentNullException(nameof(resultStepData.ExpectedResult), "Property is required for class ResultStepData.");

            if (resultStepData.InputDataOption.IsSet && resultStepData.InputData == null)
                throw new ArgumentNullException(nameof(resultStepData.InputData), "Property is required for class ResultStepData.");

            if (resultStepData.AttachmentsOption.IsSet && resultStepData.Attachments == null)
                throw new ArgumentNullException(nameof(resultStepData.Attachments), "Property is required for class ResultStepData.");

            writer.WriteString("action", resultStepData.Action);

            if (resultStepData.ExpectedResultOption.IsSet)
                writer.WriteString("expected_result", resultStepData.ExpectedResult);

            if (resultStepData.InputDataOption.IsSet)
                writer.WriteString("input_data", resultStepData.InputData);

            if (resultStepData.AttachmentsOption.IsSet)
            {
                writer.WritePropertyName("attachments");
                JsonSerializer.Serialize(writer, resultStepData.Attachments, jsonSerializerOptions);
            }
        }
    }
}
