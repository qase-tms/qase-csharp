// <auto-generated>
/*
 * Qase.io TestOps API v2
 *
 * Qase TestOps API v2 Specification.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Qase.ApiClient.V2.Client;

namespace Qase.ApiClient.V2.Model
{
    /// <summary>
    /// ResultExecution
    /// </summary>
    public partial class ResultExecution : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultExecution" /> class.
        /// </summary>
        /// <param name="status">Can have the following values passed, failed, blocked, skipped, invalid + custom statuses</param>
        /// <param name="startTime">Unix epoch time in seconds (whole part) and milliseconds (fractional part).</param>
        /// <param name="endTime">Unix epoch time in seconds (whole part) and milliseconds (fractional part).</param>
        /// <param name="duration">Duration of the test execution in milliseconds.</param>
        /// <param name="stacktrace">stacktrace</param>
        /// <param name="thread">thread</param>
        [JsonConstructor]
        public ResultExecution(string status, Option<double?> startTime = default, Option<double?> endTime = default, Option<long?> duration = default, Option<string?> stacktrace = default, Option<string?> thread = default)
        {
            Status = status;
            StartTimeOption = startTime;
            EndTimeOption = endTime;
            DurationOption = duration;
            StacktraceOption = stacktrace;
            ThreadOption = thread;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Can have the following values passed, failed, blocked, skipped, invalid + custom statuses
        /// </summary>
        /// <value>Can have the following values passed, failed, blocked, skipped, invalid + custom statuses</value>
        [JsonPropertyName("status")]
        public string Status { get; set; }

        /// <summary>
        /// Used to track the state of StartTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> StartTimeOption { get; private set; }

        /// <summary>
        /// Unix epoch time in seconds (whole part) and milliseconds (fractional part).
        /// </summary>
        /// <value>Unix epoch time in seconds (whole part) and milliseconds (fractional part).</value>
        [JsonPropertyName("start_time")]
        public double? StartTime { get { return this.StartTimeOption; } set { this.StartTimeOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of EndTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> EndTimeOption { get; private set; }

        /// <summary>
        /// Unix epoch time in seconds (whole part) and milliseconds (fractional part).
        /// </summary>
        /// <value>Unix epoch time in seconds (whole part) and milliseconds (fractional part).</value>
        [JsonPropertyName("end_time")]
        public double? EndTime { get { return this.EndTimeOption; } set { this.EndTimeOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of Duration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DurationOption { get; private set; }

        /// <summary>
        /// Duration of the test execution in milliseconds.
        /// </summary>
        /// <value>Duration of the test execution in milliseconds.</value>
        [JsonPropertyName("duration")]
        public long? Duration { get { return this.DurationOption; } set { this.DurationOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Stacktrace
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StacktraceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Stacktrace
        /// </summary>
        [JsonPropertyName("stacktrace")]
        public string? Stacktrace { get { return this.StacktraceOption; } set { this.StacktraceOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Thread
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ThreadOption { get; private set; }

        /// <summary>
        /// Gets or Sets Thread
        /// </summary>
        [JsonPropertyName("thread")]
        public string? Thread { get { return this.ThreadOption; } set { this.ThreadOption = new Option<string?>(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResultExecution {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Stacktrace: ").Append(Stacktrace).Append("\n");
            sb.Append("  Thread: ").Append(Thread).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResultExecution" />
    /// </summary>
    public class ResultExecutionJsonConverter : JsonConverter<ResultExecution>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResultExecution" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResultExecution Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> status = default;
            Option<double?> startTime = default;
            Option<double?> endTime = default;
            Option<long?> duration = default;
            Option<string?> stacktrace = default;
            Option<string?> thread = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "start_time":
                            startTime = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "end_time":
                            endTime = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "duration":
                            duration = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "stacktrace":
                            stacktrace = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "thread":
                            thread = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class ResultExecution.", nameof(status));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ResultExecution.");

            return new ResultExecution(status.Value!, startTime, endTime, duration, stacktrace, thread);
        }

        /// <summary>
        /// Serializes a <see cref="ResultExecution" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultExecution"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResultExecution resultExecution, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, resultExecution, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResultExecution" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resultExecution"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResultExecution resultExecution, JsonSerializerOptions jsonSerializerOptions)
        {
            if (resultExecution.Status == null)
                throw new ArgumentNullException(nameof(resultExecution.Status), "Property is required for class ResultExecution.");

            writer.WriteString("status", resultExecution.Status);

            if (resultExecution.StartTimeOption.IsSet)
                if (resultExecution.StartTimeOption.Value != null)
                    writer.WriteNumber("start_time", resultExecution.StartTimeOption.Value!.Value);
                else
                    writer.WriteNull("start_time");

            if (resultExecution.EndTimeOption.IsSet)
                if (resultExecution.EndTimeOption.Value != null)
                    writer.WriteNumber("end_time", resultExecution.EndTimeOption.Value!.Value);
                else
                    writer.WriteNull("end_time");

            if (resultExecution.DurationOption.IsSet)
                if (resultExecution.DurationOption.Value != null)
                    writer.WriteNumber("duration", resultExecution.DurationOption.Value!.Value);
                else
                    writer.WriteNull("duration");

            if (resultExecution.StacktraceOption.IsSet)
                if (resultExecution.StacktraceOption.Value != null)
                    writer.WriteString("stacktrace", resultExecution.Stacktrace);
                else
                    writer.WriteNull("stacktrace");

            if (resultExecution.ThreadOption.IsSet)
                if (resultExecution.ThreadOption.Value != null)
                    writer.WriteString("thread", resultExecution.Thread);
                else
                    writer.WriteNull("thread");
        }
    }
}
