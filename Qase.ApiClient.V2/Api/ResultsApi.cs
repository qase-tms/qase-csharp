// <auto-generated>
/*
 * Qase.io TestOps API v2
 *
 * Qase TestOps API v2 Specification.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@qase.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Qase.ApiClient.V2.Client;
using Qase.ApiClient.V2.Model;

namespace Qase.ApiClient.V2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IResultsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ResultsApiEvents Events { get; }

        /// <summary>
        /// Create test run result
        /// </summary>
        /// <remarks>
        /// This method allows to create single test run result.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCode"></param>
        /// <param name="runId"></param>
        /// <param name="resultCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateResultV2ApiResponse"/>&gt;</returns>
        Task<ICreateResultV2ApiResponse> CreateResultV2Async(string projectCode, long runId, ResultCreate resultCreate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create test run result
        /// </summary>
        /// <remarks>
        /// This method allows to create single test run result.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage. 
        /// </remarks>
        /// <param name="projectCode"></param>
        /// <param name="runId"></param>
        /// <param name="resultCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateResultV2ApiResponse"/>?&gt;</returns>
        Task<ICreateResultV2ApiResponse?> CreateResultV2OrDefaultAsync(string projectCode, long runId, ResultCreate resultCreate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Bulk create test run result
        /// </summary>
        /// <remarks>
        /// This method allows to create several test run results at once.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCode"></param>
        /// <param name="runId"></param>
        /// <param name="createResultsRequestV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateResultsV2ApiResponse"/>&gt;</returns>
        Task<ICreateResultsV2ApiResponse> CreateResultsV2Async(string projectCode, long runId, CreateResultsRequestV2 createResultsRequestV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Bulk create test run result
        /// </summary>
        /// <remarks>
        /// This method allows to create several test run results at once.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage. 
        /// </remarks>
        /// <param name="projectCode"></param>
        /// <param name="runId"></param>
        /// <param name="createResultsRequestV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateResultsV2ApiResponse"/>?&gt;</returns>
        Task<ICreateResultsV2ApiResponse?> CreateResultsV2OrDefaultAsync(string projectCode, long runId, CreateResultsRequestV2 createResultsRequestV2, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateResultV2ApiResponse"/>
    /// </summary>
    public interface ICreateResultV2ApiResponse : Qase.ApiClient.V2.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 202 Accepted
        /// </summary>
        /// <returns></returns>
        bool IsAccepted { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ICreateResultsV2ApiResponse"/>
    /// </summary>
    public interface ICreateResultsV2ApiResponse : Qase.ApiClient.V2.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 202 Accepted
        /// </summary>
        /// <returns></returns>
        bool IsAccepted { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ResultsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateResultV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateResultV2;

        internal void ExecuteOnCreateResultV2(ResultsApi.CreateResultV2ApiResponse apiResponse)
        {
            OnCreateResultV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateResultV2(Exception exception)
        {
            OnErrorCreateResultV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateResultsV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateResultsV2;

        internal void ExecuteOnCreateResultsV2(ResultsApi.CreateResultsV2ApiResponse apiResponse)
        {
            OnCreateResultsV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateResultsV2(Exception exception)
        {
            OnErrorCreateResultsV2?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ResultsApi : IResultsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ResultsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ResultsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResultsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ResultsApi(ILogger<ResultsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ResultsApiEvents resultsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ResultsApi>();
            HttpClient = httpClient;
            Events = resultsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateResultV2(ref string projectCode, ref long runId, ResultCreate resultCreate);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="projectCode"></param>
        /// <param name="resultCreate"></param>
        /// <returns></returns>
        private void ValidateCreateResultV2(string projectCode, ResultCreate resultCreate)
        {
            if (projectCode == null)
                throw new ArgumentNullException(nameof(projectCode));

            if (resultCreate == null)
                throw new ArgumentNullException(nameof(resultCreate));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectCode"></param>
        /// <param name="runId"></param>
        /// <param name="resultCreate"></param>
        private void AfterCreateResultV2DefaultImplementation(ICreateResultV2ApiResponse apiResponseLocalVar, string projectCode, long runId, ResultCreate resultCreate)
        {
            bool suppressDefaultLog = false;
            AfterCreateResultV2(ref suppressDefaultLog, apiResponseLocalVar, projectCode, runId, resultCreate);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectCode"></param>
        /// <param name="runId"></param>
        /// <param name="resultCreate"></param>
        partial void AfterCreateResultV2(ref bool suppressDefaultLog, ICreateResultV2ApiResponse apiResponseLocalVar, string projectCode, long runId, ResultCreate resultCreate);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectCode"></param>
        /// <param name="runId"></param>
        /// <param name="resultCreate"></param>
        private void OnErrorCreateResultV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string projectCode, long runId, ResultCreate resultCreate)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateResultV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, projectCode, runId, resultCreate);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectCode"></param>
        /// <param name="runId"></param>
        /// <param name="resultCreate"></param>
        partial void OnErrorCreateResultV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string projectCode, long runId, ResultCreate resultCreate);

        /// <summary>
        /// Create test run result This method allows to create single test run result.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage. 
        /// </summary>
        /// <param name="projectCode"></param>
        /// <param name="runId"></param>
        /// <param name="resultCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateResultV2ApiResponse"/>&gt;</returns>
        public async Task<ICreateResultV2ApiResponse?> CreateResultV2OrDefaultAsync(string projectCode, long runId, ResultCreate resultCreate, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateResultV2Async(projectCode, runId, resultCreate, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create test run result This method allows to create single test run result.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCode"></param>
        /// <param name="runId"></param>
        /// <param name="resultCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateResultV2ApiResponse"/>&gt;</returns>
        public async Task<ICreateResultV2ApiResponse> CreateResultV2Async(string projectCode, long runId, ResultCreate resultCreate, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateResultV2(projectCode, resultCreate);

                FormatCreateResultV2(ref projectCode, ref runId, resultCreate);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{project_code}/run/{run_id}/result"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{project_code}/run/{run_id}/result");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bproject_code%7D", Uri.EscapeDataString(projectCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brun_id%7D", Uri.EscapeDataString(runId.ToString()));

                    httpRequestMessageLocalVar.Content = (resultCreate as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(resultCreate, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateResultV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateResultV2ApiResponse>();

                        CreateResultV2ApiResponse apiResponseLocalVar = new CreateResultV2ApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{project_code}/run/{run_id}/result", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateResultV2DefaultImplementation(apiResponseLocalVar, projectCode, runId, resultCreate);

                        Events.ExecuteOnCreateResultV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateResultV2DefaultImplementation(e, "/{project_code}/run/{run_id}/result", uriBuilderLocalVar.Path, projectCode, runId, resultCreate);
                Events.ExecuteOnErrorCreateResultV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateResultV2ApiResponse"/>
        /// </summary>
        public partial class CreateResultV2ApiResponse : Qase.ApiClient.V2.Client.ApiResponse, ICreateResultV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateResultV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateResultV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateResultV2ApiResponse(ILogger<CreateResultV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 202 Accepted
            /// </summary>
            /// <returns></returns>
            public bool IsAccepted => 202 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateResultsV2(ref string projectCode, ref long runId, CreateResultsRequestV2 createResultsRequestV2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="projectCode"></param>
        /// <param name="createResultsRequestV2"></param>
        /// <returns></returns>
        private void ValidateCreateResultsV2(string projectCode, CreateResultsRequestV2 createResultsRequestV2)
        {
            if (projectCode == null)
                throw new ArgumentNullException(nameof(projectCode));

            if (createResultsRequestV2 == null)
                throw new ArgumentNullException(nameof(createResultsRequestV2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectCode"></param>
        /// <param name="runId"></param>
        /// <param name="createResultsRequestV2"></param>
        private void AfterCreateResultsV2DefaultImplementation(ICreateResultsV2ApiResponse apiResponseLocalVar, string projectCode, long runId, CreateResultsRequestV2 createResultsRequestV2)
        {
            bool suppressDefaultLog = false;
            AfterCreateResultsV2(ref suppressDefaultLog, apiResponseLocalVar, projectCode, runId, createResultsRequestV2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectCode"></param>
        /// <param name="runId"></param>
        /// <param name="createResultsRequestV2"></param>
        partial void AfterCreateResultsV2(ref bool suppressDefaultLog, ICreateResultsV2ApiResponse apiResponseLocalVar, string projectCode, long runId, CreateResultsRequestV2 createResultsRequestV2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectCode"></param>
        /// <param name="runId"></param>
        /// <param name="createResultsRequestV2"></param>
        private void OnErrorCreateResultsV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string projectCode, long runId, CreateResultsRequestV2 createResultsRequestV2)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateResultsV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, projectCode, runId, createResultsRequestV2);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectCode"></param>
        /// <param name="runId"></param>
        /// <param name="createResultsRequestV2"></param>
        partial void OnErrorCreateResultsV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string projectCode, long runId, CreateResultsRequestV2 createResultsRequestV2);

        /// <summary>
        /// Bulk create test run result This method allows to create several test run results at once.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage. 
        /// </summary>
        /// <param name="projectCode"></param>
        /// <param name="runId"></param>
        /// <param name="createResultsRequestV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateResultsV2ApiResponse"/>&gt;</returns>
        public async Task<ICreateResultsV2ApiResponse?> CreateResultsV2OrDefaultAsync(string projectCode, long runId, CreateResultsRequestV2 createResultsRequestV2, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateResultsV2Async(projectCode, runId, createResultsRequestV2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Bulk create test run result This method allows to create several test run results at once.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCode"></param>
        /// <param name="runId"></param>
        /// <param name="createResultsRequestV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateResultsV2ApiResponse"/>&gt;</returns>
        public async Task<ICreateResultsV2ApiResponse> CreateResultsV2Async(string projectCode, long runId, CreateResultsRequestV2 createResultsRequestV2, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateResultsV2(projectCode, createResultsRequestV2);

                FormatCreateResultsV2(ref projectCode, ref runId, createResultsRequestV2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/{project_code}/run/{run_id}/results"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/{project_code}/run/{run_id}/results");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bproject_code%7D", Uri.EscapeDataString(projectCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brun_id%7D", Uri.EscapeDataString(runId.ToString()));

                    httpRequestMessageLocalVar.Content = (createResultsRequestV2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createResultsRequestV2, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Token", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateResultsV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateResultsV2ApiResponse>();

                        CreateResultsV2ApiResponse apiResponseLocalVar = new CreateResultsV2ApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{project_code}/run/{run_id}/results", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateResultsV2DefaultImplementation(apiResponseLocalVar, projectCode, runId, createResultsRequestV2);

                        Events.ExecuteOnCreateResultsV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateResultsV2DefaultImplementation(e, "/{project_code}/run/{run_id}/results", uriBuilderLocalVar.Path, projectCode, runId, createResultsRequestV2);
                Events.ExecuteOnErrorCreateResultsV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateResultsV2ApiResponse"/>
        /// </summary>
        public partial class CreateResultsV2ApiResponse : Qase.ApiClient.V2.Client.ApiResponse, ICreateResultsV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateResultsV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateResultsV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateResultsV2ApiResponse(ILogger<CreateResultsV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 202 Accepted
            /// </summary>
            /// <returns></returns>
            public bool IsAccepted => 202 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
